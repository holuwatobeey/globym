{"version":3,"sources":["public-igniter.js","PublicController.js","ProductsController.js","DisplayFeaturedProductsController.js","ProductDetailsController.js","ProductDetailsDialogController.js","DisplayPageDetailsController.js","CartController.js","OrderSummaryController.js","ProductAllReviewsController.js","ProductAllQuestionsController.js","MyOrderListController.js","MyOrderDetailsController.js","MyOrderLogController.js","CancelMyOrderController.js","PublicAddressEngine.js","UserLoginController.js","UserLogoutController.js","UserForgotPasswordController.js","UserResetPasswordController.js","UserChangePasswordController.js","UserChangeEmailController.js","UserRegisterController.js","UserContactController.js","UserProfileController.js","UserProfileEditController.js","UserAddressAddController.js","UserAddressListController.js","UserAddressEditcontroller.js","UserResendActivationEmailController.js","MyWishListController.js","MyRatingListController.js"],"names":[],"mappingsjinzrzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzjjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrlbzzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzrpjXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrfile":"../Product/public-app.src.js","sourcesContent":["(function() {\n'use strict';\n\n    angular.module('PublicApp', [\n        'ngMessages',\n        'ngAnimate',\n        'ngSanitize',\n        'ui.router',\n        'ngNotify',\n        'ngDialog',\n        'angular-loading-bar',\n        'selectize',\n        'lw.core.utils',\n        'lw.security.main',\n        'lw.auth',\n        'rzModule',\n        'lw.data.datastore',\n        'lw.data.datatable',\n        'NgSwitchery',\n        'lw.form.main',\n        'app.service',\n        'app.http',\n        'app.notification',\n        'app.form',\n        'app.directives',\n        'PublicApp.master',\n        'UserApp.login',\n        'UserApp.logout',\n        'UserApp.forgotPassword',\n        'UserApp.resendActivationEmail',\n        'UserApp.resetPassword',\n        'UserApp.changePassword',\n        'UserApp.changeEmail',\n        'UserApp.register',\n        'UserApp.contact',\n        'UserApp.profile',\n        'UserApp.profileEdit',\n        'UserApp.address',\n        'UserApp.Addresslist',\n        'UserApp.editAddress',\n        'PublicApp.display.products',\n        'PublicApp.display.featured.products',\n        'PublicApp.productDetails',\n        'ManageProductApp.allProductReviews',\n        'ManageProductApp.allProductQuestions',\n        'PublicApp.productDetailsDialog',\n        'PublicApp.page.details',\n        'PublicApp.ShoppingCart.cart',\n        'PublicApp.ShoppingCart.orderSummary',\n        'PublicApp.Order.list',\n        'PublicApp.Order.details',\n        'PublicApp.Order.cancel',\n        'PublicApp.Order.log',\n        'PublicApp.address',\n        'PublicApp.myWishList',\n        'PublicApp.myRatingList'\n    ]).\n    //constant('__ngSupport', window.__ngSupport).\n    run([\n        '__Auth', '$state', '$rootScope', function(__Auth, $state, $rootScope) {\n\n        // Verify Route Permissions\n        __Auth.verifyRoute($state);\n\n        $rootScope.__ngSupport = window.__ngSupport;\n\n    }\n    ]).\n    config([ \n        '$stateProvider', '$urlRouterProvider', '$interpolateProvider', routes\n    ]);\n\n  \n    /**\n      * Application Routes Configuration\n      *\n      * @inject $stateProvider\n      * @inject $urlRouterProvider\n      * @inject $interpolateProvider\n      *\n      * @return void\n      *---------------------------------------------------------------- */\n\n    function routes($stateProvider, $urlRouterProvider, $interpolateProvider) {\n\n        $interpolateProvider.startSymbol('[[');\n        $interpolateProvider.endSymbol(']]');\n\n    };\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t PublicController\n\t-------------------------------------------------------------------------- */\n\t\n\tangular\n        .module('PublicApp.master', [])\n        .controller('PublicController', \t[\n\t\t\t'$rootScope', \n            '$scope', \n            '__Auth', \n            'appServices', \n            'appNotify', \n            '__DataStore',\n            '$state',\n            '$compile',\n            '__Utils',\n            '$q',\n            PublicController \n\t \t]);\n\n\t/**\n\t * PublicController for main page application\n\t *\n\t * @inject __Auth\n\t * @inject $rootScope\n\t * @inject appServices\n\t * @inject $scope\n\t * \n\t * @return void\n\t *-------------------------------------------------------- */\n\n\t function PublicController($rootScope, $scope, __Auth,  appServices\n\t \t, appNotify,  __DataStore, $state, $compile, __Utils, $q) {\n\n\t \tvar scope \t= this;\n\n\t \t__Auth.refresh(function(authInfo) {\n\t \t\tscope.auth_info = authInfo;\n\n\t \t});\n\n        scope.unhandledError = function() {\n\n              appNotify.error(__globals.getReactionMessage(19)); // Unhandled errors\n\n        };\n\n\t \t$rootScope.$on('lw.events.state.change_start', function () {\n\t \t\tappServices.closeAllDialog();    \n        });\n\n\t \t$rootScope.$on('lw.auth.event.reset', function (event, authInfo) {\n\t \t\tscope.auth_info = authInfo;             \n        });\n\n\t \t$rootScope.$on('lw.form.event.process.started', function (event, data) {\n\t \t\t$('button.lw-btn-process span').addClass('fa fa-spinner fa-spin');\n        \t$('button.lw-btn-process').prop(\"disabled\", true);\n\n    \t});\n\n\t \t$rootScope.$on('lw.form.event.process.finished', function (event, data) {\n\n        \t$('button.lw-btn-process span').removeClass('fa fa-spinner fa-spin');\n        \t$('button.lw-btn-process').prop(\"disabled\", false);\n\n    \t} );\n\n        $rootScope.$on('lw.form.event.fetch.started', __globals.showFormLoader );\n\n        $rootScope.$on('lw.datastore.event.fetch.finished', __globals.hideFormLoader );\n\n        $rootScope.$on('lw.form.event.process.error', scope.unhandledError );\n\n        $rootScope.$on('lw.datastore.event.fetch.error', scope.unhandledError );\n\n        $rootScope.$on('lw.update.cart.string', function (event, data) {\n\n        \tscope.cart_string = data.cart_string;\n        \tscope.status      = data.status;\n        \t\n        \tif (scope.status == true) {\n\n\t            $('.lw-shopping-cart-btn').fadeIn(\"highlight\", '#FFF',5000\n\t                    );\n                 scope.getCartString();\n        \t}\n\n\t\t\tif (_.has(data, 'showNotification')) {\n\t\t\t\tscope.toggleShoppinCartButtonShow();\n\t\t\t}\n\n    \t});\n\n        //product compare count event\n        $rootScope.$on('lw.product.compare.count', function (event, data) {\n          \n            if (data) {\n                scope.getProductCompareCount();\n            }\n           \n        });\n\n    \tscope.store_info       = window.store_info;\n    \t$rootScope.isPublicApp = window.__appImmutables.publicApp;\n\n        scope.formatAmount = function(amount, currencySymbol, currency, decimalValue) {\n\n           return __globals.priceFormat(amount, currencySymbol, currency);\n\n        };\n\n        $.typeahead({\n            input: '.lw-product-search-input',\n            minLength: 1,\n            order: \"asc\",\n            dynamic: true,\n            delay: 500,\n            hint: false,\n            searchOnFocus: false,\n            emptyTemplate: \"no search result found\",\n            source: {\n                searchResult : {\n                    display: \"name\",\n                    ajax: function (query, callback) {\n\n                        return {\n                            type : \"GET\",\n                            path : \"searchResult\",\n                            url  : __Utils.apiURL({\n                                        'apiURL'        : 'product.suggest.search',\n                                        'searchQuery'   : query\n                                    }),\n                            callback: {\n                                done: function (responseData) {;\n                                    return responseData.data;\n                                }\n                            }\n                        }\n                    },\n                }\n            },\n            callback: {\n                onClick: function (node, a, item, event) {\n                    event.preventDefault();\n                    window.location = item.searchUrl;\n                },\n                onSubmit: function (node, form, item, event) {\n\t\t           \tevent.preventDefault();\n\n\t\t           \tvar searchTerm = $('#lw-product-search-input').val();\n \t\t\t\t\tif (searchTerm) {\n \t\t\t\t\t\twindow.location = __Utils.apiURL('product.search')+'?search_term='+searchTerm\n \t\t\t\t\t}\n\t\t        }\n            },\n            debug: true\n        });\n\n        scope.dialogStatus = false;\n        //product quick view dialog\n        scope.showDetailsDialog = function(eventObj, productId) {\n           appServices.showDialog({\n                    categoryID   : null,\n                    productID    : productId,\n                    pageType     : '',\n                    dialogStatus : scope.dialogStatus\n                },\n                {\n                    templateUrl : __globals.getTemplateURL(\n                            'product.details-dialog'\n                        ),\n                    controller:\"ProductDetailsDialogController as productDetailsDialogCtrl\",\n                    resolve : {\n\n                        GetProductDetails : function() {\n\n                            //create a differed object          \n                            var defferedObject = $q.defer();   \n\n                            __DataStore.fetch({\n                                    'apiURL'      : 'product.quick.view.details.support_data',\n                                    'productID'   : productId,\n                                    'categoryID?' : scope.categoryID\n                                }, {'fresh':true}).success(function(responseData) {\n                                                \n                                appServices.processResponse(responseData, null, function(reactionCode) {\n\n                                    //this method calls when the require        \n                                    //work has completed successfully        \n                                    //and results are returned to client        \n                                    defferedObject.resolve(responseData);  \n\n                                }); \n\n                            });       \n\n                               //return promise to caller          \n                               return defferedObject.promise;\n                        }\n                    }\n                },\n            function(promiseObj) {\n\n            });\n        };\n\n        //add product compare function start\n        scope.addProductCompare = function(productId) {\n\n            __DataStore.post({\n                'apiURL' :'product.compare.add',\n                'productId' : productId\n            }, scope).success(function(responseData) {\n              \n                var requestData = responseData.data;\n                appServices.processResponse(responseData, null , function(reactionCode) {\n                    if (reactionCode == 1) {\n                        var countCompareProduct = requestData.countCompareProduct;\n                        $scope.$emit('lw.product.compare.count', true);\n                    }\n                   \n                });   \n\n            });\n        }\n        //add product compare function end\n\n        /**\n        * set page title\n        *\n        * @param title\n        *\n        * @return string\n        *---------------------------------------------------------------- */\n\n    \tscope.setDocumentPageTitle = function(title) {\n\n\t        var newTitle;\n\n\t        if (_.isEmpty(scope.store_info.value)) {\n\n\t            newTitle = title;\n\n\t        } else {\n\t            newTitle = scope.store_info.value+' - '+title;\n\t        }\n\n\t        angular.element(document).prop('title', newTitle);\n        \n    \t};\n\n    \tscope.store_info   = window.store_info;\n\n\n        $rootScope.$on('lw.current.route.name', function(event, result){ \n            scope.routeStatus = result.routeStatus;\n\n        });\n\n        scope.themeColors = __globals.getAppImmutables('config')['theme_colors'];\n\n        /**\n        * Set Theme color\n        *---------------------------------------------------------------- */\n        scope.setThemeColor = function(colorName) {\n            __DataStore.fetch({\n                'apiURL': 'theme_color',\n                'colorName': colorName\n            }).success(function(responseData) {\n                $('div.lw-store-header, div.lw-current-logo-conatiner').css('background-color', '#'+responseData);\n            });\n        }\n\n        scope.showCurrencyNotification = function(message) {\n            appNotify.info(message, {duration: 5000});\n        }\n\n        scope.showHideThemeContainer = function() {\n            if (!$('.lw-theme-color-container').hasClass('lw-theme-container-active')) {\n                $('.lw-theme-color-container').addClass('lw-theme-container-active');\n                $('.lw-switch i:first').replaceWith(\"<span>&times;</span>\");\n            } else {\n                $('.lw-theme-color-container').removeClass('lw-theme-container-active');\n                $('.lw-switch span:first').replaceWith(\"<i class='fa fa-cog'></i>\");\n            }\n        }\n\n        /**\n        * open cart model\n        *\n        * @param object param1 type \n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        \n        scope.showloginDialog  =  function() \n        {   \n            var routeName = scope.auth_info.currentRouteName;\n        \t\n        \t//check if login dialog is open, if true then will not re-open again\n        \tif (!($(\"html\").hasClass(\"lw-public-login-page-active\"))) {\n\n        \t\t$('html').addClass('lw-public-login-page-active');\n\t            if (routeName != 'user.login') {\n\t                appServices.loginRequiredDialog('login-dialog', null, function(result) {\n\t                \t$('html').removeClass('lw-public-login-page-active');\n\t                    __DataStore.reset();\n\t                  \n\t                    if (result) {\n\t                        $(\"#lwLoginBtn\").hide();\n\t                        $(\"#lwRegisterBtn\").hide();\n\t                        // $state.reload();\n\t                        $rootScope.$broadcast('lw.login-success', true);\n\t                    }\n\n\t                });\n\t            }\n\t        }\n        }\n \n        /**\n        * open cart model\n        *\n        * @param object param1 type \n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        \n        scope.openCartDialog  =  function(status) \n        { \t\n        \t$rootScope.$broadcast('lw.isCart.dialog', { dialog: status });\n\n        \tif (status == true) {\n\n          \t\t$('html, body').animate({\n\t\t\t        scrollTop: $(\"#elementtoScrollToID\").offset().top\n\t\t\t    }, 200);\n\n          \t} else {\n\n          \t\t//check if shopping cart dialog is open, if true then will not re-open again\n          \t\tif (!($(\"html\").hasClass(\"lw-shopping-cart-dialog-active\"))) {\n          \t\t\t\n          \t\t\t$('html').addClass('lw-shopping-cart-dialog-active');\n\n\t                appServices.showDialog(scope,\n\t                {\n\t                    templateUrl : __globals.getTemplateURL('shoppingCart.cart-view')\n\t                },\n\t                function(promiseObj) {\n\t                \t$('html').removeClass('lw-shopping-cart-dialog-active');\n\t                });\n\n\t                $rootScope.$on('ngDialog.opened', function (e, $dialog) {\n\t                   \n\t                    if ($('div.lw-shopping-cart-dialog-content').length) {\n\t                        $('div.ngdialog-content').addClass('lw-shopping-cart-dialog');\n\t                    }\n\n\t                });\n          \t\t}\n          \t\n          \t}\n        };\n\n         /**\n        * product compare count event\n        *\n        * @return void\n        *------------------------------------------------------------------------ */\n        scope.loadCartStatus = false;\n\n        scope.getProductCompareCount = function(showNotification) {\n\n            // get data using angular $http.get() method\n            __DataStore.fetch('product.compare.read.product_count')\n                    .success(function(responseData) {\n\n                var requestData = responseData.data;\n                appServices.processResponse(responseData, null,\n                    function(reactionCode) {\n                        scope.totalProductCompare = requestData.totalProductCompare;\n                    }\n                ); \n                \n            });\n\n        };\n        // scope.getProductCompareCount();\n\n         /**\n        * remove all product compare\n        *\n        * @return void\n        *------------------------------------------------------------------------ */\n        scope.removeAllProductInComapre = function() {\n            __DataStore.post({\n                'apiURL' :'product.compare.remove_all'\n            }, scope).success(function(responseData) {\n              \n                var requestData = responseData.data;\n                appServices.processResponse(responseData, null , function(reactionCode) {\n                    if (reactionCode == 1) {\n                        var countCompareProduct = requestData.countCompareProduct;\n                        $scope.$emit('lw.product.compare.count', true);\n                    }\n                   \n                });   \n\n            });\n        };\n\n\n        /**\n\t    * get cart btn string\n\t    *\n\t    * @return void\n\t    *------------------------------------------------------------------------ */\n\t    scope.loadCartStatus = false;\n\n\t    scope.getCartString = function(showNotification) {\n\n\t        // get data using angular $http.get() method\n\t        __DataStore.fetch('cart.update.cart.string')\n\t        \t\t.success(function(responseData) {\n\n\t\t\t\tappServices.processResponse(responseData, null,\n                    function(reactionCode) {\n                       \n\t\t            \tscope.cart_string \t = responseData.data.cartString;\n                        scope.cartData    = responseData.data.cartItems;\n                        scope.totalItems    = responseData.data.totalItems;\n                        scope.cartTotal    = responseData.data.cartTotal;\n\t\t            \tscope.loadPage \t \t = responseData.reaction;\n\t\t            \tscope.loadCartStatus = true;\n\n                      \tscope.totalProductCompare = responseData.data.totalProductCompare;\n\t\t            \tif (scope.status === true) {\n\n\t\t\t\t            // $('.shopping-cart-btn').effect(\n\t\t\t\t            //             \"highlight\", \n\t\t\t\t            //             '#FFF',\n\t\t\t\t            //             5000\n\t\t\t\t            //         );\n\t\t\t        \t}\n\n\t\t\t\t\t\tif (showNotification) {\n\t\t\t\t\t\t\tscope.toggleShoppinCartButtonShow()\n\t\t\t\t\t\t}\n                    }\n                ); \n\t            \n    \t    });\n\n\t    };\n\t    scope.getCartString();\n\n\t\t/**\n          * Show hide shopping cart button\n          *\n          * @return void \n          *---------------------------------------------------------------- */\n        \n        scope.toggleShoppinCartButtonShow = function() {\n\n            var $dynamicShoppingCartBtn = $('.lw-dynamic-shopping-cart-btn').addClass('lw-bring-in-light'),\n                delayTimer = _.delay(function(){\n                $dynamicShoppingCartBtn.removeClass('lw-bring-in-light');\n            }, 3000);\n\n            $dynamicShoppingCartBtn.hover(function(){\n                clearInterval(delayTimer);\n            }, function(){\n                $dynamicShoppingCartBtn.removeClass('lw-bring-in-light');\n            });\n        };\n\n        /**\n          * Check if user logged in\n          *\n          * @return boolean \n          *---------------------------------------------------------------- */\n        \n        scope.isLoggedIn = function() {\n            return scope.auth_info.authorized;     // is looged in\n        };\n\n\t\t/**\n          * Check if user logged in\n          *\n          * @return boolean \n          *---------------------------------------------------------------- */\n        \n        $rootScope.isLoggedIn = function() {\n            return scope.auth_info.authorized;     // is looged in\n        };\n\n        /**\n          * Check if user logged in\n          *\n          * @return boolean \n          *---------------------------------------------------------------- */\n        \n        scope.isAdmin = function() {\n            return scope.isLoggedIn() && scope.auth_info.designation === 1;   //check if is admin\n        };\n\n        /**\n          * Get the logged in user full name\n          *\n          * @return string \n          *---------------------------------------------------------------- */\n        \n        scope.getUserFullName = function() {\n\n            if (scope.isLoggedIn()) {\n                return scope.auth_info.profile.first_name+' '+scope.auth_info.profile.last_name;\n            }\n\n        };\n\n\t\t$rootScope.$on('lw-open-login-dialog', function (event, response) {\n\n\t\t\tevent.preventDefault();\n\t\t\t\t\n            appServices.loginRequiredDialog('login-dialog', response.data, function(result, newData) {\n\n                __DataStore.reset();\n\t\t\t\t\n\t\t\t\tif (result) {\n\t\t\t\n\t\t\t\t\t// $state.reload();\n\t\t\t\t\t$rootScope.$broadcast('lw.login-success', true);\n\t\t\t\t}\n\n\t\t\t});\n\n        });\n         \n    };\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t ProductsController\n\t-------------------------------------------------------------------------- */\n\t\n\tangular\n        .module('PublicApp.display.products', [])\n        .controller('ProductsController', \t[\n            '$scope', \n            '__DataStore', \n            'appServices',\n            '__Utils',\n            '$state',\n            '$compile',\n            'appNotify',\n\t\t\t'$rootScope',\n\t\t\t'$q',\n            ProductsController \n\t \t]).controller('ProductsFilterController', \t[\n            '$scope', '$compile', '__Utils', '$rootScope',\n            ProductsFilterController\n\t \t]).controller('ProductCompareController',     [\n            '$scope', '$compile', '__Utils', '$rootScope', '__DataStore', 'appServices',\n            ProductCompareController\n\t \t]).controller('SidebarFilterController',     [\n            '$scope', '$compile', '__Utils', '$rootScope',\n            SidebarFilterController\n        ]);\n\n\t/**\n\t * ProductsController for show products\n\t * @inject $scope\n\t * @inject __DataStore\n\t * @inject appServices\n\t * @inject __Utils\n\t * @inject state\n\t * @inject $compile\n     * @inject appNotify\n\t * \n\t * @return void\n\t *-------------------------------------------------------- */\n\n\t function ProductsController($scope, __DataStore, appServices,\n\t  __Utils, $state, $compile, appNotify, $rootScope, $q) {\n\n\t \tvar scope = this,\n            requestURL;\n\n\t \tscope.pageData  \t= {};\n\t \tscope.pageStatus  \t= false;\n\t \tscope.products  \t= [];\n\t \tscope.catID \t\t= $state.params.categoryID;\n\n        scope.showPagination = false;\n\n        scope.paginationData = __globals.getAppJSItem('productPaginationData');\n        scope.remainingItems = scope.paginationData.remainingItems;\n        scope.formattedRemainingItem = scope.paginationData.formattedRemainingItem;\n        scope.hasMorePages   = scope.paginationData.hasMorePages; \n        scope.categoryData   = __globals.getAppJSItem('categoryData');\n        scope.sortOrderUrl   = __globals.getAppJSItem('sortOrderUrl');\n        scope.productPrices  = __globals.getAppJSItem('productPrices');\n        scope.filterPrices   = __globals.getAppJSItem('filterPrices');\n        scope.currentRoute   = __globals.getAppJSItem('currentRoute');\n        scope.searchTerm   \t = __globals.getAppJSItem('searchTerm');\n\t\tscope.categoryID   \t = __globals.getAppJSItem('categoryID');\n        scope.pageType   \t = __globals.getAppJSItem('pageType');\n        scope.selectedBrandID= __globals.getAppJSItem('brandID');\n        scope.currenCode \t = __globals.getAppJSItem('currenSymbol');\n        scope.filterUrl \t = __globals.getAppJSItem('filterUrl');\n        scope.itemLoadType\t = parseInt(__globals.getAppJSItem('itemLoadType'));\n       // scope.productExistOrNot = false;\n        var contentLoaded = false;\n\n        //add product compare function start\n        scope.addProductCompare = function(productId) {\n\n            __DataStore.post({\n                'apiURL' :'product.compare.add',\n                'productId' : productId\n            }, scope).success(function(responseData) {\n              \n                var requestData = responseData.data;\n                appServices.processResponse(responseData, null , function(reactionCode) {\n                    if (reactionCode == 1) {\n                        var countCompareProduct = requestData.countCompareProduct;\n                        $scope.$emit('lw.product.compare.count', true);\n                    }\n                   \n                });   \n\n            });\n        }\n        //add product compare function end\n\n        scope.isAddedInWishlist = false;\n        /**\n          * Add to Wish-list\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.addToWishlist = function(productId) {\n\n            if (!window.__appImmutables.auth_info.authorized) {\n                appServices.loginRequiredDialog('login-dialog', null, function(result) {\n                   });  \n            } else {\n                __DataStore.post({\n                    'apiURL'    : 'product.wishlist.add_process',\n                    'productId' : productId\n                }, scope).success(function(responseData) {\n                    var requestData = responseData.data;\n                    if (requestData.showLoggedInDialog) {\n                        appServices.loginRequiredDialog('login-dialog', null, function(result) {});  \n                    }\n                \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        if (reactionCode == 1) {\n                            $('.lw-remove-wishlist-'+productId).show();\n                            $('.lw-add-wishlist-'+productId).hide();\n\n                            scope.isAddedInWishlist = true;\n                        }                        \n                    });\n                });\n            }\n \n        };\n\n        /**\n          * Remove from Wish-list\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.removeFromWishlist = function(productId) {\n\n            __DataStore.post({\n                'apiURL'    : 'product.wishlist.remove_process',\n                'productId' : productId\n            }, scope).success(function(responseData) {\n                var requestData = responseData.data;\n                if (requestData.showLoggedInDialog) {\n                    appServices.loginRequiredDialog('login-dialog', null, function(result) {});\n                }\n                \n                appServices.processResponse(responseData, null, function(reactionCode) {\n\n                    if (reactionCode == 1) {\n                        $('.lw-add-wishlist-'+productId).show();\n                        $('.lw-remove-wishlist-'+productId).hide();\n                        \n                        scope.isAddedInWishlist = false;\n                    }                       \n                });\n            });\n        };\n\n        /**\n          * Hide Or Show Wish-list Icon\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.getProductWislistData = function(isAddedInWishlist, productId) {\n         \n            if (isAddedInWishlist) {\n             \n                $('.lw-add-wishlist-'+productId).hide();\n                $('.lw-remove-wishlist-'+productId).show();\n            } else if (!isAddedInWishlist) {\n                $('.lw-remove-wishlist-'+productId).hide();  \n                $('.lw-add-wishlist-'+productId).show(); \n            }\n           \n        }\n        scope.getProductWislistData();\n\n        /**\n\t\t * ProductsController for show products\n\t\t * @inject $scope\n\t\t * @inject __DataStore\n\t\t * @inject appServices\n\t\t * @inject __Utils\n\t\t * @inject state\n\t\t * @inject $stateParams\n\t\t * \n\t\t * @return void\n\t\t *-------------------------------------------------------- */\n        scope.showPagination = function(requestURL) {\n\n            scope.isRequestInProcessing = true;\n\n\t\t\t__DataStore.fetch(requestURL, {fresh : true})\n\t\t\t.success(function(responseData) {\n\n\t\t\t\tappServices.processResponse(responseData, null, function(reactionCode) {\n\t\t\t\t\t\n\t\t\t\t\tvar requestData = responseData.data;\n                    scope.isRequestInProcessing  = false;\n\t\t\t\t\tscope.productExistOrNot = requestData.productExistOrNot;\t\t\t\t\t\n                    scope.endOfList = requestData.paginationData.currentPage == requestData.paginationData.lastPage; \n\t\t\t\t\tscope.remainingItems = requestData.paginationData.remainingItems; \n                    scope.formattedRemainingItem = requestData.paginationData.formattedRemainingItem; \n\t\t\t\t\tscope.hasMorePages   = requestData.paginationData.hasMorePages; \n                    scope.paginationData = requestData.paginationData;\n\t\t\t\t\tscope.pageType = requestData.pageType;\n\n                    //show or hide wishlist icon\n                    _.defer(function() {\n                         _.forEach(requestData.products, function(value, key) {\n                           \n                            if (value.isAddedInWishlist) {  \n                                \n                                $('.lw-add-wishlist-'+value.id).hide();\n                                $('.lw-remove-wishlist-'+value.id).show();\n                            } else if (!value.isAddedInWishlist) {\n\n                                $('.lw-remove-wishlist-'+value.id).hide();  \n                                $('.lw-add-wishlist-'+value.id).show(); \n                            }\n                        });\n                    });\n                   \n\n                    if (scope.itemLoadType === 3) { // pagination\n\n                        $masonryInstance.masonry( 'remove', $('.lw-product-box') ).masonry('layout'); \n                        $(window).scrollTop(0);\n\n                        if (requestData.paginationData.currentPage > 1) {\n                            $('.lw-nondescript-content').remove();\n                        }\n                    }\n\n           \n\t\t\t\t\tif (!_.isEmpty(requestData.products)) {\n\t\t\t\t\t\n\t\t\t\t\t\t_.forEach(requestData.products, function(product, key) {\n\n                        \tvar $items = $compile(__Utils.template('#productListItemTemplate', product))($scope);\n\t\t\t\t\t\t\t\n                         \t// append items to grid                          \n                            $masonryInstance.append( $items );\n\n                            // add and lay out newly appended items\n                            $masonryInstance.masonry( 'appended', $items );\n\t\t\t\t\t\t});\n\n                        $('.lw-product-list-popover').popover({\n                            html: true, \n                            content: function() {\n                                return __globals.getJSString('addon_option_affect_string')\n                            }\n                        });\n\n                        $('.product-item-thumb-image').Lazy({\n                            afterLoad: function(element) {\n                                // called after an element was successfully handled\n                                    $masonryInstance.masonry('layout');\n                                     $('.lw-ribbon-wrapper-green').removeClass('lw-zero-opacity');\n                                },\n                            onFinishedAll: function() {\n                                // called once all elements was handled\n                                scope.isRequestInProcessing = false; \n                            }\n                        });\n                        // create pagination links\n\t\t\t\t\t\tif (scope.itemLoadType === 3) {\n\n\t\t\t\t\t\t\tvar $paginationLinksElement = $(\".lw-pagination-container > ul\");\n\n\t\t\t\t\t\t\tif ($paginationLinksElement) { \n\t\t\t\t\t\t\t\t$paginationLinksElement.html(requestData.paginationData.paginationLinks);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tcontentLoaded = true;\n\t\t};\n\n\n\t\t/**\n          * scroll pagination\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.isRequestInProcessing = false;\n\n        scope.scrollPagination = function() {\n\n        \t$(window).scroll(function() { \n                if ((scope.paginationData.currentPage < scope.paginationData.lastPage) \n                    && ($(window).scrollTop() + $(window).height()) > ($(document).height() - 750) \n                    && scope.isRequestInProcessing == false) {\n\t\t\t\t\tscope.paginationData.currentPage = scope.paginationData.currentPage + 1;\n\t\t\t\t\tscope.productExistOrNot = true;\n\n\t\t\t\t\tvar requestURL = scope.sortOrderUrl+'page='+scope.paginationData.currentPage;\n\n\t\t\t\t\tscope.showPagination(requestURL);\n\t\t\t\t\tscope.isRequestInProcessing = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t};\n\t\t\n\t\tscope.loadProductsOnBtnClick = function() {\n\n\t\t\tif (scope.paginationData.currentPage < scope.paginationData.lastPage) {\n\n\t\t\t\tscope.paginationData.currentPage = scope.paginationData.currentPage + 1;\n\t\t\t\t\n\t\t\t\tvar requestURL = scope.sortOrderUrl+'page='+scope.paginationData.currentPage;\n\t\t\t\t\n\t\t\t\tscope.showPagination(requestURL);\n\t\t\t}\n\n\t\t};\n\n\t\tif (scope.itemLoadType === 1) { // scroll\n\n\t\t\tscope.scrollPagination();\n\n\t\t} else if(scope.itemLoadType === 3) {  // pagination\n\t\t\t\n\t\t\t// scope.loadProductsOnBtnClick();\n\t\t\t\n\t\t\tif (contentLoaded == false) {\n\n\t\t\t\tvar $initPaginationLinksElement = $(\".lw-pagination-container\");\n\n\t\t\t\tif ($initPaginationLinksElement) { \n\t\t\t\t\t$initPaginationLinksElement.html(scope.paginationData.paginationLinks);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$(\".lw-pagination-container\").on('click', 'a', function(event) {\n\n                event.preventDefault();\n\n                var $this = $(this),\n                    url   = $this.attr('href');\n\t\t\t\t\tvar requestURL = scope.sortOrderUrl+'page='+url.split('page=')[1];\n\t\t\t\t\tscope.showPagination(requestURL);\n\t\t\t\t\n\t\t\t});\n\t\t}\n\t\n\t\t\n        /**\n          * Show details dialog\n          *\n          * @param object eventObj\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.dialogStatus = false;\n        scope.showDetailsDialog   = function(eventObj, pID, pageType) {\n        \t\n            appServices.showDialog({\n            \t\tcategoryID \t: scope.categoryID,\n            \t\tproductID \t: pID,\n            \t\tpageType \t: pageType,\n            \t\tdialogStatus: scope.dialogStatus\n            \t},\n                {\n                    templateUrl : __globals.getTemplateURL(\n                            'product.details-dialog'\n                        ),\n\t\t\t\t\tcontroller:\"ProductDetailsDialogController as productDetailsDialogCtrl\",\n\t\t\t\t\tresolve : {\n\n\t\t\t\t\t\tGetProductDetails : function() {\n\n\t\t\t\t\t\t\t//create a differed object          \n\t\t\t\t            var defferedObject = $q.defer();   \n\n\t\t\t\t            __DataStore.fetch({\n\t\t\t\t\t\t\t\t\t'apiURL'      : 'product.quick.view.details.support_data',\n\t\t\t\t\t\t\t\t\t'productID'   : pID,\n\t\t\t\t\t\t\t\t\t'categoryID?' : scope.categoryID\n\t\t\t\t                }, {'fresh':true}).success(function(responseData) {\n\t\t\t\t                                \n\t\t\t\t                appServices.processResponse(responseData, null, function(reactionCode) {\n\n\t\t\t\t                    //this method calls when the require        \n\t\t\t\t                    //work has completed successfully        \n\t\t\t\t                    //and results are returned to client        \n\t\t\t\t                    defferedObject.resolve(responseData);  \n\n\t\t\t\t                }); \n\n\t\t\t\t            });       \n\n\t\t\t\t           \t//return promise to caller          \n\t\t\t\t           \treturn defferedObject.promise;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n                },\n            function(promiseObj) {\n\n            });\n\n\n        };\n\n         /**\n          * filter dialog product\n          *\n          * @param brandID\n          * @param resultedProudctIds\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\t\tscope.filterDailogProduct = function(filterUrl) {\n\t\t\t\n\t\t\tscope.brandPageType = false;\n\n\t\t\t__DataStore.fetch(filterUrl, {fresh:true})\n\t\t\t\t\t   .success(function(responseData) {\n\t\t\t\t\n\t\t\t\tscope.brandsData  = responseData.data.productRelatedBrand;\n\t\t\t\tscope.selectedIDs = scope.brandsData;\t\n\n\t\t\t\tappServices.showDialog(scope,\n                {\n                    templateUrl : __globals.getTemplateURL(\n                            'product.filter-dialog'\n                        )\n                },\n\t\t        function(promiseObj) {\n\n\t\t        });\n\n\t\t\t});\n        };\n\n\t\t/**\n        * display all active products list\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n         \t\n        scope.getProductDetails  =  function() {\n\n\t        // send http request to server\n         \t__DataStore.fetch({\n\t                'apiURL'      : 'product.quick.view.details.support_data',\n\t                'productID'   : scope.productID,\n\t                'categoryID?' : scope.categoryID\n\t            }).success(function(responseData) {\n            \t  \n            \tappServices.processResponse(responseData, null, function(reactionCode) {\n            \t\t\t\n\t\t\t\t\tvar requestData   = responseData.data.details;\n\n\t\t\t\t\tscope.productDetails = requestData;\n\n\t\t\t\t\tscope.productData = {\n\t\t\t\t\t\t'name'       : scope.productDetails.name, \n\t\t\t\t\t\t'quantity'   : 1, \n\t\t\t\t\t\t'isCartExist': false\n\t\t\t\t\t};\n\n\t\t\t\t\tscope = __Form.updateModel(scope, scope.productData);\n\n\t\t          \tscope.productDetails.basePriceWithAddonPrice = requestData.newTotalPrice;\n\n\t\t\t\t\tscope.newTotalPriceCount = requestData.newTotalPriceCount;\n\n\t\t\t\t\tscope.productDetails.selectedOptions = requestData.getSelectedOptions;\n\n\t\t\t\t\tif (scope.productDetails) {\n\t\t\t        \tscope.productData.name = requestData.name;\n\t\t\t        }\n\t\t\t\t\t\n\t\t\t\t\tif(!_.isEmpty(scope.productDetails.getSelectedOptions)) {\n\t\t\t\t\t\tscope.optionLength = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.productDetails.priceDetails = {\n            \t\t\t'option' \t : requestData.getSelectedOptions,\n            \t\t\t'total' \t : requestData.getPrice.total,\n            \t\t\t'base_price' : requestData.getPrice.base_price\n                \t};\n\n                \t// product quantity\n\t\t\t\t\tif (requestData.qtyCart > 0) {\n\n\t\t\t\t\t\tscope.productData.quantity = requestData.qtyCart;\n\t\t\t\t\t\tscope.checkNumber          = true;\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscope.productData.quantity = 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.btnQuantity = requestData.qtyCart;\n\t\t\t\t\tscope.productData.isCartExist = requestData.isCartExist;\n\n\t\t\t\t\tscope.pageStatus = true;\n\t\t\t\t\t\n\t\t        });\n     \t\t});\n        };\n       // scope.getProductDetails();\n\n\t\t/**\n\t\t* Add to cart with options\n\t\t*\n\t\t* @return void\n\t\t*---------------------------------------------------------------- */\n\t\tscope.addToCartWithOptions  =  function(event, productID) {\n\t\t\n\t\t\t$(event.currentTarget).popover({\n\t\t\t\thtml:false,\n\t\t\t\tplacement:'auto',\n\t\t\t\tanimation:'fadeIn',\n\t\t\t\tcontent: function() {\n          \t\t\treturn $compile(__Utils.template('#lwProductOptionsTemplate', 'item'))($scope);\n        \t\t}\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t  * Add product as a cart item\n\t\t  *\n\t\t  * @return void\n\t\t  *---------------------------------------------------------------- */\n\t\tscope.addToCart  =  function(event, productID, productName) { \n\n\t\t\tevent.preventDefault();\n\n\t\t\tvar currentElement = $(event.currentTarget);\n\t\t\t\n\t\t\tscope.productCartData = {\n\t\t\t\t'name'       : decodeURIComponent(productName).split('+').join(' '), \n\t\t\t\t'quantity'   : _.add(currentElement.data('quantity'), 1), \n\t\t\t\t'isCartExist': false\n\t\t\t};\n\n\t\t    __DataStore.post({\n\t\t        apiURL      : 'cart.add.item',\n\t\t        productID   : productID\n\t\t    }, scope.productCartData).success(function(responseData) {\n\t\t    \t\n\t\t    \tscope.cartAction = true;\n\n\t\t    \tvar requestData = responseData.data;\n\n\t\t        appServices.processResponse(\n\t\t            responseData,\n\t\t            null, \n\t\t            function() {\n\t\t            \t\n\t\t            \tscope.data = {\n\t\t                  \t'cart_string': responseData.data.cartItems,\n\t\t                  \t'status'     : true,\n\t\t\t\t\t\t\t'showNotification' : true\n\t\t                };\n\n\t\t\t\t\t\tcurrentElement.data('quantity', responseData.data.qtyCart);\n\n\t\t                // scope.updateCartRow(productID, true);\n\n\t\t                $scope.$emit('lw.update.cart.string', scope.data);\n\t\t            }\n\t\t        );\n\n\t\t    });\n\t\t};\n\n\t    // when the cart item remove from to cart\n\t    $rootScope.$on('lw.cart_update',function(events, updatedData) {\n\t\t\t\t\n\t\t\tif (updatedData.action == 1 || updatedData.action == 2) {\n\t\t\t\n\t\t\t\tvar $lwElement = $('.lw-product-'+updatedData.pid),\n\t\t\t\t\t$lwProduct = $($lwElement[0]);\n\t\t\t\t\n\t\t\t\tif ($lwProduct) {\n\t\t\t\t\t$lwProduct.data('quantity', updatedData.qty);\n\t\t\t\t}\n\n\t\t\t} else if(updatedData.action == 3) {\n\n\t\t\t\tvar $allProducts = $('.lw-products-container');\n\n\t\t\t\t$allProducts.each(function( index ) {\n\n\t\t\t\t  \t$('.lw-quick-cart-btn').each(function(i) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar $everyItem = $(this),\n\t\t\t\t\t\t\titemPid   = $everyItem.data('pid');\t\n\t\t\t\t\t\t\t$everyItem.data('quantity', 0);\n\t\t\t\t\t});\n\n\t\t\t\t});\n\t\t\t}\n\n\t    });\n\n\t   scope.unescapeProductName = function(productName, from) {\n            if (from == 1) {\n                return decodeURIComponent(productName).split('+').join(' ');\n            } else if(from == 2) {\n                return _.unescape(productName);\n            }\n       };\n\n    };\n\n    /**\n     * ProductCompareController for show products\n     *\n     * @inject $scope\n     * @inject $compile\n     * @inject __Utils\n     * @inject $rootScope\n     * \n     * @return void\n     *-------------------------------------------------------- */\n\n    function ProductCompareController($scope, $compile, __Utils, $rootScope, __DataStore, appServices) {\n        var scope                 = this;\n  \n        scope.getProductCompareData = function() {\n            __DataStore.fetch('product.compare.read.data', {fresh : true})\n                .success(function(responseData) {\n                   \n                    var requestData = responseData.data;\n                    appServices.processResponse(responseData, null, function(reactionCode) {\n                       scope.productCompareData = requestData.productCompareData;\n                       scope.specificationCollection = requestData.specificationCollection;\n                    \n                    });\n              });\n        }\n        scope.getProductCompareData();\n\n        //check compare data are blank or not.\n        scope.getPaire = function(specData, specId) { \n            return _.filter(specData, function(value, key) {\n                if (value.specifications__id === specId) {\n                   return value.value;\n                }\n            });\n        };\n        \n        //remove product compare function start\n        scope.removeProduct = function(productId) {\n           \n            __DataStore.post({\n                'apiURL' :'product.compare.remove',\n                'productId' : productId\n            }, scope).success(function(responseData) {\n                \n                appServices.processResponse(responseData, null , function() {\n                   \n                    if (responseData.reaction == 1) {\n                        scope.getProductCompareData();\n\n                        $scope.$emit('lw.product.compare.count', true);\n                    }\n                    \n                });   \n\n            });\n           \n        };\n        //remove product compare function end\n    };\n\n    /**\n\t * ProductsFilterController for show products\n\t *\n\t * @inject $scope\n\t * @inject $compile\n\t * @inject __Utils\n\t * @inject $rootScope\n\t * \n\t * @return void\n\t *-------------------------------------------------------- */\n\n\t function ProductsFilterController($scope, $compile, __Utils, $rootScope) {\n\n\t \tvar scope \t\t\t\t= this;\n\n\t \tscope.dialogData \t\t= $scope.ngDialogData;\n\t \tscope.brandsData \t\t= scope.dialogData.brandsData;\n\t \tscope.pageType \t\t\t= $scope.ngDialogData.pageType;\n\t \tscope.currentUrl \t\t= scope.dialogData.currentRoute;\n\t \tscope.productPrices \t= scope.dialogData.productPrices;\n\t \tscope.filterPrices \t\t= scope.dialogData.filterPrices;\n\t \tscope.selectedBrandID \t= scope.dialogData.selectedBrandID\n\t \tscope.searchTerm     \t= scope.dialogData.searchTerm;\n\t \tscope.brandPageType     = scope.dialogData.brandPageType;\n\t \tscope.selectedIDs       = scope.dialogData.selectedIDs;\n\t \tscope.currenCode        = scope.dialogData.currenCode;\n\n\t \tscope.brandExistStatus = false;\n\t \tif (!_.isEmpty(scope.brandsData)) {\n\t \t\tscope.brandExistStatus = true;\n\t \t};\n\n        scope.selectedRows         = [];\n        scope.noSelectedItems      = false;\n        scope.allSelectedItems     = false;\n\t \tscope.priceStatus\t\t   = false;\n\n\t \t// select brand\n\t \tangular.forEach(scope.selectedBrandID, function(value, index) {\n\t \t\t\n\t \t\tif (!_.isEmpty(scope.selectedIDs)) {\n\n\t\t\t\tangular.forEach(scope.selectedIDs, function(brand, bIndex) {\n\n\t\t\t\t\tif (scope.selectedIDs[bIndex]['brandID'] == value) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tscope.selectedIDs[bIndex]['isSelected'] = true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t});\n\n\t \t\t}\n\n        \t\n        });\n        \n\t \t$scope.$on('ngDialog.opened', function (e, $dialog) {\n\n\t \t\tscope.priceStatus =\tfalse;\n\t \t\t// check product price\n\t \t\tif (scope.productPrices.min_price != scope.productPrices.max_price) {\n\n                if (scope.pageType == 'brand') {\n                    $('#manageFilterTabs a').trigger('click');\n                }\n\n\t\t \t\tscope.priceStatus =\ttrue;\n \n                scope.sliderBar = {\n                    minValue: scope.filterPrices.min_price,\n                    maxValue: scope.filterPrices.max_price,\n\t\t\t\t\tminLimit: 0,\n                    options: {\n\t\t\t\t\t\tminRange: 1,\n\t\t\t\t\t\tmaxRange: scope.filterPrices.max_price,\n\t\t\t\t\t\tpushRange: true,\n                        floor: Math.floor(scope.productPrices.min_price),\n                        ceil: Math.floor(scope.productPrices.max_price),\n                        onChange: function(id, newValue, highValue, pointerType) {\n                            var minValue = newValue;\n          \n                            var maxValue = highValue;\n                              \n                            $('.lw-min-price').prop('value', minValue).prop('name', 'min_price');\n                            $('.lw-max-price').prop('value', maxValue).prop('name', 'max_price');\n                         \n                        },\n                        translate: function(value, sliderId, label) {\n                            switch (label) {\n\t                            case 'model':\n\t                            return '<b>Min price:</b>' + scope.currenCode + value;\n\t                            case 'high':\n\t                            return '<b>Max price:</b>' + scope.currenCode + Math.floor(value);\n\t                            default:\n\t                            return scope.currenCode + value\n                        \t}\n                    \t}\n                \t}\n                };\n\n                scope.changeFilterPrice = function(minValue, maxValue) {\n                    $('.lw-min-price').prop('value', minValue).prop('name', 'min_price');\n                    $('.lw-max-price').prop('value', maxValue).prop('name', 'max_price');\n                };\n\t\t\t}\n\t\t});\n\n        scope.showPriceFilter = false;\n        \n        //sidebar range filter\n        scope.loadView = function(){ \n           \n            setTimeout(function() { \n                \n                $scope.$broadcast('rzSliderForceRender'); \n                scope.showPriceFilter = true;\n            },1500); \n        }\n        scope.loadView();\n\n        /**\n         * Close dialog\n         *\n         * @return void\n         *---------------------------------------------------------------- */\n        scope.close = function() {\n            $scope.closeThisDialog();\n        }\n\n        /**\n\t  \t  * Clear Filter\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n        scope.clearFilter = function() {\n\n        \t$scope.closeThisDialog({close : true});\n        \t\n        }\n\n    };\n\n    /**\n     * Side bar filter controller\n     *\n     * @inject $scope\n     * @inject $compile\n     * @inject __Utils\n     * @inject $rootScope\n     * \n     * @return void\n     *-------------------------------------------------------- */\n\n    function SidebarFilterController($scope, $compile, __Utils, $rootScope) {\n\n        var scope = this;\n        scope.currentFilterUrl = '';\n        scope.showClearButton = false;\n\n        /**\n         * Initialize Filter Data\n         ***********************************************/\n        scope.filterInitData = function(filterMinPrice, filterMaxPrice, productMinPrice, productMaxPrice, currenSymbol, currentFilterUrl) {\n            scope.currentFilterUrl = decodeURIComponent(currentFilterUrl).split('+').join(' ');\n            scope.sliderBar = {\n                minValue: filterMinPrice,\n                maxValue: filterMaxPrice,\n                    options: {\n                        floor: Math.floor(productMinPrice),\n                        ceil: Math.floor(productMaxPrice),\n                        onChange: function(id, newValue, highValue, pointerType) {\n                            scope.sliderBar.min_price = newValue;\n                            scope.sliderBar.max_price = highValue;                         \n                        },\n                        translate: function(value, sliderId, label) {\n                            switch (label) {\n                            case 'model':\n                            return currenSymbol + value;\n                            case 'high':\n                            return currenSymbol + Math.floor(value);\n                            default:\n                            return currenSymbol + value\n                        }\n                    },\n                    onEnd: function(sliderId, minValue, maxValue, pointerType) {\n                        scope.filterByPrice(scope.currentFilterUrl, minValue, maxValue);\n                    }\n                }\n            };\n            \n            var currentPageUrl = window.location.href;\n            if (currentPageUrl.indexOf('?') > -1) {\n                scope.showClearButton = true;\n            }\n\n            //sidebar range filter\n            $( window ).resize(function() {\n                setTimeout(function(){\n                    $scope.$broadcast('reCalcViewDimensions');\n                }, 200);\n            });\n        }\n        \n        // Change filter price\n        scope.changeFilterPrice = function (minPrice, maxPrice, currentFilterUrl) {\n            scope.sliderBar.minValue = minPrice;\n            scope.sliderBar.maxValue = maxPrice;\n            scope.filterByPrice(decodeURIComponent(currentFilterUrl).split('+').join(' '), minPrice, maxPrice);\n        }\n\n        // Filter url by price\n        scope.filterByPrice = function(currentUrl, minPrice, maxPrice) {\n            var urlParams = new URLSearchParams(currentUrl),\n                minPriceString = urlParams.get('min_price'),\n                maxPriceString = urlParams.get('max_price');\n\n            currentUrl = currentUrl.replace('&min_price='+minPriceString, '&min_price='+minPrice);\n            currentUrl = currentUrl.replace('&max_price='+maxPriceString, '&max_price='+maxPrice);\n            __globals.redirectBrowser(currentUrl);\n        }\n\n        // Clear Price Filter\n        scope.clearPriceFilter = function(currentUrl, minPrice, maxPrice) {\n            currentUrl = decodeURIComponent(currentUrl).split('+').join(' ');\n            var priceFilterUrl = currentUrl.replace('&min_price='+minPrice+'&max_price='+maxPrice, '');\n            __globals.redirectBrowser(priceFilterUrl);\n        }\n\n        // Prepare Current Url\n        scope.prepareCurrentUrl = function(currentUrl, brandId, specificationId, ratingId, status, catId) {\n            currentUrl = decodeURIComponent(currentUrl).split('+').join(' ');\n            var urlParams = new URLSearchParams(currentUrl),\n                brandsIdString = urlParams.get('brandsIds'),\n                specsIdString = urlParams.get('specsIds'),\n                ratingIdString = urlParams.get('rating'),\n                availabilityIdString = urlParams.get('availability'),\n                categoryIdString = urlParams.get('categories'),\n                specsIds = [],\n                brandsIds = [],\n                catsIds = [];\n            \n            if (!_.isEmpty(brandsIdString)) {\n                brandsIds = brandsIdString.split('|');\n            } \n            if (!_.isEmpty(specsIdString)) {\n                specsIds = specsIdString.split('|');\n            }\n            if (!_.isEmpty(categoryIdString)) {\n                catsIds = categoryIdString.split('|');\n            } \n            \n            if (!_.isEmpty(brandId)) {\n\n                if (_.includes(brandsIds, brandId)) {\n                    _.remove(brandsIds, function(item) {\n                        return brandId == item;\n                    });\n                } else {\n                    brandsIds.push(brandId);\n                }\n                \n                brandsIds = brandsIds.join(\"|\");\n                currentUrl = currentUrl.replace('brandsIds='+brandsIdString, 'brandsIds='+brandsIds);\n            }\n\n            if (!_.isEmpty(specificationId)) {\n\n                if (_.includes(specsIds, specificationId)) {\n                    _.remove(specsIds, function(item) {\n                        return specificationId == item;\n                    });\n                } else {\n                    specsIds.push(specificationId);\n                }               \n                \n                specsIds = specsIds.join(\"|\");\n                currentUrl = currentUrl.replace('specsIds='+specsIdString, 'specsIds='+specsIds);\n            }\n\n            if (!_.isEmpty(catId)) {\n\n                if (_.includes(catsIds, catId)) {\n                    _.remove(catsIds, function(item) {\n                        return catId == item;\n                    });\n                } else {\n                    catsIds.push(catId);\n                }               \n                \n                catsIds = catsIds.join(\"|\");\n                currentUrl = currentUrl.replace('categories='+categoryIdString, 'categories='+catsIds);\n            }\n\n            if (!_.isEmpty(ratingId)) {\n                if (ratingId == 'clear') {\n                    currentUrl = currentUrl.replace('rating='+ratingIdString, 'rating=');\n                } else {\n                    currentUrl = currentUrl.replace('rating='+ratingIdString, 'rating='+ratingId);\n                }                \n            }\n\n            if (!_.isEmpty(status)) {\n                if (status == 'clear') {\n                    currentUrl = currentUrl.replace('availability='+availabilityIdString, 'availability=');\n                } else {\n                    currentUrl = currentUrl.replace('availability='+availabilityIdString, 'availability='+status);\n                }                \n            }\n            \n            __globals.redirectBrowser(currentUrl);\n        }\n    }\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t DisplayFeaturedProductsController\n\t-------------------------------------------------------------------------- */\n\t\n\tangular\n        .module('PublicApp.display.featured.products', [])\n        .controller('DisplayFeaturedProductsController', \t[\n            '$scope', \n            '__DataStore', \n            'appServices',\n            '__Utils',\n            DisplayFeaturedProductsController \n\t \t]);\n\n\t/**\n\t * DisplayFeaturedProductsController for displau products application\n\t *\n\t * @inject $scope\n\t * @inject __DataStore\n\t * @inject appServices\n\t * @inject __Utils\n\t * \n\t * @return void\n\t *-------------------------------------------------------- */\n\n\t function DisplayFeaturedProductsController($scope, __DataStore, appServices, __Utils) {\n\n\t \tvar scope \t\t\t= this;\n\t \tscope.pageData  \t= {};\n\t \tscope.pageStatus  \t= false;\n\t \tscope.products  \t= [];\n\n\t \t// inject breadcrumb service\n\t \tappServices.updateBreadcrumbs([ \n\t\t\t{   items     : '',\n\t\t\t\tlast_item : __globals.getJSString('featured_products') \n\t\t\t}\n \t\t], $scope);\n\n        /**\n        * display all active featured products list\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n\n        scope.getFeaturedProducts  =  function(url) \n        {   \n        \t var requestURL = url ? url : 'display.featured.products.list';\n\n         \t// send http request to server\n         \t__DataStore.fetch(requestURL)\n            \t   .success(function(responseData) {\n\n            \tappServices.processResponse(\n            \t\tresponseData,\n            \t\tnull, \n            \t\tfunction(reactionCode) {\n\n\t               \tvar requestData = responseData.data;\n\n            \t\t_.forEach(requestData.data, function(product, key){\n\n                        scope.products.push(product);\n\n                    });\n            \t\t\n            \t\tscope.pageData  = {\n            \t\t\t\"total\"         : requestData.total,\n\t\t\t            \"per_page\"      : requestData.per_page,\n\t\t\t            \"current_page\"  : requestData.current_page,\n\t\t\t            \"last_page\"     : requestData.last_page,\n\t\t\t            \"next_page_url\" : requestData.next_page_url,\n\t\t\t            \"prev_page_url\" : requestData.prev_page_url,\n\t\t\t            \"from\"          : requestData.from,\n\t\t\t            \"to\"            : requestData.to\n            \t\t};\n\n            \t\tscope.pageStatus  \t\t= true;\n            \t\tscope.mediaURL    \t\t= requestData.product_assets;\n            \t\tscope.totalProductCount = requestData.count;\n\n\t            });\n     \t\t});\n        };\n        scope.getFeaturedProducts();\n\n\t    $(window).scroll( getFeaturedNewProducts );\n\n\t    /**\n\t    * get on scroll products list\n\t    *\n\t    * @return void\n\t    *---------------------------------------------------------------- */\n\t    \n        function getFeaturedNewProducts() {\n\n        \tif (scope.pageData.current_page < scope.pageData.last_page \n            && scope.pageStatus \n            && $(window).scrollTop() +1 >= $(document).height() - $(window).height()) {\n\n                scope.pageData.current_page += 1;\n\n                var url = __Utils.apiURL('display.featured.products.list')+'?page='\n                            +scope.pageData.current_page;\n\n                scope.getFeaturedProducts(url);\n        \t}\n        \n        };\n\n    };\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t ProductDetailsController\n\t-------------------------------------------------------------------------- */\n\t\n\tangular\n        .module('PublicApp.productDetails', [])\n        .controller('ProductDetailsController', \t[\n            '$scope', \n            '__DataStore', \n            'appServices',\n            '$stateParams',\n            '__Form',\n            '$rootScope',\n            '$state',\n            '__Utils',\n\t\t\t'$q',\n            '$compile',\n            '__Auth',\n            'appNotify',\n            ProductDetailsController \n\t \t])\n\t\t/**\n         * AddReviewDialogController\n         *\n         * @inject $scope\n         * @inject __DataStore\n         * @inject appServices\n         *\n         * @return void\n         *-------------------------------------------------------- */\n        .controller('AddReviewDialogController', [\n            '$scope',\n            'appServices',\n            '__Form',\n\t\t\t'GetReviewData',\n            function AddReviewDialogController($scope, appServices, __Form, GetReviewData) {\n \t\t\t\n                var scope = this;\n                scope.pageStatus = false;\n                scope.ngDialogData = $scope.ngDialogData;\n                \n                scope = __Form.setup(scope, 'item_review_add_form', 'reviewData');\n\n\t\t\t\tvar reviewData = GetReviewData.reviewData;\n\n                scope = __Form.updateModel(scope, {\n                    'review' : (_.isEmpty(reviewData)) ? '' : reviewData\n                });\n\n                scope.pageStatus = true;\n\n                /**\n                  * add review on item\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.submitReview = function() {\n           \n                    __Form.process({\n                            'apiURL' : 'product.process.add.review',\n                            'productId' :  scope.ngDialogData.productId\n                        }, scope)\n                        .success( function( responseData ) {\n\n                        appServices.processResponse(responseData, null, function() {\n                            $scope.closeThisDialog();\n                        });\n\n                    });\n\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n\n\t\t/**\n          * Item Details Dialog Controller \n          *\n          * @inject object $scope\n          * @inject object appServices\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        .controller('ItemRatingAndReviewDialogController', [\n            '$scope',\n            'appServices',\n\t\t\t'GetRatingAndReviewData',\n            function ($scope, appServices, GetRatingAndReviewData) {\n\n                var scope    = this,\n                ngDialogData     = $scope.ngDialogData;\n                scope.itemTitle  = ngDialogData.itemTitle;\n                scope.pageStatus = false;\n\n                scope.itemRatingAndReview = GetRatingAndReviewData.data.itemRatingAndReview;\n\n                if (ngDialogData) {\n                    scope.pageStatus = true;\n                }\n\n             /**\n                * Close this dialog\n                *\n                * @return void\n                *-----------------------------------------------------------------------*/\n                scope.closeDialog = function() {\n                   $scope.closeThisDialog();\n                };\n            }\n        ])\n\n        /**\n          * Item Details Dialog Controller \n          *\n          * @inject object $scope\n          * @inject object appServices\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        .controller('ProductFaqsDialogController', [\n            '$scope',\n            'appServices',\n            '__Form',\n            function ($scope, appServices, __Form) {\n\n                var scope    = this,\n                ngDialogData     = $scope.ngDialogData;\n                scope.productTitle  = ngDialogData.itemTitle;\n                scope.productID  = __globals.getAppJSItem('productID');\n\n                scope = __Form.setup(scope, 'faq_add_form', 'addFaqData');\n\n                /**\n                  * add review on item\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.submitFaq = function() {\n              \n                    __Form.process({\n                            'apiURL' : 'product.process.add.faqs',\n                            'productId' :  scope.productID,\n                            'type'      : 2\n                        }, scope)\n                        .success( function( responseData ) {\n\n                        appServices.processResponse(responseData, null, function() {\n                            $scope.closeThisDialog();\n                        });\n\n                    });\n\n                };\n\n             /**\n                * Close this dialog\n                *\n                * @return void\n                *-----------------------------------------------------------------------*/\n                scope.closeDialog = function() {\n                   $scope.closeThisDialog();\n                };\n            }\n        ])\n\n\t\t/**\n\t\t * ProductDetailsController for product details application\n\t\t * \n\t\t * @inject __DataStore\n\t\t * @inject appServices\n\t\t * @inject $scope\n\t\t * @inject $stateParams\n\t\t * @inject __Form\n\t\t * @inject $state\n\t\t * @inject $rootScope\n\t\t * \n\t\t * @return void\n\t\t *-------------------------------------------------------- */\n\n\t\tfunction ProductDetailsController($scope, __DataStore, appServices,\n\t\t$stateParams, __Form, $rootScope, $state, __Utils, $q, $compile, __Auth, appNotify) {\n\n\t\t\tvar scope = this;\n                scope.isLoggedIn = __Auth.isLoggedIn();\n\t\t\t\tscope.productID  = __globals.getAppJSItem('productID');\n\t\t\t\tscope.categoryID = __globals.getAppJSItem('categoryID');\n\t            scope.currencySymbol   = __globals.getAppJSItem('currencySymbol');\n                scope.productStatus   = __globals.getAppJSItem('productStatus');\n\t            scope.currencyValue    = __globals.getAppJSItem('currencyValue');\n                scope.launchingDate    = __globals.getAppJSItem('launchingDate');\n                scope.isAddedInWishlist = __globals.getAppJSItem('isAddedInWishlist');\n                scope.images        = __globals.getAppJSItem('images');\n                scope.defaultImages = __globals.getAppJSItem('defaultImages');\n                scope.isActiveCategory = __globals.getAppJSItem('isActiveCategory');\n\n\t\t\t\tvar ratingsData        = __globals.getAppJSItem('productRatings');\n\t\t\t\t\n\t\t\t\tscope.itemRating \t = ratingsData.itemRating;\n                scope.itemRatingOrReview = ratingsData.itemRating.itemRatingOrReview;\n\t\t\t\tscope.enableRating  = ratingsData.enableRating;\n\t\t\t\tscope.enableRatingReview = ratingsData.enableRatingReview;\n\t\t\t\tscope.restrictAddRating = ratingsData.restrictAddRating;\n\t\t\t\tscope.enableRatingModification = ratingsData.enableRatingModification;\n\t\t\t\tscope.isPurchsedProduct  = ratingsData.isPurchsedProduct;\n               \n\t\t\t\tscope = __Form.setup(scope, 'add_product_in_cart_form', 'productData', {\n\t\t            modelUpdateWatcher:false\n\t\t        });\n\t\t        \n\t\t\t\tscope.pageStatus \t= false;\n\t\t \t\tscope.optionLength \t= false;\n                scope.inActiveCategory = false;\n\n                //check if category & product is inactive\n                if (_.isEmpty(scope.isActiveCategory) || scope.productStatus != 1) {\n                    scope.inActiveCategory = true;\n                    //product share button add disabled class\n                    $('.lw-product-share-btn').addClass('disabled');\n                } else {\n                    //product share button remove disabled class\n                    $('.lw-product-share-btn').removeClass('disabled');\n                }\n\n\t\t\tscope.isEnableReating = function() { \n\n\t            scope.isEnableRatingModification = true;\n\t            \n\t            // this condition check used for enable rating modification\n\t            if (_.isEmpty(scope.itemRating.selfRating)\n\t                && scope.enableRatingModification == false) {\n\t            \n\t                scope.isEnableRatingModification = false;\n\n\t            } else if (!_.isEmpty(scope.itemRating.selfRating)\n\t                        && scope.enableRatingModification == true) {\n\t            \n\t                scope.isEnableRatingModification = false;\n\n\t            } else if (_.isEmpty(scope.itemRating.selfRating)\n\t                        && scope.enableRatingModification == true) {\n\t            \n\t                scope.isEnableRatingModification = false;\n                    \n\t            } else if (scope.restrictAddRating == true\n                            && scope.enableRatingModification == true) {\n                \n                    scope.isEnableRatingModification = true;\n                }\n\t            \n\t            if (scope.restrictAddRating == true \n\t                && scope.isPurchsedProduct == false) {\n\t            \n\t                 scope.isEnableRatingModification = true;\n\t            }\n\t            \n\t        };\n\t\t\tscope.isEnableReating();\n\n            if (scope.enableRatingModification == true && scope.productStatus != 1) {\n                scope.isEnableRatingModification = true;\n            } else if (_.isEmpty(scope.isActiveCategory)) {\n                scope.isEnableRatingModification = true;\n            }\n\n            //product rating bar start\n            // $('#lw-bar-rating').data('current-rating')\n            $(function() {\n                $('#lw-bar-rating').barrating('show', {\n                    theme: 'fontawesome-stars-o',\n                    showValues: false,\n                    allowEmpty: false,\n                    readonly: scope.isEnableRatingModification,\n                    initialRating: scope.itemRating.selfRating,\n                    onSelect: function(value, text, event) {\n                        if (typeof(event) !== 'undefined') {\n                          // rating was selected by a user\n                          // console.log(value);\n                          if (!window.__appImmutables.auth_info.authorized) {\n                                appServices.loginRequiredDialog('login-dialog', null, function(promiseObj) {\n                                    if (promiseObj == true) {\n                                        scope.submitRatingAndReview(value);\n                                    }\n                                });\n\n                            } else if (scope.enableRating == true) {\n                                scope.submitRatingAndReview(value);\n                            }\n                        } else {\n                          // rating was selected programmatically\n                          // by calling `set` method\n                        }\n                    }\n                });\n            });\n            //product rating bar end\n\n            \n            var drift = '';\n\n            scope.prepareZoomImage = function(imageURL) {\n                \n                if (drift)\n                {\n                    drift.destroy();\n                }\n\n                var triggerEl =  document.querySelector('img.lw-zoom-image');\n\n                drift = new Drift(triggerEl, {\n                    paneContainer: document.querySelector('.lw-zoom-detail'),\n                    namespace: 'lw-zoom-panel',\n                    inlinePane: 900,\n                    inlineOffsetY: -85,\n                    containInline: true,\n                    zoomFactor: 4,\n                    hoverBoundingBox: true\n                });\n\n                _.defer(function() {\n\n                    if (!_.isUndefined(imageURL)) {\n                        \n                        drift.setZoomImageURL(imageURL);\n\n                        $(triggerEl).attr('src', imageURL);\n                        \n                        triggerEl.setAttribute(\"data-zoom\", imageURL);\n                    }\n\n                }, 100);\n               \n            }\n\n            _.defer(function() {\n                scope.prepareZoomImage();      \n            });       \n\n            scope.currentImageIndex = 0;\n            // Show all images from selected group\n            scope.showImagesInColorBox = function(showImages) {\n                $('.lw-zoom-panel-bounding-box').remove();\n                $('.lw-zoom-detail').html('');\n                var $gallery = $(\"a[rel=lw-product-images]\").colorbox({\n                    transition:\"none\", width:\"90%\", height:\"90%\", fixed:true\n                });\n                $gallery.eq(scope.currentImageIndex).click();\n            }\n            \n            scope.previewImageUrl = '';\n            // Prepare Url for preview image\n            scope.changeImage = function(imageUrl, e, index) {\n                e.preventDefault();\n                scope.currentImageIndex = index;\n                scope.previewImageUrl = imageUrl;\n                _.defer(function() {\n                    scope.prepareZoomImage(imageUrl);\n                });\n                event.stopImmediatePropagation();\n            }\n\n            //add product compare function start\n            scope.addProductCompare = function(productId) {\n\n                __DataStore.post({\n                    'apiURL' :'product.compare.add',\n                    'productId' : productId\n                }, scope).success(function(responseData) {\n                    var requestData = responseData.data;\n                    appServices.processResponse(responseData, null , function(reactionCode) {\n\n                        if (reactionCode == 1) {\n                            scope.productDetails.addedInCompareList = true;\n                            var countCompareProduct = requestData.countCompareProduct;\n                            $scope.$emit('lw.product.compare.count', true);\n                        }\n                    });   \n\n                });\n            }\n            //add product compare function end\n\n            //remove product compare function start\n            scope.removeProductCompare = function(productId) {\n\n                __DataStore.post({\n                    'apiURL' :'product.compare.remove',\n                    'productId' : productId\n                }, scope).success(function(responseData) {\n                    var requestData = responseData.data;\n                    appServices.processResponse(responseData, null , function(reactionCode) {\n\n                        if (reactionCode == 1) {\n                            scope.productDetails.addedInCompareList = false;\n                            var countCompareProduct = requestData.countCompareProduct;\n                            $scope.$emit('lw.product.compare.count', true);\n                        }\n                    });   \n\n                });\n            }\n            //remove product compare function end\n\n            //notify user email functionality\n            scope.notifyUser = function(userEmail) {\n            \n                if (!_.isEmpty(userEmail)) {\n                    __DataStore.post({\n                        'apiURL'        :'product.notify_user.add',\n                        'productId'     : scope.productID\n                    }, {\n                    \t'notifyUserEmail' : scope.notifyUserEmail\n                    }).success(function(responseData) {\n                         \n                        appServices.processResponse(responseData, function() {\n\n                        \tif (_.has(responseData.data, 'validation')) {\n\t                        \tvar errorMessage = responseData.data.validation.notifyUserEmail[0];\n\t                        \tif (errorMessage) {\n\t                        \t\tappNotify.error(errorMessage);\n\t                        \t}\n                        \t}\n\n                        } , function() {\n                            scope.notifyUserEmail = '';\n                        });   \n                    });\n                }\n            }\n            //notify user email functionality\n\n\t    \t/**\n\t        * display all active products list\n\t        *\n\t        * @return void\n\t        *---------------------------------------------------------------- */\n\t         \t\n\t        scope.getProductDetails  =  function() {\n\n\t\t        // send http request to server\n\t         \t__DataStore.fetch({\n\t\t                'apiURL'      : 'product.quick.view.details.support_data',\n\t\t                'productID'   : scope.productID,\n\t\t                'categoryID?' : scope.categoryID\n\t\t            }).success(function(responseData) {\n\t            \n\t            \tappServices.processResponse(responseData, null, function(reactionCode) {\n\t            \t\t\t\n\t\t\t\t\t\tvar requestData   = responseData.data.details;\n                     \n\t\t\t\t\t\tscope.productDetails = requestData;\n                        scope.itemRatingAndReview = requestData.itemRatingOrReview.itemRatingAndReview;\n                        scope.originalRatingAndReviewCount = requestData.itemRatingOrReview.originalRatingAndReviewCount;\n                        scope.reviewCount = requestData.itemRatingOrReview.reviewCount;\n                        scope.configReviewCount = requestData.itemRatingOrReview.configReviewCount;\n                        scope.totalReview = requestData.itemRatingOrReview.totalReview;\n                        scope.productSpecExists = requestData.productSpecExists;\n                        scope.productQuestion = scope.productDetails.productQuestionData.productQuestionData;\n                      \n                        scope.productDiscount = scope.productDetails.productDiscount;\n                        \n                        var $discount = $compile(__Utils.template('#discountDetailsTemplate', scope.productDiscount))(scope);\n                        scope.discountDetailsHtml = $discount.html();\n\n\t\t\t\t\t\tscope.productData = {\n\t\t\t\t\t\t\t'name'       : scope.productDetails.name, \n\t\t\t\t\t\t\t'quantity'   : 1, \n\t\t\t\t\t\t\t'isCartExist': false\n\t\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t\tscope = __Form.updateModel(scope, scope.productData);\n\n\t\t\t          \tscope.productDetails.basePriceWithAddonPrice = requestData.newTotalPrice;\n\t\t\t\t\t\t\n\t\t\t\t\t\tscope.newTotalPriceCount = requestData.newTotalPriceCount;\n\t\t\t\t\t\t\n\t\t\t\t\t\tscope.productDetails.selectedOptions = requestData.getSelectedOptions;\n\n\t\t\t\t\t\tif (scope.productDetails) {\n\t\t\t\t        \tscope.productData.name = requestData.name;\n\t\t\t\t        }\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(!_.isEmpty(scope.productDetails.getSelectedOptions)) {\n\t\t\t\t\t\t\tscope.optionLength = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.productDetails.priceDetails = {\n\t            \t\t\t'option' \t : requestData.getSelectedOptions,\n\t            \t\t\t'total' \t : requestData.getPrice.total,\n\t            \t\t\t'base_price' : requestData.getPrice.base_price\n\t                \t};\n\n\t                \t// product quantity\n\t\t\t\t\t\tif (requestData.qtyCart > 0) {\n\n\t\t\t\t\t\t\tscope.productData.quantity = requestData.qtyCart;\n\t\t\t\t\t\t\tscope.checkNumber          = true;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tscope.productData.quantity = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tscope.isPurchsedProduct = requestData.isPurchsedProduct;\n\t\t\t\t\t\tscope.btnQuantity = requestData.qtyCart;\n\t\t\t\t\t\tscope.productData.isCartExist = requestData.isCartExist;\n\t\t\n\t\t\t\t\t\tscope.pageStatus = true;\n\t\t\t\t\t\t\n\t\t\t        });\n\n\t\t\t\t\t\n\t     \t\t});\n\t        };\n\t        scope.getProductDetails();\n\n\n\t\t\t/**\n\t          * Submit rating action\n\t          *\n\t          * @return void\n\t          *---------------------------------------------------------------- */\n\t        scope.submitRatingAndReview = function (value) {\n\t            if (!_.isEmpty(value)) {\n                    __DataStore.post({\n                        'apiURL' :'product.rating.add',\n                        'productId' : scope.productID,\n                        'rate'   : value\n                    }, scope).success(function(responseData) {\n                        \n                        appServices.processResponse(responseData, null , function() {\n\n                            scope.itemRating = responseData.data.itemRating;\n                            \n                            // if is allow for review\n                            if (scope.itemRating.showDialog == true) {\n                                scope.showAddReviewDialog(responseData.data);\n                            }\n\n                            scope.isEnableReating();\n\n                        });   \n                        \n                        scope.getProductDetails();\n                    });\n                }\n\t        };\n\n\t        /**\n\t          * Show user login dialog\n\t          *\n\t          * @return void\n\t          *---------------------------------------------------------------- */\n\n\t        scope.showAddReviewDialog = function (responseData) {\n\t          \n\t            appServices.showDialog({\n\t                'reviewData' : responseData,\n\t                'productId'  : scope.productID\n\t            },\n\t            {   \n\t                templateUrl : __globals.getTemplateURL('product.add-review-dialog'),\n\t\t\t\t\tcontroller : \"AddReviewDialogController as AddReviewDialogCtrl\",\n\t\t\t\t\tresolve : {\n\t\t\t\t\t\tGetReviewData : function() {\n\n\t\t\t\t            //create a differed object          \n\t\t\t\t            var defferedObject = $q.defer();   \n\n\t\t\t\t            __DataStore.fetch({\n\t\t\t\t                    'apiURL'    : 'product.review.support.data',\n\t\t\t\t                    'productId' :  scope.productID\n\t\t\t\t                 }).success(function(responseData) {\n\t\t\t\t                                \n\t\t\t\t                appServices.processResponse(responseData, null, function(reactionCode) {\n\n\t\t\t\t                    //this method calls when the require        \n\t\t\t\t                    //work has completed successfully        \n\t\t\t\t                    //and results are returned to client        \n\t\t\t\t                    defferedObject.resolve(responseData);  \n\n\t\t\t\t                }); \n\n\t\t\t\t            });       \n\n\t\t\t\t           //return promise to caller          \n\t\t\t\t           return defferedObject.promise; \n\t\t\t\t        }\n\t\t\t\t\t}\n\t            },\n\t            function(promiseObj) {\n\n                    scope.getProductDetails();\n\t            });\n\t        \n\t        };\n\n             /**\n              * Create FAQs Dialog for this item\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n\n            scope.addQuestionDialog = function () {\n\n                appServices.showDialog({\n                    'itemTitle' : scope.productData.name\n                },\n                {   \n                    templateUrl : __globals.getTemplateURL('product.add-faqs-dialog'),\n                    controller  : \"ProductFaqsDialogController as ProductFaqsCtrl\",\n                    resolve     : {}\n                },\n                function(promiseObj) {\n\n                });\n            };\n\n\t        /**\n\t          * Show Ratings of this item\n\t          *\n\t          * @return void\n\t          *---------------------------------------------------------------- */\n\n\t        scope.showRatingAndReviews = function () {\n\n                appServices.showDialog({\n                    'itemTitle' : scope.productData.name\n                },\n                {   \n                    templateUrl : __globals.getTemplateURL('product.ratings-and-reviews-dialog'),\n\t\t\t\t\tcontroller : \"ItemRatingAndReviewDialogController as RatingAndReviewCtrl\",\n\t\t\t\t\tresolve : {\n\t\t\t\t\t\tGetRatingAndReviewData : function() {\n\n\t\t\t\t            //create a differed object          \n\t\t\t\t            var defferedObject = $q.defer();   \n\n\t\t\t\t            __DataStore.fetch({\n\t\t\t\t                    'apiURL'    : 'product.rating_review.get_support_data',\n\t\t\t\t                    'productId' :  scope.productID\n\t\t\t\t                 }).success(function(responseData) {\n\t\t\t\t                                \n\t\t\t\t                appServices.processResponse(responseData, null, function(reactionCode) {\n\n\t\t\t\t                    //this method calls when the require        \n\t\t\t\t                    //work has completed successfully        \n\t\t\t\t                    //and results are returned to client        \n\t\t\t\t                    defferedObject.resolve(responseData);  \n\n\t\t\t\t                }); \n\n\t\t\t\t            });       \n\n\t\t\t\t           //return promise to caller          \n\t\t\t\t           return defferedObject.promise; \n\t\t\t\t        }\n\t\t\t\t\t}\n                },\n                function(promiseObj) {\n                    scope.getProductDetails();\n                });\n\t        };\n\n \n\t        /**\n\t        * increment decrement quantity\n\t        *\n\t        * @param boolean status \n\t        * @param int quantity\n\t        *\n\t        * @return void\n\t        *---------------------------------------------------------------- */\n\t\t \tscope.getQtyAction = function(status, quantity) {\n\n\t\t\t\t// if product status is true \n\t\t\t\tif (status == true) {\n\t\t\t\t\t(quantity == undefined || isNaN(quantity)) \n\t\t\t\t\t? scope.productData.quantity = 1 \n\t\t\t\t\t: scope.productData.quantity = quantity + 1;\n\n\t\t\t\t} else {\n\t\t\t\t\t// product quantity must be greterThan -1\n\t\t\t\t\tvar newValue = (quantity - 1);\n\t\t\t\t\t(newValue <= 0) \n\t\t\t\t\t? scope.productData.quantity = 1 \n\t\t\t\t\t: scope.productData.quantity = newValue;\n\t\t\t\t}\n\n\t\t\t};\n\t\t\t\n\n\t\t\t/**\n\t\t  * Add product as a cart item\n\t\t  *\n\t\t  * @return void\n\t\t  *---------------------------------------------------------------- */\n\t\tscope.cartAction = false;\n\n\t\tscope.addToCart  =  function() { \n\t\t\t\n\t\t    __Form.process({\n\t\t        apiURL      : 'cart.add.item',\n\t\t        productID   : scope.productID\n\t\t    }, scope).success(function(responseData) {\n\t\t    \t\n\t\t    \tscope.cartAction = true;\n\n\t\t    \tvar requestData = responseData.data;\n\n\t\t        appServices.processResponse(\n\t\t            responseData,\n\t\t            null, \n\t\t            function() {\n\t\t            \t\n\t\t            \tscope.data = {\n\t\t                  'cart_string': responseData.data.cartItems,\n\t\t                  'status'     : true\n\t\t                }\n\t\t                scope.updateCartRow(scope.productID, true);\n\t\t                $scope.$emit('lw.update.cart.string', scope.data);\n\t\t            }\n\t\t        );\n\n\t\t    });\n\t\t};\n\n        /**\n          * Add to Wish-list\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.addToWishlist = function() {\n            if (!window.__appImmutables.auth_info.authorized) {\n                    \n                appServices.loginRequiredDialog('login-dialog', null, function(result) {});\n\n            } else {\n                __DataStore.post({\n                    'apiURL'    : 'product.wishlist.add_process',\n                    'productId' : scope.productID\n                }, scope).success(function(responseData) {\n                    \n                    var requestData = responseData.data;\n                    if (requestData.showLoggedInDialog) {\n                        appServices.loginRequiredDialog('login-dialog', null, function(result) {});\n                    }\n\n                    appServices.processResponse(responseData, null, function(reactionCode) {\n                        if (reactionCode == 1) {\n                            scope.isAddedInWishlist = true;\n                        }                        \n                    });\n                });\n            }\n        };\n\n        /**\n          * Remove from Wish-list\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.removeFromWishlist = function() {\n            __DataStore.post({\n                'apiURL'    : 'product.wishlist.remove_process',\n                'productId' : scope.productID\n            }, scope).success(function(responseData) {\n                var requestData = responseData.data;\n                if (requestData.showLoggedInDialog) {\n                    appServices.loginRequiredDialog('login-dialog', null, function(result) {});\n                }\n\n                appServices.processResponse(responseData, null, function(reactionCode) {\n\n                    if (reactionCode == 1) {\n                        scope.isAddedInWishlist = false;\n                    }                       \n                });\n            });\n        };\n\n\t    // when the cart item remove from to cart\n\t    $rootScope.$on('remove.cart.row',function(events,resposeData) {\n\n\t    \tif (resposeData.status) {\n\t    \t\t//scope.getProductDetails();\n\t    \t\tscope.updateCartRow(scope.productID, true);\n\t    \t};\n\t           \n\t    });\n\n\t\t/**\n\t\t  * Add product as a cart item\n\t\t  *\n\t\t  * @return void\n\t\t  *---------------------------------------------------------------- */\n\n\t\tscope.updateCartRow  =  function(productID, option, options) { \n\t\t\tvar checkOption    = true;\n\n\t\t\tscope.addonPrices  = [];\n\t\t\t\n\t\t\tif (scope.productData.options != undefined) {\n\t\t    \t// hold option of addon_price related data \n\t\t    \tscope.productDetails.selectedOptions = scope.productData.options[productID];\n\t\t    \tangular.forEach(scope.productData.options[productID], \n\t\t    \t\tfunction( value, key ) {\n\t\t    \t\t\t\n\t\t\t\t    \tthis.push({\n\t\t\t\t    \t\t\toption_name:key,\n\t\t\t\t    \t\t \tvalue_name :value.name,\n\t\t\t\t    \t\t  \taddon_price:value.addon_price_format\n\t\t\t\t    \t});\n\t\t\t\t}, scope.addonPrices );\n\n\t\t    \t// hold empty options data \n\t\t\t\tangular.forEach(scope.productData.options[productID], \n\t\t\t\t\tfunction( value, key ) {\n\n\t\t\t\t\t\tif (value == '' ) {\n\t\t\t\t\t\t\tcheckOption = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t}, checkOption );\n\t\t\t} \n            \n            var selectedOptions = _.pluck(scope.productDetails.selectedOptions, 'id');\n\n            var counter = 0,\n                optionProductImages = [];\n\n            _.forEach(selectedOptions, function(item) {\n\n                _.forEach(scope.images, function(row, index) {\n                \n                    if (item === row.product_option_values_id) {\n                        counter++;\n                        row.counter = counter;\n                        optionProductImages.push(row);\n                    }\n                \n                 });\n\n            })\n\n\t\t\t__Form.process({\n\t\t    \tapiURL      :'cart.product.qty.update',\n\t\t    \tproductID   : productID\n\t\t    }, scope).success(function(responseData) {\n\n\t\t        appServices.processResponse(\n\t\t            responseData,\n\t\t            null, \n\t\t            function(reactionCode) {\n\n\t\t            \tvar requestData = responseData.data;\n\n\t\t            \tscope.productDetails.basePriceWithAddonPrice = requestData.formatedTotalPrice;\n\t                    \n\t\t            \tscope.productDetails.priceDetails         = {\n\t\t        \t\t\t'option' \t : scope.productDetails.selectedOptions,\n\t\t        \t\t\t'total' \t : requestData.totalPrice,\n\t\t        \t\t\t'base_price' : requestData.base_price\n\t\t            \t}\n\n                        scope.productDiscount = requestData.productDiscount;\n\n                        var $discount = $compile(__Utils.template('#discountDetailsTemplate', scope.productDiscount))(scope);\n                        scope.discountDetailsHtml = $discount.html();\n\n\t\t\t\t\t\tscope.productData.isCartExist = requestData.isCartExist;\n\n\t\t            \tif (requestData.qtyCart > 0 ) {\n\t\t\t\t\t\t\tscope.productData.quantity = requestData.qtyCart;\n\t\t\t\t\t\t\tscope.btnQuantity          = requestData.qtyCart;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tscope.btnQuantity = 0;\n\t\t\t\t\t\t\tscope.productData.quantity = 1;\n\t\t\t\t\t\t}\n\t\t            }\n\t\t        );\n\n\n            });\n            \n \t\t\tif (optionProductImages.length > 0) {\n\n\t\t\t    angular.element('.lw-main-slider-container').replaceWith($compile(__Utils.template('#lwMainSliderRow', {\n\t                'images' : optionProductImages,\n\t                'firstImage' : _.get(optionProductImages, 0)\n\t            }))($scope));\n\n                scope.prepareZoomImage();\n                \n \t\t\t} else if(optionProductImages.length == 0) {\n\n                angular.element('.lw-main-slider-container').replaceWith($compile(__Utils.template('#lwMainSliderRow', {\n                    'images' : scope.defaultImages,\n                    'firstImage' : _.get(scope.defaultImages, 0)\n                }))($scope));\n\n                scope.prepareZoomImage();\n            }\n\n\t\t};\n\n\t}\n\t \t\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t ProductDetailsDialogController\n\t-------------------------------------------------------------------------- */\n\t\n\tangular\n        .module('PublicApp.productDetailsDialog', [])\n        .controller('ProductDetailsDialogController', \t[\n            '$scope', \n            '__DataStore', \n            'appServices',\n            '$stateParams',\n            '__Form',\n            '__Utils',\n\t\t\t'$q',\n\t\t\t'GetProductDetails',\n            '$compile',\n            '$rootScope',\n            '__Auth',\n            ProductDetailsDialogController \n\t \t]);\n\n\t/**\n\t * ProductDetailsDialogController for product details application\n\t * \n\t * @inject $scope\n\t * @inject __DataStore\n\t * @inject appServices\n\t * @inject $stateParams\n\t * @inject __Form\n\t * @inject __Utils\n\t * \n\t * @return void\n\t *-------------------------------------------------------- */\n\n\tfunction ProductDetailsDialogController($scope, __DataStore, appServices,\n\t  $stateParams, __Form, __Utils, $q, GetProductDetails, $compile, $rootScope, __Auth) {\n\n\t\tvar scope = this;\n\n        \tscope.categoryID \t= $scope.ngDialogData.categoryID;\n        \tscope.productID \t= $scope.ngDialogData.productID;\n        \tscope.pageType \t\t= $scope.ngDialogData.pageType;\n        \tscope.dialogStatus  = $scope.ngDialogData.dialogStatus;\n            scope.isLoggedIn    = __Auth.isLoggedIn();\n\n            __Auth.refresh(function(authInfo) {\n                scope.auth_info = authInfo;\n            });\n\n\t\t\tscope = __Form.setup(scope, 'add_product_in_cart_form', 'productData', {\n\t            modelUpdateWatcher:false\n\t        });\n\t    \n\t\t\tscope.pageStatus \t= false;\n\t \t\tscope.optionLength \t= false;   \n\n            //add product compare function start\n            scope.addProductCompare = function(productId) {\n\n                __DataStore.post({\n                    'apiURL' :'product.compare.add',\n                    'productId' : productId\n                }, scope).success(function(responseData) {\n                  \n                    var requestData = responseData.data;\n                    appServices.processResponse(responseData, null , function(reactionCode) {\n                        if (reactionCode == 1) {\n                            scope.productDetails.addedInCompareList = true;\n                            var countCompareProduct = requestData.countCompareProduct;\n                            $scope.$emit('lw.product.compare.count', true);\n                        }\n                       \n                    });   \n\n                });\n            }\n            //add product compare function end\n\n            //remove product compare function start\n            scope.removeProductCompare = function(productId) {\n                __DataStore.post({\n                    'apiURL' :'product.compare.remove',\n                    'productId' : productId\n                }, scope).success(function(responseData) {\n                    var requestData = responseData.data;\n                    appServices.processResponse(responseData, null , function(reactionCode) {\n\n                        if (reactionCode == 1) {\n                            scope.productDetails.addedInCompareList = false;\n                            var countCompareProduct = requestData.countCompareProduct;\n                            $scope.$emit('lw.product.compare.count', true);\n                        }\n                    });   \n\n                });\n            }\n            //remove product compare function end\n\n\n\t\t\tvar requestData   = GetProductDetails.data.details;\n       \n\t\t\t\tscope.itemRating \t = requestData.itemRating;\n                scope.productStatus = requestData.productStatus;\n\t\t\t\tscope.enableRating  = requestData.enableRating;\n\t\t\t\tscope.enableRatingReview = requestData.enableRatingReview;\n\t\t\t\tscope.restrictAddRating = requestData.restrictAddRating;\n\t\t\t\tscope.enableRatingModification = requestData.enableRatingModification;\n\t\t\t\tscope.isPurchsedProduct  = requestData.isPurchsedProduct;\n                scope.isAddedInWishlist = requestData.isAddedInWishlist;\n                scope.productSpecExists = requestData.productSpecExists;\n\t\t\t\tscope.productDetails = requestData;\n                scope.launchingDate = requestData.launchingDate;\n                scope.images = requestData.allImages;\n                scope.defaultImages = requestData.defaultImages;\n                scope.primaryImages = requestData.primaryImages;\n                scope.isEnableReating = function() { \n\n                scope.isEnableRatingModification = true;\n                \n                // this condition check used for enable rating modification\n                if (_.isEmpty(scope.itemRating.selfRating)\n                    && scope.enableRatingModification == false) {\n                \n                    scope.isEnableRatingModification = false;\n\n                } else if (!_.isEmpty(scope.itemRating.selfRating)\n                            && scope.enableRatingModification == true) {\n                \n                    scope.isEnableRatingModification = false;\n\n                } else if (_.isEmpty(scope.itemRating.selfRating)\n                            && scope.enableRatingModification == true) {\n                \n                    scope.isEnableRatingModification = false;\n\n                }  else if (scope.restrictAddRating == true\n                            && scope.enableRatingModification == true) {\n                \n                    scope.isEnableRatingModification = true;\n                }\n                \n                if (scope.restrictAddRating == true \n                    && scope.isPurchsedProduct == false) {\n                \n                     scope.isEnableRatingModification = true;\n                }\n                \n            };\n            scope.isEnableReating();\n\n            if (scope.enableRatingModification == true && scope.productStatus != 1) {\n                \n                scope.isEnableRatingModification = true;\n            }\n\n             //product rating bar start\n            _.delay(function() {\n                $(function() {\n                    $('#lw-bar-rating').barrating('show', {\n                        theme: 'fontawesome-stars-o',\n                        showValues: false,\n                        allowEmpty: false,\n                        readonly: scope.isEnableRatingModification,\n                        initialRating: scope.itemRating.selfRating,\n                        onSelect: function(value, text, event) {\n                            if (typeof(event) !== 'undefined') {\n                              // rating was selected by a user\n                              // console.log(value);\n                                if (!window.__appImmutables.auth_info.authorized) {\n                                    appServices.loginRequiredDialog('login-dialog', null, function(promiseObj) {\n                                        if (promiseObj == true) {\n                                            scope.submitRatingAndReview(value);\n                                        }\n                                    });  \n                                    // appServices.showDialog({},\n                                    //     {\n                                    //         templateUrl : __globals.getTemplateURL('user.login-dialog')\n                                    //     },\n                                    // function(promiseObj) {\n                                    //     if (promiseObj.value.login_success == true) {\n                                    //         scope.submitRatingAndReview(value);\n                                    //     }\n                                    // });\n\n                                } else if (scope.enableRating == true) {\n                                    scope.submitRatingAndReview(value);\n                                }\n                            } \n                        }\n                    });\n                });\n            }, 200);\n            //product rating bar end  \n\n\t\t\t\t// hold product related categories data & make comma Separate\n\t\t\t\tscope.productDetails.categories = requestData.categories;\n\n\t          \tscope.productDetails.basePriceWithAddonPrice = requestData.newTotalPrice;\n\n                scope.productDiscount = requestData.productDiscount;\n\n                $scope.$on('ngDialog.opened', function (e, $dialog) {\n                    var $discount = $compile(__Utils.template('#discountDetailsTemplate', scope.productDiscount))(scope);\n                    scope.discountDetailsHtml = $discount.html(); \n                });\n\n                \n                //__pr($discount);\n                //scope.discountDetailsHtml = $discount.html();\n\n\t\t\t\tscope.newTotalPriceCount = requestData.newTotalPriceCount;\n\n\t\t\t\tscope.productDetails.selectedOptions = requestData.getSelectedOptions;\n\n\t\t\t\tscope.oldPrice = scope.productDetails.old_price;\n\n\t\t\t\tif (scope.productDetails) {\n\t\t        \tscope.productData.name = requestData.name;\n\t\t        }\n\t\t\t\t\n\t\t\t\tif(!_.isEmpty(scope.productDetails.selectedOptions)) {\n\t\t\t\t\tscope.optionLength = true;\n\t\t\t\t}\n\n\t\t\t\tscope.productDetails.priceDetails = {\n\t    \t\t\t'option' \t : requestData.getSelectedOptions,\n\t    \t\t\t'total' \t : requestData.getPrice.total,\n\t    \t\t\t'base_price' : requestData.getPrice.base_price\n\t        \t};\n\n\t        \t// product quantity\n\t\t\t\tif (requestData.qtyCart > 0) {\n\n\t\t\t\t\tscope.productData.quantity = requestData.qtyCart;\n\t\t\t\t\tscope.checkNumber          = true;\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tscope.productData.quantity = 1;\n\t\t\t\t}\n\n\t\t\t\tscope.btnQuantity = requestData.qtyCart;\n\t\t\t\tscope.productData.isCartExist = requestData.isCartExist;\n\n\t\t\t\tscope.pageStatus = true;\n\n               /* _.delay(function() {\n                    $('#lwRateIt .rateit').bind('rated reset', function (e) {\n                        e.preventDefault();\n                        var ri = $(this);\n                        var value = ri.rateit('value');               \n                    });\n                }, 1000);*/\n                \n\n\t\t\t/**\n\t          * Submit rating action\n\t          *\n\t          * @return void\n\t          *---------------------------------------------------------------- */\n\t        scope.submitRatingAndReview = function (value) {\n\n\t            if (!_.isEmpty(value)) {\n                    __DataStore.post({\n                        'apiURL' :'product.rating.add',\n                        'productId' : scope.productID,\n                        'rate'   : value\n                    }, scope).success(function(responseData) {\n                        \n                        appServices.processResponse(responseData, null , function() {\n   \n                            scope.itemRating = responseData.data.itemRating;\n                            scope.rating =  parseFloat(scope.itemRating.rate);\n\n                            // manage product list rating show dynamic start\n                            var ratingElement = $('#lw-product-rating-'+scope.productID).length;\n\n                            var decimal = '',\n                                formatItemRating = '',\n                                rated = Math.floor(scope.rating), \n                                unrated = Math.floor(5 - rated);\n                                 \n                            if (scope.rating % 1 != 0) {\n                                decimal = '<i class=\"fa fa-star-half-o lw-color-gold\"></i>';\n                                unrated = unrated - 1;\n                            }\n                           \n                            //create format string\n                            formatItemRating = (_.repeat('<i class=\"fa fa-star lw-color-gold\"></i>', rated)+\n                                    decimal+\n                                    _.repeat('<i class=\"fa fa-star lw-color-gray\"></i>', unrated));\n\n                            //check item rating null or not\n                            if (ratingElement > 0) {\n                               \n                                var element = $('#lw-product-rating-'+scope.productID).html(\"\");\n\n                                string = '<span class=\"lw-product-rating-avg border\">'+formatItemRating+'</span><span class=\"text-muted\">'+scope.itemRating.rate+'<small>('+scope.itemRating.totalVotes+')</small></span>';\n\n                                $(element).html(string);\n\n                            } else if (ratingElement == 0) {\n \n                                var element = $('#lw-product-star-rating-'+scope.productID).html(\"\"),\n\n                                string = '<div id=\"lw-product-rating-'+scope.productID+'\"><span class=\"lw-product-rating-avg border\">'+formatItemRating+'</span><span class=\"text-muted\">'+scope.itemRating.rate+'<small>('+scope.itemRating.totalVotes+')</small></span></div>';\n                              \n                                $(element).html(string);\n                            }\n                            // manage product list rating show dynamic end\n                          \n                            // if is allow for review\n                            if (scope.itemRating.showDialog === true) {\n                                scope.showAddReviewDialog(responseData.data);\n                            }\n\n                            scope.isEnableReating();\n\n                        });   \n\n                    });\n                }\n\t        };\n\n\t        /**\n\t          * Show user login dialog\n\t          *\n\t          * @return void\n\t          *---------------------------------------------------------------- */\n\n\t        scope.showAddReviewDialog = function (responseData) {\n\t            \n\t            appServices.showDialog({\n\t                'reviewData' : responseData,\n\t                'productId'  : scope.productID\n\t            },\n\t            {   \n\t                templateUrl : __globals.getTemplateURL('product.add-review-dialog'),\n\t\t\t\t\tcontroller : \"AddReviewDialogController as AddReviewDialogCtrl\",\n\t\t\t\t\tresolve : {\n\t\t\t\t\t\tGetReviewData : function() {\n\n\t\t\t\t            //create a differed object          \n\t\t\t\t            var defferedObject = $q.defer();   \n\n\t\t\t\t            __DataStore.fetch({\n\t\t\t\t                    'apiURL'    : 'product.review.support.data',\n\t\t\t\t                    'productId' :  scope.productID\n\t\t\t\t                 }).success(function(responseData) {\n\t\t\t\t                                \n\t\t\t\t                appServices.processResponse(responseData, null, function(reactionCode) {\n\n\t\t\t\t                    //this method calls when the require        \n\t\t\t\t                    //work has completed successfully        \n\t\t\t\t                    //and results are returned to client        \n\t\t\t\t                    defferedObject.resolve(responseData);  \n\n\t\t\t\t                }); \n\n\t\t\t\t            });       \n\n\t\t\t\t           //return promise to caller          \n\t\t\t\t           return defferedObject.promise; \n\t\t\t\t        }\n\t\t\t\t\t}\n\t            },\n\t            function(promiseObj) {\n\n\t            });\n\t        \n\t        };\n\n\t        /**\n\t          * Show Ratings of this item\n\t          *\n\t          * @return void\n\t          *---------------------------------------------------------------- */\n\n\t        scope.showRatingAndReviews = function () {\n\n                appServices.showDialog({\n                    'itemTitle' : scope.productData.name\n                },\n                {   \n                    templateUrl : __globals.getTemplateURL('product.ratings-and-reviews-dialog'),\n\t\t\t\t\tcontroller : \"ItemRatingAndReviewDialogController as RatingAndReviewCtrl\",\n\t\t\t\t\tresolve : {\n\t\t\t\t\t\tGetRatingAndReviewData : function() {\n\n\t\t\t\t            //create a differed object          \n\t\t\t\t            var defferedObject = $q.defer();   \n\n\t\t\t\t            __DataStore.fetch({\n\t\t\t\t                    'apiURL'    : 'product.rating_review.get_support_data',\n\t\t\t\t                    'productId' :  scope.productID\n\t\t\t\t                 }).success(function(responseData) {\n\t\t\t\t                                \n\t\t\t\t                appServices.processResponse(responseData, null, function(reactionCode) {\n\n\t\t\t\t                    //this method calls when the require        \n\t\t\t\t                    //work has completed successfully        \n\t\t\t\t                    //and results are returned to client        \n\t\t\t\t                    defferedObject.resolve(responseData);  \n\n\t\t\t\t                }); \n\n\t\t\t\t            });       \n\n\t\t\t\t           //return promise to caller          \n\t\t\t\t           return defferedObject.promise; \n\t\t\t\t        }\n\t\t\t\t\t}\n                },\n                function(promiseObj) {\n\n                });\n\t        };\n\n\t         /**\n\t\t\t* Take product quantity action.\n\t\t\t*\n\t\t\t* @param {Number} status\n\t\t\t* @param {Number} qty\n\t\t\t* @return void\n\t\t\t*\n\t\t\t*------------------------------------------------------------------------ */\n\n\t\t\tscope.getQtyAction = function(status, quantity) {\n\n\t\t\t\t// if product status is true \n\t\t\t\tif (status == true) {\n\t\t\t\t\t(quantity == undefined || isNaN(quantity)) \n\t\t\t\t\t? scope.productData.quantity = 1 \n\t\t\t\t\t: scope.productData.quantity = quantity + 1;\n\n\t\t\t\t} else {\n\t\t\t\t\t// product quantity must be greterThan -1\n\t\t\t\t\tvar newValue = (quantity - 1);\n\t\t\t\t\t(newValue <= 0) \n\t\t\t\t\t? scope.productData.quantity = 1 \n\t\t\t\t\t: scope.productData.quantity = newValue;\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t\t/**\n\t\t\t  * Add product as a cart item\n\t\t\t  *\n\t\t\t  * @return void\n\t\t\t  *---------------------------------------------------------------- */\n\t\t\tscope.cartAction = false;\n\n\t\t\tscope.addToCart  =  function() { \n\t\t\t\t\n\t\t\t    __Form.process({\n\t\t\t        apiURL      : 'cart.add.item',\n\t\t\t        productID   : scope.productID\n\t\t\t    }, scope).success(function(responseData) {\n\t\t\t    \t\n\t\t\t    \tscope.cartAction = true;\n\n\t\t\t    \tvar requestData = responseData.data;\n\n\t\t\t        appServices.processResponse(\n\t\t\t            responseData,\n\t\t\t            null, \n\t\t\t            function() {\n\t\t\t            \t\n\t\t\t            \tscope.data = {\n\t\t\t                  'cart_string': responseData.data.cartItems,\n\t\t\t                  'status'     : true\n\t\t\t                }\n\t\t\t                scope.updateCartItem(scope.productID, true);\n\t\t\t                $scope.$emit('lw.update.cart.string', scope.data);\n\t\t\t            }\n\t\t\t        );\n\n\t\t\t    });\n\t\t\t};\n\n            /**\n              * Add to Wish-list\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n            scope.addToWishlist = function() {\n\n                if (!window.__appImmutables.auth_info.authorized) {\n                    \n                    appServices.loginRequiredDialog('login-dialog', null, function(result) {});\n\n                } else {\n                    __DataStore.post({\n                        'apiURL'    : 'product.wishlist.add_process',\n                        'productId' : scope.productID\n                    }, scope).success(function(responseData) {\n                        var requestData = responseData.data;\n                        if (requestData.showLoggedInDialog) {\n                            appServices.loginRequiredDialog('login-dialog', null, function(result) {});\n                        }\n                        appServices.processResponse(responseData, null, function(reactionCode) {\n                            if (reactionCode == 1) {\n                                $('.lw-remove-wishlist-'+scope.productID).show();\n                                $('.lw-add-wishlist-'+scope.productID).hide();\n\n                                scope.isAddedInWishlist = true;\n                            }                        \n                        });\n                    });\n                }\n\n            };\n\n            /**\n              * Remove from Wish-list\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n            scope.removeFromWishlist = function() {\n                __DataStore.post({\n                    'apiURL'    : 'product.wishlist.remove_process',\n                    'productId' : scope.productID\n                }, scope).success(function(responseData) {\n                    var requestData = responseData.data;\n                    if (requestData.showLoggedInDialog) {\n                        appServices.loginRequiredDialog('login-dialog', null, function(result) {});\n                    }\n                    \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        if (reactionCode == 1) {\n                            $('.lw-add-wishlist-'+scope.productID).show();\n                            $('.lw-remove-wishlist-'+scope.productID).hide();\n                            scope.isAddedInWishlist = false;\n                        }                       \n                    });\n                });\n            };\n\n\t\t\t/**\n\t\t\t  * Add product as a cart item\n\t\t\t  *\n\t\t\t  * @return void\n\t\t\t  *---------------------------------------------------------------- */\n\n\t\t\tscope.updateCartItem  =  function(productID, option) { \n\n\t\t\t\tvar checkOption    = true;\n\n\t\t\t\tscope.addonPrices  = [];\n\t\t\t\t\n\t\t\t\tif (scope.productData.options != undefined) {\n\t\t\t    \t// hold option of addon_price related data \n\t\t\t    \tscope.productDetails.selectedOptions = scope.productData.options[productID];\n\t\t\t    \tangular.forEach(scope.productData.options[productID], \n\t\t\t    \t\tfunction( value, key ) {\n\t\t\t\t\t    \tthis.push({\n\t\t\t\t\t    \t\t\toption_name:key,\n\t\t\t\t\t    \t\t \tvalue_name :value.name,\n\t\t\t\t\t    \t\t  \taddon_price:value.addon_price_format\n\t\t\t\t\t    \t});\n\t\t\t\t\t}, scope.addonPrices );\n\n\t\t\t    \t// hold empty options data \n\t\t\t\t\tangular.forEach(scope.productData.options[productID], \n\t\t\t\t\t\tfunction( value, key ) {\n\n\t\t\t\t\t\t\tif (value == '' ) {\n\t\t\t\t\t\t\t\tcheckOption = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t}, checkOption );\n\t\t\t\t}\n\n                var selectedOptions = _.pluck(scope.productDetails.selectedOptions, 'id');\n\n                var counter = 0,\n                    optionProductImages = [];\n\n                _.forEach(selectedOptions, function(item) {\n                    _.forEach(scope.images, function(row, index) {                    \n                        if (item === row.product_option_values_id) {\n                            counter++;\n                            row.counter = counter;\n                            optionProductImages.push(row);\n                        }                    \n                     });\n                });\n                \n                if (optionProductImages.length > 0) {\n\n                    angular.element('.lw-main-slider-container').replaceWith($compile(__Utils.template('#lwMainSliderRow', {\n                        'images' : optionProductImages,\n                        'firstImage' : _.get(optionProductImages, 0)\n                    }))($scope));\n\n                    //scope.prepareZoomImage();\n                    \n                 } else if(optionProductImages.length == 0) {\n\n                    angular.element('.lw-main-slider-container').replaceWith($compile(__Utils.template('#lwMainSliderRow', {\n                        'images' : scope.defaultImages,\n                        'firstImage' : _.get(scope.defaultImages, 0)\n                    }))($scope));\n\n                    //scope.prepareZoomImage();\n                }\n\n\t\t\t\t__Form.process({\n\t\t\t    \tapiURL      :'cart.product.qty.update',\n\t\t\t    \tproductID   : productID\n\t\t\t    }, scope).success(function(responseData) {\n\n\t\t\t        appServices.processResponse(\n\t\t\t            responseData,\n\t\t\t            null, \n\t\t\t            function(reactionCode) {\n\n\t\t\t            \tvar requestData = responseData.data;\n\n\t\t\t            \tscope.productDetails.basePriceWithAddonPrice = requestData.totalPrice;\n\t\t\t            \tscope.productDetails.priceDetails         = {\n\t\t\t        \t\t\t'option' \t : scope.productDetails.selectedOptions,\n\t\t\t        \t\t\t'total' \t : requestData.totalPrice,\n\t\t\t        \t\t\t'base_price' : requestData.base_price\n\t\t\t            \t}\n\n                            scope.productDiscount = requestData.productDiscount;\n\n                            var $discount = $compile(__Utils.template('#discountDetailsTemplate', scope.productDiscount))(scope);\n                            scope.discountDetailsHtml = $discount.html();\n\n\t\t\t\t\t\t\tscope.productData.isCartExist = requestData.isCartExist;\n\n\t\t\t            \tif (requestData.qtyCart > 0 ) {\n\t\t\t\t\t\t\t\tscope.productData.quantity = requestData.qtyCart;\n\t\t\t\t\t\t\t\tscope.btnQuantity          = requestData.qtyCart;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tscope.btnQuantity = 0;\n\t\t\t\t\t\t\t\tscope.productData.quantity = 1;\n\t\t\t\t\t\t\t}\n\t\t\t            }\n\t\t\t        );\n\n\n\t\t\t    });\n\n\t\t\t};\n\n            scope.previewImageUrl = '';\n            scope.changeImage = function(imageUrl, e, index) {\n                e.preventDefault();\n                scope.currentImageIndex = index;\n                scope.previewImageUrl = imageUrl;\n                var triggerEl =  document.querySelector('img.lw-zoom-image');\n                $(triggerEl).attr('src', imageUrl);\n                event.stopImmediatePropagation();\n            }\n\n            /**\n        * open cart model\n        *\n        * @param object param1 type \n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        \n        scope.openCartDialog  =  function(status) \n        {\n            $rootScope.$broadcast('lw.isCart.dialog', { dialog: status });\n\n            //check if shopping cart dialog is open, if true then will not re-open again\n            if (!($(\"html\").hasClass(\"lw-shopping-cart-dialog-active\"))) {\n\n                $('html').addClass('lw-shopping-cart-dialog-active');\n\n                appServices.showDialog(scope,\n                {\n                    templateUrl : __globals.getTemplateURL('shoppingCart.cart-view')\n                },\n                function(promiseObj) {\n                    $('html').removeClass('lw-shopping-cart-dialog-active');\n                });\n\n                $rootScope.$on('ngDialog.opened', function (e, $dialog) {\n\n                    if ($('div.lw-shopping-cart-dialog-content').length) {\n                        $('div.ngdialog-content').addClass('lw-shopping-cart-dialog');\n                    }\n\n                });\n            }\n        };\n\t};\n\n})();","(function() {\n'use strict';\n    \n    /*\n     DisplayPageDetailsController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('PublicApp.page.details', [])\n        .controller('DisplayPageDetailsController',   [\n        \t'$scope',\n        \t'$state',\n            'appServices',\n            '__DataStore',\n            DisplayPageDetailsController \n        ]);\n\n    /**\n      * DisplayPageDetailsController handle add pages form\n      * @inject $scope\n      * @inject $state\n      * @inject appServices\n      * @inject __DataStore\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function DisplayPageDetailsController($scope, $state, appServices, __DataStore) {\n    \t\n        var scope   = this,\n        \tURL     = {\t\n        \t\t\t'apiURL' :'display.page.details',\n        \t\t\t'pageID' : $state.params.pageID\n        \t\t};\n\n\n\t \tvar activepages = __globals.getActivePagesData(),\n\t \t\t\tpages   = __globals.findParents(activepages, $state.params.pageID),\n\t\t    allPages    = pages.reverse(),\n\t\t\ttotalPages  = allPages.length - 1;\n\t\t\t\n\t\t\t// get last page \n\t\t\t_.forEach(pages, function(value, index) {\n\n\t\t\t\tif (index == totalPages) {\n\t\t\t\t\tscope.last_page = value.title;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (totalPages === 0) {\n\n\t\t\t\t\t// inject breadcrumb service\n\t\t\t\t \tappServices.updateBreadcrumbs([ \n\t\t\t\t\t\t{   items     : '',\n\t\t\t\t\t\t\tlast_item : scope.last_page \n\t\t\t\t\t\t}\n\t\t\t \t\t], $scope);\n\n\t\t\t} else {\n\n\t\t\t\t// initial function remove last index and return remaining indexes\n\t\t\t\t_.forEach(_.initial(allPages), function(value, index) {\n\n\t\t\t\t\t//inject breadcrumb service\n\t\t\t\t \tappServices.updateBreadcrumbs([ \n\t\t\t\t\t\t{   items     : [{\n\t\t\t\t\t\t\t\titem: value.title,\n\t\t\t\t\t\t\t\turl : value.link \n\t\t\t\t\t\t\t\t\t\t? value.link \n\t\t\t\t\t\t\t\t\t\t: $state.href('display_page_details',\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t'pageID'   :value.key,\n\t\t\t\t\t\t\t\t\t\t\t\t'pageTitle':__globals.slug(value.title)\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\tlast_item : scope.last_page \n\t\t\t\t\t\t}\n\t\t\t \t\t], $scope);\n\t\t\t\t});\n\t\t\t}\n\n      \t/**\n      \t* get pages info\n      \t* \n      \t* @return void\n      \t*-------------------------------------------------------- */\n\n        scope.getPageInfo = function() {\n\n        \t__DataStore.fetch(URL, scope)\n            \t.success(function(responseData) {\n\n            \tappServices.processResponse(responseData, null, function() {\n\n            \t\tvar requestData    = responseData.data;\n            \t\t\n            \t \tscope.pageDetails = requestData;\n            \t});    \n\n     \t\t});\n        };\n        scope.getPageInfo();\n        \n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     CartController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('PublicApp.ShoppingCart.cart', [])\n        .controller('CartController',   [\n        \t'$rootScope',\n        \t'$scope',\n            'appServices',\n            '__DataStore',\n            '__Form',\n            '__Auth',\n            '__Utils',\n            '$compile',\n            CartController \n        ]);\n\n    /**\n      * CartController handle add pages form\n      *\n      * @inject $rootScope\n      * @inject $scope\n      * @inject appServices\n      * @inject __DataStore\n      * @inject __Form\n      * @inject \n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function CartController($rootScope, $scope, appServices, __DataStore, __Form, __Auth, __Utils, $compile) {\n    \t\n        var scope   \t= this;\n        \n        scope.userInfo  = __Auth.authInfo();\n        scope.isLoggedIn = __Auth.isLoggedIn();\n\n        //authorized\n        scope = __Form.setup(scope, 'update_cart_form', 'cartData', {\n        \tmodelUpdateWatcher : false\n        });\n\n        scope.cartDataStatus = false;\n\n        // If user is not logged in then open logged in dialog\n        scope.openLoginDialog = function() {\n            var responseData = {\n                'guestOrder' : true\n            };\n\n            $rootScope.$broadcast('lw-open-login-dialog', {'data' : responseData});\n        };\n\n        /**\n        * Open Discount details\n        *\n        * @return void\n        *------------------------------------------------------------------------ */\n        scope.openDiscountDetails = function() {\n            $('#lw-discount-detail-table').slideToggle();           \n        }\n\n      \t/**\n\t    * Take cart content action action\n\t    *\n\t    * @return void\n\t    *------------------------------------------------------------------------ */\n\n\t    scope.cartData = {};\n\t    scope.disabledStatus = false;\n\t    scope.dataExistStatus = false;\n\n\t    scope.getContentCart = function() {\n\n\t        __DataStore\n\t        \t.fetch('cart.get.data', {'fresh' : true})\n            \t.success(\n            \tfunction(responseData) {\n\n            \t\tappServices.processResponse(\n            \t\t\tresponseData,\n            \t\t\tnull, \n            \t\tfunction(reactionCode) {\n\n            \t\t\tvar requestData \t \t\t= responseData.data;\n            \t\t\tscope.anyCartItemInvalid \t= requestData.isValidItem; // any cart item invalid\n                        scope.cartDiscount          = requestData.orderDiscount; \n                        scope.cartTotalBeforeDiscount = requestData.cartTotalBeforeDiscount;\n            \t\t\tscope.cartData.items \t\t= requestData.cartItems;\n            \t\t\tscope.cartData.totalPrice  \t= requestData.total;\n            \t\t\tscope.cartItemStatus  \t\t= requestData.cartItemStatus;\n            \t\t\tscope.currentRoute\t\t\t= requestData.currentRoute;\n                        scope.isCurrencyMismatch    = requestData.isCurrencyMismatch;\n            \t\t\tscope   = __Form.updateModel(scope, scope.cartData);\n\n\n            \t\t\tif (scope.currentRoute == document.location.href) {\n\t        \t\t\t\tvar pageType\t \t= true;\n\t        \t\t\t} else {\n\t        \t\t\t\tvar pageType\t \t= false;\n\t        \t\t\t}\n\n                        if (!pageType) {\n                            _.defer(function () {\n                                var $discount = $compile(__Utils.template('#discountDetailsDialogTemplate', scope.cartDiscount))(scope);\n                                scope.discountDetailsHtml = $discount.html();\n                            });\n                        } else {\n                            var $discount = $compile(__Utils.template('#discountDetailsDialogTemplate', scope.cartDiscount))(scope);\n                            scope.discountDetailsHtml = $discount.html();\n                        }\n\t        \t\t\t\n\t        \t\t\tscope.pageType = pageType;\n\n            \t\t\tscope.data = {\n\t\t                  'routeStatus' : pageType\n\t\t                }\n\n            \t\t\tif (_.isEmpty(requestData.cartItems) || requestData.isValidItem == false) {\n            \t\t\t\tscope.disabledStatus = false;\n            \t\t\t} else {\n            \t\t\t\tscope.disabledStatus = true;\n            \t\t\t}\n\n            \t\t\tscope.cartDataStatus = true;\n            \t\t\t$scope.$emit('lw.current.route.name', scope.data);\n            \t\t});\n     \t\t});\n\t    };\n\t    scope.getContentCart();\n\n        /**\n        * Refresh product \n        *\n        * @return void\n        * \n        *------------------------------------------------------------------------ */\n        scope.refreshProduct = function(item) {\n            __DataStore.post('cart.refresh.product', item)\n                .success(function(responseData) {\n                    appServices.processResponse(responseData, null, function() {\n                        scope.getContentCart();\n                    });\n                });\n        };\n\n\t    /**\n\t    * update product cart quantity in cart\n\t    *\n\t    * @return void\n\t    * \n\t    *------------------------------------------------------------------------ */\n\t    var timer;\n\t    scope.updateQuantity = function(status, rowID, qty, newPrice) \n\t    {\t\n\t        // filter quantity\n\t        var filterQty = Number(Math.round(qty));\n\t        scope.cartData.items[rowID].qtyStatus  = false;\n            scope.cartQuantity = filterQty;\n\n\t        if (status == 'eventUp') {\n\n\t        \t\n\t            if (filterQty > 1) {\n\n\t            \tif (filterQty > 99999) {\n\t\t        \t\tscope.cartData.items[rowID].qty = filterQty;\n\t\t        \t};\n\t\t        \t\n\t            } else {\n\t            \t\n\t                scope.cartData.items[rowID].qty = 1;\n\t                scope.cartData.items[rowID].qtyStatus  = true;\n\t            }\n\n\t        } else {\n\n\t          if (status == true) {\n\t                scope.cartData.items[rowID].qty = filterQty + 1;\n\t            } else {\n\t                var newValue = (filterQty - 1);\n\t                  (newValue <= 0) \n\t                  ? scope.cartData.items[rowID].qty = 1 \n\t                  : scope.cartData.items[rowID].qty = newValue;\n\t          }\n\n\t        }\n\n\t        if (rowID) {\n\t        \t// clear time\n\t            window.clearTimeout(timer);\n\n\t            // in cart table change quantity fire request per 3 sec\n\t            timer = window.setTimeout(function(){\n\t            \t\n\t\t\t        __Form.process({\n\t\t\t        \t\t'apiURL'  : 'cart.update.qty',\n\t\t\t        \t\t'itemID'  : rowID\n\t\t\t        \t}, scope)\n\t\t\t        \t  .success(function(responseData) {\n\n\t\t\t                appServices.processResponse(\n\t\t\t                    responseData,\n\t\t\t                    null, \n\t\t\t                    function() {\n\n\t\t\t                    \tvar requestData = responseData.data;\n\n                                    scope.cartDiscount          = requestData.orderDiscount;\n                                    scope.cartTotalBeforeDiscount = requestData.cartTotalBeforeDiscount;\n                                    if (!scope.pageType) {\n                                        _.defer(function () {\n                                            var $discount = $compile(__Utils.template('#discountDetailsDialogTemplate', scope.cartDiscount))(scope);\n                                            scope.discountDetailsHtml = $discount.html();\n                                        });\n                                    } else {\n                                        var $discount = $compile(__Utils.template('#discountDetailsDialogTemplate', scope.cartDiscount))(scope);\n                                        scope.discountDetailsHtml = $discount.html();\n                                    }                                     \n\n\t\t\t                    \t// for new price scope\n\t\t\t                    \tscope.cartData.items[rowID].new_price    = requestData.new_price;\n\t\t\t                    \tscope.cartData.items[rowID].new_subTotal = requestData.new_subTotal;\n\t\t\t                    \tscope.cartData.items[rowID].qty          = requestData.qty;\n\t\t\t                    \tscope.cartData.items[rowID].price        = requestData.price;\n\t\t\t                    \tscope.cartData.totalPrice  = requestData.total;\n\t\t\t                    \tscope.cartData.items[rowID].qtyStatus  = true;\n\n\t\t\t                    \tscope.data = {\n\t\t\t\t\t                  'cart_string': requestData.cartItems,\n\t\t\t\t\t                  'status'     : true\n\t\t\t\t\t                }\n\t\t\t\t\t                scope.qtyStatus = true;\n\t\t\t\t\t               // scope.getContentCart();\n\t\t\t\t\t                $scope.$emit('lw.update.cart.string', scope.data);\n\t\t\t\t\t                $rootScope.$emit('remove.cart.row', {'status':true});\n\n\t\t\t\t\t\t\t\t\t$scope.$emit('lw.cart_update', {\n\t\t\t\t\t\t\t\t\t\t'qty' : requestData.qty,\n\t\t\t\t\t\t\t\t\t\t'pid' : scope.cartData.items[rowID].id,\n\t\t\t\t\t\t\t\t\t\t'action' : 1\n\t\t\t\t\t\t\t\t\t});\n\t\t\t                    }\n\t\t\t                );\n\t\t            });\n              \n\t\t        },500); \n            }\t\t\t\t\t\t\t\t\t\t\t\t\n\t    };\n\n\t    /**\n\t  \t  * Close dialog and return promise object\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\t  \t\n  \t  \tscope.cancel = function() {\n  \t  \t\t$scope.closeThisDialog();\n  \t  \t};\n\n  \t  \t/**\n\t  \t  * remove cart item action\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\t  \tscope.removeCartItem = function(itemID) {\n\n\t  \t\t// get data using angular $http.get() method\n\t\t\t__DataStore.post({\n\t\t          'apiURL' : 'cart.remove.item',\n\t\t          'itemID' : itemID\n\t\t\t}, scope).success(function(responseData) {\n\t\t\t  \n\t\t\t  \tappServices.processResponse(responseData, null,\n\t\t\t        function(reactionCode) {\n\n\t\t\t\t\t\t$scope.$emit('lw.cart_update', {\n\t\t\t\t\t\t\t'qty' : 0,\n\t\t\t\t\t\t\t'pid' : scope.cartData.items[itemID].id,\n\t\t\t\t\t\t\t'action' : 2\n\t\t\t\t\t\t});\n\n\t\t               \t$rootScope.$emit('changeItems',{\n\t\t                   status: true\n\t\t               \t});\n\n\t\t              \tscope.data = {\n\t\t\t                'cart_string': responseData.data.cartItems,\n\t\t\t                'status'     : true\n\t\t              \t}\n\n\t\t              \t$scope.$emit('lw.update.cart.string', scope.data);\n\n\t\t              \t$( '#rowid_'+itemID ).fadeOut('slow',function() {\n\t\t                    //$(this).remove();\n\t\t                });\n\n\t\t              \tscope.getContentCart();\n\t\t\t        }\n\t\t\t  \t); \n\t\t\t  \n\t\t\t});\n\t  \t};\n\n  \t  \t/**\n\t    * remove all items from cart item action\n\t    *\n\t    * @return void\n\t    *------------------------------------------------------------------------ */\n\t    scope.removeAllItemsItem = function() {\n\n\t\t\tvar removedPIds = [];\n\n\t\t\tif (!_.isEmpty()) {\n\n\t\t\t\t_.each(scope.cartData.items, function(value, key) {\n\t\t\t\t\tremovedPIds.push(value);\t\n\t\t\t\t});\n\t\t\t}\n\n\t        // get data using angular $http.get() method\n\t        __DataStore.post('cart.remove.all.items',scope).success(function(responseData) {\n\t        \t\n\t\t\t\tappServices.processResponse(responseData, null,\n                        function(reactionCode) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t$scope.$emit('lw.cart_update', {\n\t\t\t\t\t\t\t'action' : 3, 'removedPIds' : removedPIds \n\t\t\t\t\t\t});\n\t\t\t \t\t\t\n                    \tscope.cartData.items = '';\n\n\t\t\t\t\t\tscope.data = {\n\t\t                  'cart_string': responseData.data.cartItems,\n\t\t                  'status'     : true\n\t\t                }\n\n\t\t                $scope.$emit('lw.update.cart.string', scope.data);\n\n\t\t                $rootScope.$emit('remove.cart.row', {'status':true});\n\t\t                \n\t\t                $rootScope.$emit('changeItems',{\n\t\t\t \t\t\t\tstatus: true\n\t\t\t \t\t\t});\n\t\t\t \t\t\t\n                    \tscope.getContentCart();\n                    }\n                ); \n\t            \n    \t    });\n\n\t    };\n        \n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     OrderSummaryController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('PublicApp.ShoppingCart.orderSummary', [])\n        .controller('OrderSummaryController',   [\n        \t'$scope',\n            '__Form',\n            '__DataStore',\n            'appServices',\n            '__Utils',\n            '$rootScope',\n            'appNotify',\n            '__Auth',\n            '$compile',\n            OrderSummaryController \n        ])\n        .controller('AlertDialogController',   [\n            '$scope',\n            AlertDialogController \n        ]);\n\n    /**\n      * OrderSummaryController handle cart order\n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject __DataStore\n      * @inject appServices\n      * @inject __Utils\n      * @inject $rootScope\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function OrderSummaryController($scope, __Form, __DataStore,\n    \tappServices, __Utils, $rootScope, appNotify, __Auth, $compile) {\n    \t\n        var scope   \t\t\t= this;\n        \tscope \t\t\t\t= __Form.setup(scope, 'cart_order_form', 'orderData', {\n        \t\tmodelUpdateWatcher : false\n        \t});\n        \n            scope.isLoggedIn = __Auth.isLoggedIn();\n\n            $rootScope.$on('lw.auth.event.reset', function (event, authInfo) {\n                scope.isLoggedIn = authInfo.authorized;   \n            });\n          \n        \tscope.couponMessage \t\t= false;\n        \tscope.orderData.addressID   = null;\n        \tscope.orderData.addressID1  = null;\n        \tscope.pageStatus  \t\t\t= false;\n            scope.orderData.use_as_billing = true;\n            scope.orderProcessDisableStatus = true;\n            scope.userIsExist = false;\n            scope.shippingMethods = [];\n\n            scope.paymentMethodConfig = __globals.getSelectizeOptions({\n                maxItems        : 1,\n                searchField     : ['name'],\n                plugins         : ['remove_button'],\n            });\n\n            //order process wizard function\n            $(document).ready(function(){\n                $('#lw-smart-wizard').smartWizard({\n                    transitionEffect: 'fade',\n                });\n\n                // Initialize the leaveStep event\n              $(\"#lw-smart-wizard\").on(\"leaveStep\", function(e, anchorObject, stepNumber, stepDirection) {\n          \n                var lwValidationMsg = $('#lwValidationMsg');\n                var lwValidationCustomMsg = $('#lwValidationCustomMsg');\n                \n\t\t\t\t$('html').animate({\n\t\t\t\tscrollTop: $(\"#elementtoScrollToID\").offset().top\n\t\t\t\t}, 500);\n\n                \tif(stepDirection == 'forward'  && stepNumber == 1) {\n                        if (_.isUndefined(scope.orderData.shipping_method) && (scope.shippingMethods.length > 0 && !scope.orderSupportData.shipping.info)) {\n                            var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('Shipping Method'));\n                              \n                            appNotify.error(message);\n                                return false;\n                        }\n                        \n                \t\tif (_.isEmpty(scope.orderSupportData.cartItems)) {\n                           var message = lwValidationCustomMsg.attr('data-message').replace('__validationMessage__' , unescape('No products in cart'));\n                          \n                            appNotify.error(message);\n                            return false;\n                       }  \n                \t}\n\n                    if(stepDirection == 'forward'  && stepNumber == 0) {\n                        \n                        if (scope.orderSupportData.itemIsInvalid) {\n                            var message = lwValidationCustomMsg.attr('data-message').replace('__validationMessage__' , unescape('Product(s) not available in cart'));\n                          \n                            appNotify.error(message);\n                            return false;\n                        }\n\n                        if (scope.isLoggedIn) {\n                            if (_.isEmpty(scope.orderData.fullName)) {\n                               var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('full Name'));\n                              \n                                appNotify.error(message);\n                                return false;\n\n                              //shipping address field is required.\n                            } else if (_.isEmpty(scope.orderSupportData.shippingAddress)) {\n                               var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('shipping address'));\n                              \n                                appNotify.error(message);\n                                return false;\n                            }   \n\n                            //biiling address field is required.\n                            if (scope.orderSupportData.sameAddress == false) {\n                                if (_.isEmpty(scope.orderSupportData.billingAddress)) {\n                                 \n                                   var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('billing address'));\n                              \n                                    appNotify.error(message);\n                                    return false;\n                                }\n                            }\n                        } \n\n                        if (!scope.isLoggedIn) {\n                            //shipping address validation\n                            if (_.isEmpty(scope.orderData.fullName)) {\n                                var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('full Name'));\n                              \n                                appNotify.error(message);\n                                return false;\n\n                            } else if (_.isEmpty(scope.orderData.email)) {\n                                var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('email'));\n                              \n                                appNotify.error(message);\n                                return false;\n\n                            } else if (_.isEmpty(scope.orderData.shipping_address_type) && !_.isNumber(scope.orderData.shipping_address_type)) {\n                                var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('shipping type '));\n                              \n                                appNotify.error(message);\n                                return false;\n                                \n                            } else if ( _.isEmpty(scope.orderData.shipping_address_line_1)) {\n                                var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('shipping address 1'));\n                              \n                                appNotify.error(message);\n                                return false;\n\n                            } else if (_.isEmpty(scope.orderData.shipping_address_line_2)) {\n                                var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('shipping address 2'));\n                              \n                                appNotify.error(message);\n                                return false;\n\n                            } else if (_.isEmpty(scope.orderData.shipping_city)) {\n                                var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('shipping city'));\n                              \n                                appNotify.error(message);\n                                return false;\n\n                            } else if (_.isEmpty(scope.orderData.shipping_state)) {\n                                var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('shipping state'));\n                              \n                                appNotify.error(message);\n                                return false;\n\n                            } else if (_.isEmpty(scope.orderData.shipping_pin_code)) {\n                                var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('shipping pin code'));\n                              \n                                appNotify.error(message);\n                                return false;\n\n                            } else if (_.isEmpty(scope.orderData.shipping_country)) {\n                                var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('shipping country'));\n                              \n                                appNotify.error(message);\n                                return false;\n                            } \n\n                            //billing address validation\n                            if (scope.orderData.use_as_billing == false) {\n                                if (_.isEmpty(scope.orderData.shipping_address_type) && !_.isNumber(scope.orderData.billing_address_type)) {\n                                    var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('billing address type '));\n                                  \n                                    appNotify.error(message);\n                                    return false;\n                                    \n                                } else if (_.isEmpty(scope.orderData.billing_address_line_1)) {\n                                    var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('billing address 1'));\n                                  \n                                    appNotify.error(message);\n                                    return false;\n                                } else if (_.isEmpty(scope.orderData.billing_address_line_2)) {\n                                    var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('billing address 2'));\n                                  \n                                    appNotify.error(message);\n                                    return false;\n                                } else if (_.isEmpty(scope.orderData.billing_city)) {\n                                    var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('billing city'));\n                                  \n                                    appNotify.error(message);\n                                    return false;\n                                } else if (_.isEmpty(scope.orderData.billing_state)) {\n                                    var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('billing state'));\n                                  \n                                    appNotify.error(message);\n                                    return false;\n                                } else if (_.isEmpty(scope.orderData.billing_pin_code)) {\n                                    var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('billing pin code'));\n                                  \n                                    appNotify.error(message);\n                                    return false;\n                                } else if (_.isEmpty(scope.orderData.billing_country)) {\n                                    var message = lwValidationMsg.attr('data-message').replace('__validationMessage__' , unescape('billing country'));\n                                  \n                                    appNotify.error(message);\n                                    return false;\n                                } \n                            }\n                        }\n                    }\n                 //return confirm(\"Do you want to leave the step \"+stepNumber+\"?\");\n              });\n            });\n            //order process wizard function\n\n          \n        /**\n        * get cart order detail.\n        *\n        * @return void\n        *------------------------------------------------------------------------ */\n\n        scope.getCartOrderDetails = function(addressID, addressID1, couponCode, shippingCountryId, billingCountryId) {\n\n        \t//  Check if country is exist\n        \tif (!_.isUndefined(addressID)) {\n        \t\tscope.addressID = addressID;\n        \t} else {\n        \t\tscope.addressID = null;\n        \t}\n\n        \tif (!_.isUndefined(addressID1)) {\n        \t\tscope.addressID1 = addressID1;\n        \t} else {\n        \t\tscope.addressID1 = null;\n        \t}\n\n        \tif (!_.isUndefined(couponCode)) {\n        \t\tscope.couponCode = couponCode;\n        \t} else {\n        \t\tscope.couponCode = null;\n        \t}\n\n            if (!_.isUndefined(shippingCountryId) && !_.isEmpty(shippingCountryId)) {\n                scope.shippingCountryId = shippingCountryId;\n            } else {\n                scope.shippingCountryId = null;\n            }\n\n            if (!_.isUndefined(billingCountryId) && !_.isEmpty(billingCountryId)) {\n                scope.billingCountryId = billingCountryId;\n            } else {\n                scope.billingCountryId = null;\n            }\n\n            scope.countries_select_config = __globals.getSelectizeOptions({\n                valueField  : 'value',\n                labelField  : 'text',\n                searchField : [ 'text' ]  \n            });\n\n            scope.shippingCount = 0;\n      \n        \t__DataStore.fetch({\n                'apiURL'            : 'order.summary.details',\n                'addressID'         : scope.addressID,\n                'addressID1'        : scope.addressID1,\n                'couponCode'        : scope.couponCode,\n                'shippingCountryId' : scope.shippingCountryId,\n                'billingCountryId'  : scope.billingCountryId,\n                'useAsBilling'      : scope.orderData.use_as_billing,\n                'shippingMethod'    : !_.isUndefined(scope.orderData.shipping_method) ? scope.orderData.shipping_method : null\n            },{fresh:true}).success(\n            \tfunction(responseData) { \n            \t\tappServices.processResponse(\n            \t\t\tresponseData,\n            \t\t\tnull, \n            \t\tfunction(reactionCode) {\n            \t\t\t\n            \t\t\tvar requestData  = responseData.data.orderSummaryData.data;\n                        //scope.paymentMethod = __globals.generateKeyValueItems(requestData.paymentMethod);\n\n                        if (!scope.isLoggedIn) {\n                            scope.addressTypes = requestData.addressSupportData.addressTypes;\n                            scope.countries = requestData.addressSupportData.countries;\n                        }\n\n                        scope.shippingCount = requestData.shipping.shippingCount;\n\n                    \tscope.orderSupportData = {\n                            'paymentMethod'              : requestData.paymentMethod,\n                            'cartItems' \t \t\t\t : requestData.cartItems,\n                            'itemsCount'                 : requestData.itemsCount,\n                            'totalQuantity'              : requestData.totalQuantity,\n                    \t\t'itemIsInvalid' \t \t     : requestData.itemIsInvalid,\n                    \t\t'shippingAddress' \t\t\t : requestData.shippingAddress,\n                    \t\t'sameAddress' \t\t\t \t : requestData.sameAddress,\n                    \t\t'billingAddress' \t\t\t : requestData.billingAddress,\n                    \t\t'shipping' \t\t \t\t\t : requestData.shipping,\n                    \t\t'formatedCartTotalPrice'\t : requestData.total.base_price,\n                    \t\t'cartTotalPrice' \t\t\t : requestData.total.totalBasePrice,\n                    \t\t'currency' \t\t \t\t\t : requestData.total.currency,\n                    \t\t'afterAddShipingTotal' \t\t : requestData.shipping.totalPrice,\n                    \t\t'taxses' \t\t\t\t\t : requestData.taxses.info,\n                            'formatedTotalTaxAmount'     : requestData.taxses.formatedTotalTaxAmount,\n                    \t\t'afterAddTaxTotal' \t\t\t : requestData.taxses.totalPrice,\n                    \t\t'totalPayableAmount' \t\t : requestData.totalPayableAmount, \n                            'totalPayableAmountForStripe': requestData.totalPayableAmountForStripe,\n                             'totalPayableAmountForPaystack': requestData.totalPayableAmountForPaystack,\n                    \t\t'totalPayableAmountFormated' : requestData.totalPayableAmountFormated,\n                    \t\t'fullName' \t\t\t\t\t : requestData.user.fullName,\n                    \t\t'couponData' \t\t\t\t : !_.isEmpty(requestData.couponData)\n                    \t\t\t\t\t\t\t\t\t\t? requestData.couponData.couponData\n                    \t\t\t\t\t\t\t\t\t\t: null,\n                            'total'                      : requestData.total,\n                    \t\t'subtotalPrice' \t\t\t : requestData.shipping.formettedDiscountPrice,\n                    \t\t'checkoutMethod' \t\t\t : requestData.checkoutMethod,\n                    \t\t'checkoutMethodInfo' \t\t : requestData.checkoutMethodInfo,\n                            'cartDiscount'               : requestData.orderDiscount,\n                            'isCurrencyMismatch'         : requestData.isCurrencyMismatch,\n                            'cartTotalBeforeDiscount'    : requestData.cartTotalBeforeDiscount,\n                            'shipping_method'            : scope.orderData.shipping_method\n                    \t};\n                    \n                    \tvar shippingAddess = !_.isEmpty(scope.addressID) \n\t\t\t\t                    \t\t? scope.addressID \n\t\t\t\t                    \t\t: !_.isEmpty(scope.orderSupportData.shippingAddress) ? scope.orderSupportData.shippingAddress.id :null,\n\n\t\t\t\t        \tbillingAddess = !_.isEmpty(scope.addressID1) \n\t\t\t\t                    \t\t? scope.addressID \n\t\t\t\t                    \t\t: !_.isEmpty(scope.orderSupportData.billingAddress) ? scope.orderSupportData.billingAddress.id :null;\n\n                        scope.shippingMethods = requestData.shipping_methods;\n\n                        if (scope.shippingMethods.length == 1) {\n                            var shippingMethodId = scope.shippingMethods[0]['_id'];\n                            if (_.isUndefined(scope.orderData.shipping_method) && scope.shippingCount == 1) {\n                                _.delay(function() {\n                                    scope.getShipping(shippingMethodId);\n                                }, 500);\n                                scope.orderData.shipping_method = shippingMethodId;\n                            }\n                        }\n                     \n                    \tscope.orderData = {\n                    \t\t'fullName' \t\t\t  : (scope.isLoggedIn)\n                                                    ? requestData.user.fullName\n                                                    : scope.orderData.fullName,\n                            'userEmail'           : (scope.isLoggedIn)\n                                                    ? requestData.user.userEmail\n                                                    : scope.orderData.email,\n                            'shipping_country'    : (!_.isEmpty(scope.shippingCountryId))                     ? requestData.user.shippingCountry \n                                                     : '',\n                            'billing_country'     : (!_.isEmpty(scope.billingCountryId))                     ? requestData.user.billingCountry \n                                                     : '', //requestData.user.billingCountry,\n                            'stripeKey'           : requestData.stripeKey,\n                            'paystackPublicKey'   : requestData.paystackPublicKey,\n                            'razorpayKey'         : requestData.razorpayKey,\n                            'description'         : requestData.description,\n                    \t\t'addressID' \t\t  : shippingAddess,\n                            'businessEmail'       : requestData.businessEmail,\n\t\t\t\t\t\t\t'checkout_method'\t  : scope.orderData.checkout_method,\n\t\t\t\t\t\t\t'sameAddress'         : scope.orderSupportData.sameAddress,\n\t\t\t\t\t\t\t'addressID1'\t\t  : billingAddess,\n\t\t\t\t\t\t\t'totalPayableAmount'  : scope.orderSupportData.totalPayableAmount,\n                            'totalPayableAmountForStripe': requestData.totalPayableAmountForStripe,\n                            'totalPayableAmountForPaystack': requestData.totalPayableAmountForPaystack,\n                        \t'totalPayableAmountForRazorPay': requestData.totalPayableAmountForRazorPay,\n\t\t\t\t\t\t\t'couponCode' \t\t  : scope.couponCode,\n\t\t\t\t\t\t\t'currency' \t\t \t  : requestData.total.currency,\n                            'totalTaxAmount'      : requestData.taxses.totalTaxAmount,\n                            'totalShippingAmount' : requestData.shipping.totalShippingAmount,\n                            // This is for non logged in user\n                            'email'               : scope.orderData.email,\n                            'use_as_billing'      : requestData.user.useAsBilling,\n                            'shipping_address_type' : scope.orderData.shipping_address_type,\n                            'shipping_address_line_1' : scope.orderData.shipping_address_line_1,\n                            'shipping_address_line_2' : scope.orderData.shipping_address_line_2,\n                            'shipping_city'         : scope.orderData.shipping_city,\n                            'shipping_state'        : scope.orderData.shipping_state,\n                            'shipping_pin_code'     : scope.orderData.shipping_pin_code,\n                            'billing_address_type'  : scope.orderData.billing_address_type,\n                            'billing_address_line_1' : scope.orderData.billing_address_line_1,\n                            'billing_address_line_2' : scope.orderData.billing_address_line_2,\n                            'billing_city'          : scope.orderData.billing_city,\n                            'billing_state'         : scope.orderData.billing_state,\n                            'billing_pin_code'      : scope.orderData.billing_pin_code,\n                            'discountAddedPrice'    : requestData.shipping.discountAddedPrice,\n                            'orderDiscount'         : requestData.orderDiscount.discount,\n                            'shipping_method'       : scope.orderData.shipping_method\n                    \t};\n\n                        scope.couponData = !_.isEmpty(requestData.couponData)\n                                                            ? requestData.couponData\n                                                            : null;\n\n\n\t\t\t\t\t\tscope = __Form.updateModel(scope, scope.orderData);\n\n\t            \t\tscope.isValidItem  = requestData.isValidItem;\n                        \n                        if (_.isUndefined(scope.orderData.checkout_method)) {\n                            scope.disabledStatus  = false;\n                        }\n                        \n                        if (!scope.orderSupportData.shippingAddress\n                            || scope.orderSupportData.shipping.isShippable === false) {\n                            scope.disabledStatus  = false;\n                        }\n                        \n\t        \t\t\t// check if current route is order summary\n\t        \t\t\tif (requestData.orderRoute == document.location.href) {\n\t        \t\t\t\tscope.showCartBtn = true;\n\t        \t\t\t} else {\n\t        \t\t\t\tscope.showCartBtn = false;\n\t        \t\t\t}\n\n\t        \t\t\t// send object data to shopping cart button\n\t        \t\t\tscope.data = {\n\t\t                  'routeStatus' : scope.showCartBtn\n\t\t                };\n\n\t        \t\t\t$scope.$emit('lw.current.route.name', scope.data);\n\n                        var $discount = $compile(__Utils.template('#cartDiscountDetailsTemplate', scope.orderSupportData.cartDiscount))(scope);\n                        scope.cartDiscountDetailsHtml = $discount.html();\n\n\t                    scope.pageStatus  = true;\n\t                    \n            \t});\n     \t\t});\n        };\n        scope.getCartOrderDetails();\n\n      /**\n        * Terms and conditions dialog\n        *\n        * @return void\n        *-----------------------------------------------------------------------*/\n        scope.checkValidDataForSubmit = function() {\n            \n            if (scope.isValidItem\n                && scope.orderSupportData.shippingAddress\n                && scope.orderSupportData.shipping.isShippable) {\n                \n                if (!_.isEmpty(scope.couponData)) {\n                    if (scope.orderData.discountAddedPrice > 0) {\n                        scope.disabledStatus  = true;\n                    } else {\n                        scope.disabledStatus  = false;\n                    }\n                } else {\n                    scope.disabledStatus  = true;\n                }                \n            }\n            //scope.orderData.discountAddedPrice > 0\n\n            // Check if user is not logged in\n            if (!scope.isLoggedIn) {\n                if ((scope.isValidItem)\n                    && (scope.orderSupportData.shipping.isShippable)) {\n\n                    if (!_.isEmpty(scope.couponData)) {\n                        if (scope.orderData.discountAddedPrice > 0) {\n                            scope.orderProcessDisableStatus = false;\n                        } else {\n                            scope.orderProcessDisableStatus = true;\n                        }\n                    } else {\n                        scope.orderProcessDisableStatus = false;\n                    }\n                }\n            }\n        };\n\n        /*\n         when user is not logged in then call this function\n        -------------------------------------------------------------------------- */\n        scope.changeAddressType = function(value){\n\n            if (value) {\n                scope.orderData.billing_country = null;\n                scope.getCartOrderDetails(null, null, scope.couponCode, scope.orderData.shipping_country, scope.orderData.billing_country);\n            } else {\n                scope.getCartOrderDetails(null, null, scope.couponCode, scope.orderData.shipping_country, scope.orderData.billing_country);\n            }            \n        }\n\n        /*\n         when user is not logged in then call this function\n        -------------------------------------------------------------------------- */\n        scope.getShipping = function() {\n           \n            scope.getCartOrderDetails(scope.orderData.addressID, scope.orderData.addressID1, scope.couponCode, scope.shippingCountryId, scope.billingCountryId);         \n        }\n\n      /**\n        * apply coupon submit method\n        *\n        * @param string couponCode\n        * @param number orderTotalPrice\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        scope.orderData.coupon = '';\n        scope.newCouponCode = '';\n       \n        scope.applyCoupon = function(couponCode) {\n\n        \t__DataStore.post({\n                'apiURL' : 'order.coupon.apply'\n            }, scope).success(function(responseData) {\n\n\t\t\t\tappServices.processResponse(responseData, function(reactionCode) {\n\t\t\t\t\t\n                    scope.couponData \t   \t\t\t    = responseData.data.couponData;\n                    scope.couponStatus \t\t\t\t    = reactionCode;\n                    scope.invalidCouponCode\t\t\t    = responseData.data.couponCode;\n                    scope.couponMessage \t\t\t    = true;\n                    scope.orderData.subtotalPrice       = responseData.data.totalPrice;\n\n                    var shippingAddress = !_.isEmpty(scope.orderData.addressID) \n\t\t\t\t                    \t\t? scope.orderData.addressID\n\t\t\t\t                    \t\t: !_.isEmpty(scope.orderSupportData.shippingAddress) ? scope.orderSupportData.shippingAddress.id :null,\n\n\t\t\t\t\t\tbillingAddress  = !_.isEmpty(scope.orderData.addressID1) \n\t\t\t\t\t                    \t? scope.orderData.addressID1\n\t\t\t\t\t                    \t: !_.isEmpty(scope.orderSupportData.billingAddress) ? scope.orderSupportData.billingAddress.id :null;\n\n                    scope.getCartOrderDetails(shippingAddress, billingAddress, scope.couponData.couponCode, scope.shippingCountryId, scope.billingCountryId);\n\n                    scope.validCouponAmtMessage = __ngSupport.getText(\n                    \t\t\t\t\t\t\t __globals.getJSString('order_coupon_amount_text'), {\n                    \t\t\t\t\t\t\t \t'__amount__' : scope.couponData\n                    \t\t\t\t\t\t\t });\n\n                    scope.orderData.code = \"\";\n                    scope.checkValidDataForSubmit();\n             \n                    var $discount = $compile(__Utils.template('#couponDetailsTemplate', scope.couponData))(scope);\n                    scope.couponDetailsHtml = $discount.html(); \n            \t});\n\n            });\n\n        };\n\n        scope.disabledStatus = true;\n\n      /**\n\t\t* Remove coupon \n\t\t*\n\t\t* @return void\n\t\t*---------------------------------------------------------------- */\n\n        scope.removeCoupon = function() {\n\n        \t//scope.orderData.addressID  = scope.orderSupportData.shippingAddress.id;\n        \t//scope.orderData.addressID1 = scope.orderSupportData.billingAddress.id;\n\n        \tscope.getCartOrderDetails(scope.orderData.addressID, scope.orderData.addressID1, null, scope.shippingCountryId, scope.billingCountryId);\n        \tscope.couponMessage = false;\n        \tscope.couponStatus  = null;\n\n        \t// Check if discount amount exist \n        \t// if exist then remove discount amount\n        \tif (!_.isEmpty(scope.couponData.discountFormate)) {\n        \t\tscope.couponData.discountFormate = '';\n        \t}\n\n            scope.checkValidDataForSubmit\n        \t\n        }\n\n\n\n\t    /**\n\t    * remove invalid item in the cart\n\t    *\n\t    * @param {Number} itemID - cart item row id.\n\t    * @return void\n\t    * \n\t    *------------------------------------------------------------------------ */\n\n\t    scope.removeAllInvlidCartItem = function(status) {\n\n\t        // get data using angular $http.get() method\n\t        __DataStore.post('cart.remove.invalid.item', scope)\n\t        \t.success(function(responseData) {\n\t\t\t\t\tappServices.processResponse(responseData, null,\n                        function(reactionCode) {\n\n                        \tscope.data = {\n\t\t\t                  'cart_string': responseData.data.cartItems,\n\t\t\t                  'status'     : true\n\t\t\t                }\n\n\t\t\t                $scope.$emit('lw.update.cart.string', scope.data);\n\t\t\t                $rootScope.$emit('remove.cart.row', {'status':true});\n\t\t\t\t \t\t\tscope.getCartOrderDetails(scope.orderData.addressID, scope.orderData.addressID1, scope.couponCode, scope.shippingCountryId, scope.billingCountryId);\n\t\t\t\t\t\t}\n                \t); \n\t            \n    \t    });\n\n\t    };\n\n\t    /**\n\t    * call function if any items is invalid on process time \n\t    *\n\t    * @param object param 1 type \n\t    *\n\t    * @return void\n\t    *---------------------------------------------------------------- */\n\t    \n\t    scope.updatOrderSummary = function(responseData) {\n            \t\t\t\n\t\t\tvar requestData  = responseData.orderSummaryData;\n\n            scope.shippingCount = requestData.shipping.shippingCount;\n\t\t\n        \tscope.orderSupportData = {\n                'paymentMethod'              : requestData.paymentMethod,\n                'cartItems' \t \t\t\t : requestData.cartItems,\n                'itemsCount'                 : requestData.itemsCount,\n                'totalQuantity'              : requestData.totalQuantity,\n        \t\t'itemIsInvalid' \t \t     : requestData.itemIsInvalid,\n        \t\t'shippingAddress' \t\t\t : requestData.shippingAddress,\n        \t\t'sameAddress' \t\t\t \t : requestData.sameAddress,\n                'businessEmail'              : requestData.businessEmail,\n        \t\t'billingAddress' \t\t\t : requestData.billingAddress,\n        \t\t'shipping' \t\t \t\t\t : requestData.shipping.info,\n        \t\t'formatedCartTotalPrice'\t : requestData.total.base_price,\n                'formatedTotalTaxAmount'     : requestData.taxses.formatedTotalTaxAmount,\n        \t\t'cartTotalPrice' \t\t\t : requestData.total.totalBasePrice,\n        \t\t'currency' \t\t \t\t\t : requestData.total.currency,\n        \t\t'afterAddShipingTotal' \t\t : requestData.shipping.totalPrice,\n        \t\t'taxses' \t\t\t\t\t : requestData.taxses.info,\n        \t\t'afterAddTaxTotal' \t\t\t : requestData.taxses.totalPrice,\n        \t\t'totalPayableAmount' \t\t : requestData.totalPayableAmount,\n        \t\t'totalPayableAmountFormated' : requestData.totalPayableAmountFormated,\n        \t\t'fullName' \t\t\t\t\t : requestData.user.fullName,\n                'total'                      : requestData.total,\n        \t\t'couponData' \t\t\t\t : !_.isEmpty(requestData.couponData)\n        \t\t\t\t\t\t\t\t\t\t? requestData.couponData.couponData\n        \t\t\t\t\t\t\t\t\t\t: null,\n        \t\t'subtotalPrice' \t\t\t : requestData.shipping.formettedDiscountPrice,\n        \t\t'checkoutMethod' \t\t\t : requestData.checkoutMethod,\n                'checkoutMethodInfo' \t\t : requestData.checkoutMethodInfo,\n                'shipping_method'       : scope.orderData.shipping_method\n        \t};\n\n        \tvar shippingAddress = !_.isEmpty(scope.orderData.addressID) \n\t\t\t\t                    \t\t? scope.orderData.addressID\n\t\t\t\t                    \t\t: !_.isEmpty(scope.orderSupportData.shippingAddress) ? scope.orderSupportData.shippingAddress.id :null,\n\n\t\t\t\tbillingAddress  = !_.isEmpty(scope.orderData.addressID1) \n\t\t\t                    \t? scope.orderData.addressID1\n\t\t\t                    \t: !_.isEmpty(scope.orderSupportData.billingAddress) ? scope.orderSupportData.billingAddress.id :null;\n\n        \tscope.orderData = {\n        \t\t'fullName' \t\t\t : (scope.isLoggedIn)\n                                        ? requestData.user.fullName\n                                        : scope.orderData.fullName,\n                'userEmail'          : (scope.isLoggedIn)\n                                        ? requestData.user.userEmail\n                                        : scope.orderData.email,\n                'description'         : requestData.description,\n                'razorpayKey'          : requestData.razorpayKey,\n                'stripeKey'          : requestData.stripeKey,\n                'paystackPublicKey'  : requestData.paystackPublicKey,\n        \t\t'addressID' \t\t : shippingAddress,\n\t\t\t\t'checkout_method'\t : scope.orderData.checkout_method,\n\t\t\t\t'sameAddress'        : scope.orderSupportData.sameAddress,\n                'businessEmail'      : requestData.businessEmail,\n\t\t\t\t'addressID1'\t\t : billingAddress,\n\t\t\t\t'totalPayableAmount' : scope.orderSupportData.totalPayableAmount,\n                'totalPayableAmountForStripe': requestData.totalPayableAmountForStripe,\n                'totalPayableAmountForPaystack': requestData.totalPayableAmountForPaystack,\n                'totalPayableAmountForRazorPay' : requestData.totalPayableAmountForRazorPay,\n\t\t\t\t'couponCode' \t\t : scope.couponCode,\n\t\t\t\t'currency' \t\t \t : requestData.total.currency,\n                'totalTaxAmount'     : requestData.taxses.totalTaxAmount,\n                'totalShippingAmount': requestData.shipping.totalShippingAmount,\n                // This is for non logged in user\n                'email'               : scope.orderData.email,\n                'use_as_billing'      : requestData.user.useAsBilling,\n                'shipping_address_type' : scope.orderData.shipping_address_type,\n                'shipping_address_line_1' : scope.orderData.shipping_address_line_1,\n                'shipping_address_line_2' : scope.orderData.shipping_address_line_2,\n                'shipping_city'         : scope.orderData.shipping_city,\n                'shipping_state'        : scope.orderData.shipping_state,\n                'shipping_pin_code'     : scope.orderData.shipping_pin_code,\n                'billing_address_type'  : scope.orderData.billing_address_type,\n                'billing_address_line_1' : scope.orderData.billing_address_line_1,\n                'billing_address_line_2' : scope.orderData.billing_address_line_2,\n                'billing_city'          : scope.orderData.billing_city,\n                'billing_state'         : scope.orderData.billing_state,\n                'billing_pin_code'      : scope.orderData.billing_pin_code,\n                'discountAddedPrice'    : requestData.shipping.discountAddedPrice,\n                'orderDiscount'         : requestData.orderDiscount.discount,\n                'shipping_method'       : scope.orderData.shipping_method\n        \t};\n        \t\n\t\t\tscope = __Form.updateModel(scope, scope.orderData);\n\n    \t\tif (requestData.isValidItem == false) {\n                scope.isValidItem = false;\n    \t\t\tscope.disabledStatus = false;\n                scope.orderProcessDisableStatus = true;\n\t\t\t} else {\n\t\t\t\tscope.disabledStatus = true;\n                scope.orderProcessDisableStatus = false;\n\t\t\t}\n\n\t\t\t// check if current route is order summary\n\t\t\tif (requestData.orderRoute == document.location.href) {\n\t\t\t\tscope.showCartBtn = true;\n\t\t\t} else {\n\t\t\t\tscope.showCartBtn = false;\n\t\t\t}\n\n\t\t\t// send object data to shopping cart button\n\t\t\tscope.data = {\n              'routeStatus' : scope.showCartBtn\n            };\n\n\t\t\t$scope.$emit('lw.current.route.name', scope.data);\n\n            scope.pageStatus  = true;\n\t                    \n        };\n\n\t  /**\n\t\t* order submit process\n\t\t*\n\t\t* @return void\n\t\t*---------------------------------------------------------------- */\n\t\tscope.orderData.totalDiscountAmount = 0;\n\n        scope.handleOrderValidationErrors = function(reaction, responseData) {\n\n            // call function when any invalid data to display to user\n            if (reaction == 3) {\n                //scope.updatOrderSummary(responseData.data);\n                \n                appServices.showDialog(responseData,\n                {   \n                    templateUrl : __globals.getTemplateURL('order.user.alert-dialog')\n                },\n                function(promiseObj) {\n\n                    if (_.has(promiseObj, 'value') \n                        && promiseObj.value.is_submit_order === true) {\n\n                        //scope.updatOrderSummary(responseData.data);\n                        var shippingAddress = !_.isEmpty(scope.orderData.addressID) \n                            ? scope.orderData.addressID\n                            : !_.isEmpty(scope.orderSupportData.shippingAddress) ? scope.orderSupportData.shippingAddress.id :null,\n\n                            billingAddress  = !_.isEmpty(scope.orderData.addressID1) \n                                                ? scope.orderData.addressID1\n                                                : !_.isEmpty(scope.orderSupportData.billingAddress) ? scope.orderSupportData.billingAddress.id :null;\n                        var couponCode = _.isEmpty(scope.couponData) ? null : scope.couponData.couponCode                       \n                        scope.getCartOrderDetails(shippingAddress, billingAddress, couponCode, scope.shippingCountryId, scope.billingCountryId);\n\n                    } else {\n\n                        __globals.redirectBrowser(__Utils.apiURL('cart.view')); \n\n                    }\n\n                   \n\n                });\n            }\n\n        };\n\n\t\tscope.orderSubmit  =  function() \n\t\t{    \n            __globals.showProcessingDialog();\n\n            if (_.has(scope, 'couponData') \n                && !_.isUndefined(scope.couponData)\n                && !_.isEmpty(scope.couponData)) {\n                scope.orderData.totalDiscountAmount = scope.couponData.discount;\n            }\n\n            if (scope.cart_order_form.$valid == false \n                && scope.orderData.checkout_method !== 6) {\n                __globals.hideProcessingDialog();\n            } else if (scope.cart_order_form.$valid == false \n                && scope.orderData.checkout_method === 6) {\n                __globals.hideProcessingDialog();\n                appNotify.error(__globals.getJSString('order_error_messages'));\n            }\n\n             if(scope.orderData.checkout_method == 11) {\n \n                if (scope.cart_order_form.$valid) {\n                \tvar options = {\n\t\t\t\t\t    \"key\": scope.orderData.razorpayKey,\n\t\t\t\t\t    \"amount\": scope.orderData.totalPayableAmountForRazorPay.toFixed(2), // 2000 paise = INR 20\n                        \"currency\": scope.orderData.currency,\n\t\t\t\t\t    \"name\": scope.orderData.fullName,\n\t\t\t\t\t    //\"description\": \"Purchase Description\",\n \t\t\t\t\t    \"handler\": function (response){\n \t\t\t\t\t\t\t\n \t\t\t\t \t\t\tif (!_.isEmpty(response.razorpay_payment_id)) {\n\n\t\t                        // Token is ready lets go and charge the card\n\t\t                        __DataStore.post('order.razorpay.checkout', _.assign({\n\t\t                            'razorpay_payment_id' : response.razorpay_payment_id,\n\t\t                            'checkout_method' : 11,                                \n\t\t                        }, scope.orderData), scope)\n\t\t                        .success(function(responseData) {  \n \n\t\t                            dataRecieved = responseData.data;\n\n\n\t\t                            appServices.processResponse(responseData, function(reaction) {\n\n                                         // check response has other error\n                                        if((responseData.reaction !== 1) && dataRecieved.orderPaymentToken) {\n                                                __globals.redirectBrowser(__Utils.apiURL('order.payment_cancelled', {\n                                                'orderToken' : dataRecieved.orderPaymentToken\n                                            }));\n                                        } else if(responseData.reaction !== 1) {\n\n                                            scope.handleOrderValidationErrors(reaction, responseData);\n                                            \n                                            if (reaction == 2 && _.has(responseData.data, 'orderSummaryData')) {\n                                                scope.updatOrderSummary(responseData.data);\n                                            } else if (reaction == 9) {\n                                                $rootScope.$broadcast('lw-open-login-dialog', {'data' : ''});\n                                            } \n                                        }\n  \n\t\t                            }, function() {\n\t\t                                // if found ok redirect customer to thank you page\n\t\t                                __globals.redirectBrowser(__Utils.apiURL('order.thank_you_razorpay', {\n\t\t                                    'orderToken' : dataRecieved.razorpayChargeRequest.orderPaymentToken\n\t\t                                }));\n\n\t\t                            }); \n\n\t\t                        });\n\t\t\t\t \t\t\t}\n\t\t\t\t\t    },\n\t\t\t\t\t    \"prefill\": {\n\t\t\t\t\t        \"name\": scope.orderData.fullName,\n\t\t\t\t\t        \"email\": scope.orderData.userEmail\n\t\t\t\t\t    },\n\t\t\t\t\t    //\"notes\": {\n\t\t\t\t\t        //\"address\": \"fweffwfwf\"\n\t\t\t\t\t    //},\n\t\t\t\t\t    \"theme\": {\n\t\t\t\t\t        \"color\": \"#050505\"\n\t\t\t\t\t    },\n                        \"modal\": {\n                            \"ondismiss\": function(e){}\n                        }\n\t\t\t\t\t};\n                    __globals.hideProcessingDialog();\n\t\t\t\t\tvar rzp1 = new Razorpay(options);\n\t\t\t\t\trzp1.open();\n\t\t\t\t    // e.preventDefault();\n\t\t\t\t\t// document.getElementById('rzp-button1').onclick = function(e){\n\t\t\t\t\t//     rzp1.open();\n\t\t\t\t\t//     e.preventDefault();\n\t\t\t\t\t// }\n                } \n\n            } else if(scope.orderData.checkout_method == 6) {\n\n                if (scope.cart_order_form.$valid) {\n                var orderData   = scope.orderData, \n                    dataRecieved = null,\n                    tokenRecieved = null,\n                    handler = StripeCheckout.configure({\n                    key: orderData.stripeKey,\n                     // image: 'https://stripe.com/img/documentation/checkout/marketplace.png',\n                    locale: 'auto',\n                    description: orderData.description,\n                    email: orderData.userEmail,\n                    amount: orderData.totalPayableAmountForStripe,\n                    currency: orderData.currency,\n                    allowRememberMe: false,\n                    token: function(token) {\n\n                        tokenRecieved = token.id;\n\n                        // Token is ready lets go and charge the card\n                        __DataStore.post('order.stripe.checkout', _.assign({\n                            'stripeToken' : token.id,\n                            'checkout_method' : 6,                                \n                        }, scope.orderData), scope)\n                        .success(function(responseData) {  \n                            dataRecieved = responseData.data;\n                           \n                            appServices.processResponse(responseData, function(reaction) {\n                          \n                                // check response has other error\n                                if((responseData.reaction !== 1) && dataRecieved.orderPaymentToken) { \n                                   \n                                        __globals.redirectBrowser(__Utils.apiURL('order.payment_cancelled', {\n                                        'orderToken' : dataRecieved.orderPaymentToken\n                                    })+'?message='+dataRecieved.message);\n                                        \n                                } else if(responseData.reaction !== 1) {\n\n                                    scope.handleOrderValidationErrors(reaction, responseData);\n                                    \n                                    if (reaction == 2 && _.has(responseData.data, 'orderSummaryData')) {\n                                        scope.updatOrderSummary(responseData.data);\n                                    } else if (reaction == 9) {\n                                        $rootScope.$broadcast('lw-open-login-dialog', {'data' : ''});\n                                    } \n                                }\n                                \n                            }, function() {\n                                // if found ok redirect customer to thank you page\n                                __globals.redirectBrowser(__Utils.apiURL('order.thank_you_stripe', {\n                                    'orderToken' : dataRecieved.orderPaymentToken\n                                }));\n\n                            }); \n\n                        });\n\n                      },\n                      opened: function() {\n                        __globals.hideProcessingDialog();\n                      },\n                      closed: function() {\n\n                        // check if opted token if then show process dialog\n                        if(tokenRecieved) {\n                            __globals.showProcessingDialog();\n                        } else if(!_.isEmpty(dataRecieved) && dataRecieved.orderPaymentToken) {\n\n                            __globals.redirectBrowser(__Utils.apiURL('order.payment_cancelled', {\n                                'orderToken' : dataRecieved.orderPaymentToken\n                            }));\n                        }\n                      }\n                    }).open();\n\n                    // Close Checkout on page navigation:\n                    window.addEventListener('popstate', function() {\n                    if (handler) {\n                        handler.close();\n                    }\n                    });\n                } \n\n            } else if (scope.orderData.checkout_method == 20) {\n\n                if (scope.cart_order_form.$valid) {\n                    var handler = PaystackPop.setup({\n                        key: scope.orderData.paystackPublicKey,\n                        email: scope.orderData.businessEmail,\n                        amount: scope.orderData.totalPayableAmountForPaystack,\n                        currency:  scope.orderData.currency,\n                        callback: function(response){\n                            var paystackRefrenceId = response.reference;\n                            if (!_.isEmpty(paystackRefrenceId)) {\n\n                                // Token is ready lets go and charge the card\n                                __DataStore.post('order.paystack.checkout', _.assign({\n                                    'paystack_refrence_id' : paystackRefrenceId,\n                                    'checkout_method' : 20,                                \n                                }, scope.orderData), scope)\n                                .success(function(responseData) {  \n \n                                    dataRecieved = responseData.data;\n\n                                    appServices.processResponse(responseData, function(reaction) {\n                                        // check response has other error\n                                        if((responseData.reaction !== 1) && dataRecieved.orderPaymentToken) {\n                                                __globals.redirectBrowser(__Utils.apiURL('order.payment_cancelled', {\n                                                'orderToken' : dataRecieved.orderPaymentToken\n                                            })+'?message='+dataRecieved.message);\n                                                \n                                        } else if(responseData.reaction !== 1) {\n\n                                            scope.handleOrderValidationErrors(reaction, responseData);\n                                            \n                                            if (reaction == 2 && _.has(responseData.data, 'orderSummaryData')) {\n                                                scope.updatOrderSummary(responseData.data);\n                                            } else if (reaction == 9) {\n                                                $rootScope.$broadcast('lw-open-login-dialog', {'data' : ''});\n                                            } \n                                        }\n                                    }, function() {\n                                        // if found ok redirect customer to thank you page\n                                        __globals.redirectBrowser(__Utils.apiURL('order.thank_you_paystack', {\n                                            'orderToken' : dataRecieved.orderPaymentToken\n                                        }));\n\n                                    }); \n\n                                });\n                            }\n                        },\n                        onClose: function(){\n                        }\n                    });\n                    handler.openIframe();\n                    __globals.hideProcessingDialog();\n                }\n            } else { // NOT Stripe\n                if (scope.orderData.checkout_method == 14) { \n                    scope.orderData.card_number = String(scope.orderData.card_number);\n                }\n           \n                __Form.process('order.process', scope)\n                .success(function(responseData) {\n                 \n                    appServices.processResponse(responseData, {\n                        then: function(reaction) {\n                            \n                            if (reaction == 3 && !_.has(responseData.data, 'validation')) {\n\n                                scope.handleOrderValidationErrors(reaction, responseData);\n                            }                          \n                            \n                            if (reaction == 2 && _.has(responseData.data, 'orderSummaryData') ) {\n                                scope.updatOrderSummary(responseData.data);\n                            } else if (reaction == 9) {\n                                $rootScope.$broadcast('lw-open-login-dialog', {'data' : ''});\n                            }       \n                        }\n\n                    }, function() {\n                        \n                        if (responseData.reaction == 1 && (responseData.data.ckMethod == 1)) {\n                            __globals.redirectBrowser(__Utils.apiURL('order.paypal.checkout', {\n                                'orderUID' : responseData.data.orderID\n                            }));\n\n                        } else if (responseData.reaction == 1 && (responseData.data.ckMethod == 14) || (responseData.data.ckMethod == 15)) {\n                           \n                            $('body').html(responseData.data.htmlContent);\n\n                            // document.downloadForm.submit()\n                            // _.delay(function () {\n                            //     $('.lw-loader-container form').submit();\n                            // }, 300);\n\n                        } else if (responseData.reaction == 1 && (responseData.data.ckMethod == 16) || (responseData.data.ckMethod == 17)) {\n                           \n                           __globals.redirectBrowser(__Utils.apiURL('order.paytm.checkout', {\n                                'orderUID' : responseData.data.orderID\n                            }));\n\n                        } else if (responseData.reaction == 1 && (responseData.data.ckMethod == 18) || (responseData.data.ckMethod == 19)) {\n                           \n                           __globals.redirectBrowser(__Utils.apiURL('order.instamojo.checkout', {\n                                'orderUID' : responseData.data.orderID\n                            }));\n\n                        } else if (responseData.reaction == 1) { \n\n                            if (scope.isLoggedIn) {\n                                __globals.redirectBrowser(__Utils.apiURL('my_order.details', {\n                                    'orderUID' : responseData.data.orderID\n                                }));\n                            } else if(!scope.isLoggedIn) {\n                                __globals.redirectBrowser(__Utils.apiURL('order.guest_order_success'));\n                            }\n                            \n                        }     \n                    });   \n                     \n\n            });\n\n            }\n\n            \n\t\t};\n\n\n\t  /**\n        * shipping & billing address not same\n        *\n        * @param sameAddress.\n        * @param shippingAddress\n        *\n        * @return void\n        *\n        *------------------------------------------------------------------------ */\n        scope.sameAsAddress = function(sameAddress, shippingAddress) {\n        \t\n        \tif (sameAddress == false) {\n\n        \t\tscope.orderSupportData.billingAddress = '';\n        \t\tscope.orderData.addressID1 = '';\n                \n        \t} else {\n\n                scope.getCartOrderDetails(\n                            scope.orderData.addressID, \n                            scope.orderData.addressID, \n                            scope.couponCode);\n            }\n\n        \tscope.orderData.sameAddress = sameAddress;\n        };\n\n       \n\n\t  /**\n\t    * if user click on change address then open dialog\n\t    *\n\t    * @param {boolean} sameAddress\n\t    * @param {string}  addressType\n\t    * @param {string}  countryCode\n\t    *\n\t    * @return void\n\t    *---------------------------------------------------------------- */\n\t    \n\t    scope.openAddressListDialog  =  function(sameAddress, addressType) \n\t    {  \n\t    \tappServices.showDialog(scope,\n\t        {\t\n\t            templateUrl : __globals.getTemplateURL('address.list-dialog')\n\t        },\n\t        function(promiseObj) {\n\t        \t\n\t        \tif (!_.isUndefined(promiseObj.value) && (promiseObj.value != '$closeButton')) {\n\n\t        \t\tvar selectedaddress = promiseObj.value.selectedAddress;\n\n\t        \t\tif (sameAddress == false && addressType == 'billing') {\n\n\t\t        \t\tscope.orderSupportData.billingAddress   = selectedaddress;\n\t\t        \t\tscope.orderData.addressID1   \t\t    = selectedaddress.id;\n\t\t        \t\tscope.orderSupportData.sameAddress  \t= false;\n                        scope.getCartOrderDetails(scope.orderData.addressID, scope.orderData.addressID1, scope.couponCode);\n\n\t\t        \t} else if(sameAddress == true && addressType == 'billing') {\n\n\t\t        \t\tscope.orderSupportData.shippingAddress = selectedaddress;\n\t\t        \t\tscope.orderSupportData.billingAddress  = selectedaddress;\n\t\t        \t\tscope.orderData.addressID   \t\t   = selectedaddress.id;\n\t\t        \t\tscope.orderData.addressID1   \t\t   = selectedaddress.id;\n\n\n\t\t        \t} else if(sameAddress == true && addressType == 'shipping') {\n\n\t\t\t\t\t\tscope.orderSupportData.shippingAddress = selectedaddress;\n\t\t        \t\tscope.orderSupportData.billingAddress  = selectedaddress;\n\t\t        \t\tscope.orderData.addressID   \t\t   = selectedaddress.id;\n\t\t        \t\tscope.orderData.addressID1   \t\t   = selectedaddress.id;\n\t\t        \t\tscope.getCartOrderDetails(scope.orderData.addressID, scope.orderData.addressID1, scope.couponCode);\n\n                        if (scope.orderSupportData.shipping.isShippable) {\n                            scope.disabledStatus  = true;\n                        }\n\n\t\t        \t} else if(sameAddress == false && addressType == 'shipping') {\n\n\t\t\t\t\t\tscope.orderSupportData.shippingAddress = selectedaddress;\n\t\t\t\t\t\tscope.orderData.addressID   \t\t   = selectedaddress.id;\n\t\t\t\t\t\t\n\t\t\t\t\t\tscope.orderData.addressID1 = _.isEmpty(scope.orderData.addressID1) ? scope.orderSupportData.billingAddress.id : scope.orderData.addressID1;\n                        \n                        if (scope.orderSupportData.shipping.isShippable) {\n                            scope.disabledStatus  = true;\n                        }\n\t\t        \t\t\n\n\t\t        \t\tif (!_.isEmpty(scope.orderData.addressID) && scope.orderData.addressID === scope.orderData.addressID1) {\n\t\t        \t\t\tscope.orderData.addressID1  = selectedaddress.id;\n\t\t        \t\t\tscope.orderSupportData.sameAddress  = true;\n\t\t        \t\t}\n\n\t\t\t\t\t\tscope.getCartOrderDetails(\n\t\t\t\t\t\t\tscope.orderData.addressID, \n\t\t\t\t\t\t\tscope.orderData.addressID1, \n\t\t\t\t\t\t\tscope.couponCode);\n\n\t\t        \t} \n\t        \t}\n\n                scope.checkValidDataForSubmit();\n\t        });\n\n\t    };\n\n\n        /**\n\t    * remove cart item action\n\t    *\n\t    * @param {Number} itemID - cart item row id.\n\t    * @return void\n\t    * \n\t    *------------------------------------------------------------------------ */\n\n\t    scope.removeCartItem = function(itemID) {\n\n\t        // get data using angular $http.get() method\n\t        __DataStore.post({\n\t        \t'apiURL' : 'cart.remove.item',\n                'itemID' : itemID\n\t        }, scope).success(function(responseData) {\n\n\t\t\t\tappServices.processResponse(responseData, null,\n                    function(reactionCode) {\n\t\t\t \t\t\t\n\t\t\t \t\t\tscope.data = {\n\t\t                  'cart_string': responseData.data.cartItems,\n\t\t                  'status'     : true\n\t\t                }\n\n\t\t                $scope.$emit('lw.update.cart.string', scope.data);\n\n\t\t\t \t\t\t$('#rowid_'+itemID).fadeOut('slow',function() {\n                            $(this).remove();\n                        }); \n                        scope.getCartOrderDetails();\n\n                    }\n                ); \n\t            \n    \t    });\n\n\t    };\n\n\t    /**\n\t    * remove cart item of product out of stock and invalid\n\t    *\n\t    * @param {Number} itemID - cart item row id.\n\t    * @return void\n\t    * \n\t    *------------------------------------------------------------------------ */\n\n\t    scope.removeAllCartItem = function(status) {\n\n\t        // get data using angular $http.get() method\n\t        __DataStore.post('cart.remove.invalid.item', scope)\n\t        \t.success(function(responseData) {\n\t\t\t\t\tappServices.processResponse(responseData, null,\n                        function(reactionCode) {\n\n                        \tscope.data = {\n\t\t\t                  'cart_string': responseData.data.cartItems,\n\t\t\t                  'status'     : true\n\t\t\t                }\n\n\t\t\t                $scope.$emit('lw.update.cart.string', scope.data);\n\t\t\t\t \t\t\tscope.getCartOrderDetails();\n\t\t\t\t\t\t}\n                \t); \n\t            \n    \t    });\n\n\t    };\n\n        /**\n        * Check user email \n        *\n        * @return void\n        * \n        *------------------------------------------------------------------------ */\n        scope.checkUserEmail = function() {\n\n            if (!_.isEmpty(scope.orderData.email)) {\n                __DataStore.fetch({\n                    'apiURL' : 'order.check.user_email',\n                    'email'  : scope.orderData.email,\n                    'couponId' : (!_.isEmpty(scope.couponData))\n                                    ? scope.couponData.couponID\n                                    : null\n                }).success(function(responseData) {\n                    var requestData = responseData.data;\n                    scope.invalidCouponMessage = requestData.message;\n                    \n                    if (_.isNull(requestData.userId)) {\n                        scope.userIsExist = false;\n                    } else {\n                        scope.userIsExist = true;\n                    }\n\n                    scope.orderData.guestLoggedInUserId = requestData.userId;\n                    appServices.processResponse(responseData, {\n                        then : function(reaction) {\n                            if (reaction == 2) {\n                                appServices.showDialog(responseData, \n                                {\n                                    templateUrl : __globals.getTemplateURL('order.user.alert-dialog')\n                                }, \n                                function(promiseObj) {\n                                    scope.removeCoupon();\n                                });\n                            }\n                        }\n                    }, function (reaction) {\n                         \n                    });\n                });\n            }\n        };\n\n        // If user is not logged in then open logged in dialog\n        scope.openLoginDialog = function() {\n            var responseData = {\n                'guestOrder' : false\n            };\n\n            $rootScope.$broadcast('lw-open-login-dialog', {'data' : responseData});\n        };\n\n        /**\n        * Refresh product \n        *\n        * @return void\n        * \n        *------------------------------------------------------------------------ */\n        scope.refreshProduct = function(item) {\n            __DataStore.post('cart.refresh.product', item)\n                .success(function(responseData) {\n                    appServices.processResponse(responseData, null, function() {\n                        scope.getCartOrderDetails(scope.orderData.addressID, scope.orderData.addressID1, scope.couponCode, scope.shippingCountryId, scope.billingCountryId);\n                    });\n                });\n        };\n\n        /**\n        * Open Discount details\n        *\n        * @return void\n        *------------------------------------------------------------------------ */\n        scope.openDiscountDetails = function() {\n            $('#lw-discount-detail-table').slideToggle();           \n        };\n\t \n    };\n\n\n    function AlertDialogController($scope) {\n\n        var scope            = this;\n            scope.pageStatus = false;\n\n            if ($scope.ngDialogData) {\n                scope.message    = $scope.ngDialogData.data.message;\n                scope.pageStatus = true;\n            }\n            \n      /**\n        * Response for submit order\n        *\n        * @return void\n        *-----------------------------------------------------------------------*/\n    \n        scope.yesSubmitIt = function()\n        {\n            $scope.closeThisDialog({'is_submit_order' : true})\n        }; \n    \n        \n        /**\n        * Close this dialog\n        *\n        * @return void\n        *-----------------------------------------------------------------------*/\n    \n        scope.closeDialog = function()\n        {\n            $scope.closeThisDialog({'is_submit_order' : false})\n        }; \n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ProductAllReviewsController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.allProductReviews', [])\n        .controller('ProductAllReviewsController',   [\n            '$scope', \n            '__DataStore',\n            'appServices',\n            '$stateParams',\n            '__Utils',\n            ProductAllReviewsController \n        ]);\n\n    /**\n      * ProductAllReviewsController for manage product image list\n      *\n      * @inject $scope\n      * @inject __DataStore\n      * @inject appServices\n      * @inject $stateParams\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ProductAllReviewsController($scope, __DataStore, appServices,\n     $stateParams, __Utils) {\n\n        var scope       = this;\n        scope.productID  = __globals.getAppJSItem('productID');\n        \n        // product reviews pagination data start\n        this.showPaginationData = function(page) {\n                var requestURL = '';\n                \n            if (!_.isEmpty(page) && page.search(\"http\") != -1) {\n                \n                requestURL = page;\n                \n            } else {\n\n                requestURL = __Utils.apiURL('product.user.all_review.paginate_data', \n                    {\n                        'productId' : scope.productID\n                    }\n                );\n                \n                var pageUrl = \"\";\n\n                if (page != undefined) {\n                  pageUrl = \"?page=\"+page;\n                }\n\n                requestURL = requestURL+pageUrl;\n\n            }\n            \n            \n            __DataStore.fetch(requestURL, {'fresh' : true})\n                .success(function(responseData) {\n                    var requestData = responseData.data;\n                \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n                        scope.productReviews = requestData.productReviewData;\n                          \n                        scope.paginationLinks = requestData.paginationLinks;\n                        \n                        if (scope.paginationLinks) {\n                            var $paginationLinksElement = $(\".lw-pagination-container\").html(scope.paginationLinks);\n                        }\n                }); \n            });\n            \n        };\n            \n        this.showPaginationData('');\n        $(\".lw-pagination-container\").on('click', 'a', function(event) {\n            event.preventDefault();\n            var $this = $(this),\n                url   = $this.attr('href');\n            scope.showPaginationData(url);\n        });\n        // product reviews pagination data stop\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ProductAllQuestionsController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.allProductQuestions', [])\n        .controller('ProductAllQuestionsController',   [\n            '$scope', \n            '__DataStore',\n            'appServices',\n            '$stateParams',\n            '__Utils',\n            ProductAllQuestionsController \n        ]);\n\n    /**\n      * ProductAllQuestionsController for manage product image list\n      *\n      * @inject $scope\n      * @inject __DataStore\n      * @inject appServices\n      * @inject $stateParams\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ProductAllQuestionsController($scope, __DataStore, appServices,\n     $stateParams, __Utils) {\n\n        var scope       = this;\n        scope.productID  = __globals.getAppJSItem('productID');\n        \n        // product reviews pagination data start\n        this.showPaginationData = function(page) {\n                var requestURL = '';\n                \n            if (!_.isEmpty(page) && page.search(\"http\") != -1) {\n                \n                requestURL = page;\n                \n            } else {\n\n                requestURL = __Utils.apiURL('product.user.question.paginate_data', \n                    {\n                        'productId' : scope.productID\n                    }\n                );\n                \n                var pageUrl = \"\";\n\n                if (page != undefined) {\n                  pageUrl = \"?page=\"+page;\n                }\n\n                requestURL = requestURL+pageUrl;\n\n            }\n            \n            \n            __DataStore.fetch(requestURL, {'fresh' : true})\n                .success(function(responseData) {\n                    var requestData = responseData.data;\n                \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n                        scope.productQuestions = requestData.productQuestionData;\n                        \n                        scope.paginationLinks = requestData.paginationLinks;\n                        \n                        if (scope.paginationLinks) {\n                            var $paginationLinksElement = $(\".lw-pagination-container\").html(scope.paginationLinks);\n                        }\n                }); \n            });\n            \n        };\n            \n        this.showPaginationData('');\n        $(\".lw-pagination-container\").on('click', 'a', function(event) {\n            event.preventDefault();\n            var $this = $(this),\n                url   = $this.attr('href');\n            scope.showPaginationData(url);\n        });\n        // product reviews pagination data stop\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     MyOrderListController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('PublicApp.Order.list', [])\n        .controller('MyOrderListController',   [\n            '$scope', \n            '__DataStore',\n            'appServices',\n            '$stateParams',\n            '__Auth',\n            '__Utils',\n            MyOrderListController \n        ]);\n\n    /**\n      * MyOrderListController for manage product list\n      *\n      * @inject $scope\n      * @inject __DataStore\n      * @inject appServices\n      * @inject $stateParams\n      * @inject __Auth\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function MyOrderListController($scope, __DataStore, appServices, $stateParams, __Auth, __Utils) {\n\t \t\n\t \tvar scope   = this;\n\n\t\tvar dtCartOrderColumnsData = [\n            {\n                \"name\"      : \"order_uid\",\n                \"orderable\" : true,\n                \"template\"  : \"#orderColumnIdTemplate\"\n            },\n            {\n                \"name\"      : \"status\",\n                \"orderable\" : true,\n                \"template\"  : \"#orderStatusColumnIdTemplate\"\n            },\n            {\n                \"name\"      : \"creation_date\",\n                \"orderable\" : true,\n                \"template\"  : \"#orderColumnTimeTemplate\"\n            },\n            {\n                \"name\"      : null,\n                \"template\"  : \"#orderActionColumnTemplate\"\n            }\n        ],\n        tabs    = {\n            'activeTab'    : {\n                id      : 'activeTabList',\n                status  : 1\n            },\n            'cancelled'    : {\n                id      : 'cancelledTabList',\n                status  : 3\n            },\n            'completed'    : {\n                id      : 'completedTabList',\n                status  : 6\n            }\n        };\n\n        // Fired when clicking on tab    \n    \t$('#adminOrderList a').click(function (e) {\n\n        \te.preventDefault();\n        \t\n            var $this       = $(this),\n                tabName     = $this.attr('aria-controls'),\n                selectedTab = tabs[tabName];\n\n            if (!_.isEmpty(selectedTab)) {\n                $(this).tab('show')\n                scope.getOrders(selectedTab.id, selectedTab.status);\n            }\n\n    \t});\n\n\n        /**\n          * get orders list\n          *\n          * @param number tableID\n          * @param number status\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.getOrders   = function(tableID, status) {\n\n            // destroy if existing instatnce available\n            if (scope.cartOrderListDataTable) {\n                scope.cartOrderListDataTable.destroy();\n            }\n\n            scope.cartOrderListDataTable = __DataStore.dataTable('#'+tableID, {\n\t            url : {\n\t                'apiURL' : 'cart.get.orders.data',\n\t                'status' : status\n\t            },\n\t            dtOptions   : {\n\t                \"searching\" : true,\n\t                \"order\"     : [[ 2, \"desc\" ]],\n\t                \"columnDefs\": [\n\t\t\t            {\n\t\t\t                \"targets\": [1],\n\t\t\t                \"searchable\": false\n\t\t\t            }\n\t\t\t        ]\n\t            },\n\t            columnsData : dtCartOrderColumnsData, \n\t            scope       : $scope\n\t        });\n        };\n\n       // scope.getOrders('activeTabList', 1);\n        var selectedTab = $('.nav li a[href=\"#activeTab\"]');\n\n        selectedTab.triggerHandler('click', true);\n\n        /*\n\t     Reload current datatable\n\t    -------------------------------------------------------------------- */\n\t    \n\t    scope.reloadDT = function () {\n\t        __DataStore.reloadDT(scope.cartOrderListDataTable);\n\t    };\n\n        /**\n          * log dialog\n          *\n          * @param number orderID\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.logDialog = function(orderID) {\n\n            __DataStore.fetch({\n                    'apiURL'    : 'order.log.dialog',\n                    'orderID'   :  orderID\n                })\n                .success(function(responseData) {\n                \n                    appServices.processResponse(responseData, null, function() {\n                    \t\n                    \tif (responseData.reaction == 9) {\n\t                    \twindow.location = __Utils.apiURL('user.login');\n\t                    }\n\n                        var requestData = responseData.data;\n\n                        appServices.showDialog({\n                            'order'         : requestData.cartOrder,\n                            'orderLog'      : requestData.orderLog\n                        },\n                        {\n                            templateUrl : __globals.getTemplateURL(\n                                'order.user.log'\n                            )\n                        },\n                        function(promiseObj) {});\n\n                    });    \n\n                });\n\n        };\n\n\n\n        /**\n          * update order dialog\n          * \n          * @param orderID\n          * @param isAdmin\n          * \n          * @return void\n          *---------------------------------------------------------------- */\n        scope.cancelDialog = function(orderID) {\n            \n            __DataStore.fetch({\n                    'apiURL'    : 'cart.order.cancel',\n                    'orderID'   :  orderID\n                })\n                .success(function(responseData) {\n                \n                   appServices.processResponse(responseData, null, function() {\n\n                        var requestData = responseData.data;\n                        \n                        appServices.showDialog({\n                            orderData : requestData.order\n                        },\n                        {\n                            templateUrl : __globals.getTemplateURL(\n                                'order.user.cancel'\n                            )\n                        },\n                        function(promiseObj) {\n\n                            // Check if category updated\n                            if (_.has(promiseObj.value, 'order_updated') \n                                && promiseObj.value.order_updated === true) {\n                                scope.reloadDT();\n                            }\n\n                        });\n\n                    });    \n\n                });\n\n        };\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     MyOrderDetailsController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('PublicApp.Order.details', [])\n        .controller('MyOrderDetailsController',   [\n            '$scope', \n            '__Form',\n            '__Utils',\n            'appServices',\n            '__DataStore',\n            MyOrderDetailsController \n        ]);\n\n    /**\n      * MyOrderDetailsController for manage product list\n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject __Utils\n      * \n      * @return void\n      *-------------------------------------------------------- */\n            \n\n    function MyOrderDetailsController($scope, __Form, __Utils, appServices, __DataStore) {\n\n       \tvar scope   \t\t \t\t= this;\n       \tscope.pageStatus \t \t\t= false;\n\n        // Get order details\n        scope.orderData   \t\t= __globals.getAppJSItem('orderDetails');\n\n        var requestedData \t\t= scope.orderData.data;\n        scope.billingAddress   \t= requestedData.address.billingAddress;\n        scope.shippingAddress   = requestedData.address.shippingAddress;\n        scope.sameAddress   \t= requestedData.address.sameAddress;\n\n        scope.user\t\t\t\t= requestedData.user;\n        scope.order\t\t\t\t= requestedData.order;\n        scope.orderStatus       = requestedData.order.orderStatus;\n        scope.orderProducts\t\t= requestedData.orderProducts;\n        scope.coupon\t\t\t= requestedData.coupon;\n        scope.taxes\t\t\t\t= requestedData.taxes;\n        scope.shipping\t\t\t= requestedData.shipping;\n\n        scope.pageStatus = true; \n\n\t  /**\n\t\t* If user order payment is pending then he will allow to update\n\t\t* his payment using PayPal\n\t\t*\n\t\t* @param string orderUID\n\t\t*\n\t\t* @return void\n\t\t*---------------------------------------------------------------- */\n\n        scope.updatePayment = function(orderUID) {\n\n        \t__globals.redirectBrowser(__Utils.apiURL('order.paypal.checkout', {\n                \t'orderUID' : orderUID\n                }));\n        };\n\n        /**\n          * Contact to store/Admin Dialog\n          * \n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.contactStoreDialog = function(orderUID) {\n        \t\n            appServices.showDialog({\n\n            \torderUID : orderUID\n            },\n            {\n                templateUrl : __globals.getTemplateURL('order.user.contact-store')\n            },\n            function(promiseObj) {});\n        };\n\n        /**\n          * Delete address \n          *\n          * @param number orderId\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.cancelOrder = function(orderId) {\n\n            __globals.showConfirmation({\n                text                : __globals.getJSString('order_cancellation_text'),\n                confirmButtonText   : __globals.getJSString('cancel_action_button_text')\n            }, \n            function() {\n\n                __DataStore.post({\n                    'apiURL'    : 'order.user.cancellation_process',\n                    'orderID'   : orderId,\n                })\n                .success(function(responseData) {\n\n                    var message = responseData.data.message;\n                   \n                    appServices.processResponse(responseData, {\n                            error : function(data) {\n                                __globals.showConfirmation({\n                                    title   : __globals.getJSString('cancel_error_title'),\n                                    text    : message,\n                                    type    : 'error'\n                                });\n\n                            }\n                        },\n                        function(data) {\n\n                            __globals.showConfirmation({\n                                title   : __globals.getJSString('cancel_success_title'),\n                                text    : message,\n                                type    : 'success'\n                            });\n                            \n                            scope.order.allowOrderCancellation = false;\n                            scope.order.orderStatus = 3;\n                            scope.order.formatedOrderStatus = 'Cancelled';\n\n                        }\n                    );    \n\n                });\n\n            });\n\n        };\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     MyOrderLogController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('PublicApp.Order.log', [])\n        .controller('MyOrderLogController',   [\n            '$scope', \n            '__Form',\n            MyOrderLogController \n        ]);\n\n    /**\n      * MyOrderLogController for manage product list\n      *\n      * @inject $scope\n      * @inject __Form\n      * \n      * @return void\n      *-------------------------------------------------------- */\n            \n\n    function MyOrderLogController($scope, __Form) {\n\n       var scope   = this;\n\n        scope = __Form.setup(scope, 'cart_order_log_dialog_form', 'cartData', {\n            secured : true\n        });\n            \n        scope.ngDialogData   = $scope.ngDialogData;\n        scope.order          = scope.ngDialogData.order;\n        scope.orderLog       = scope.ngDialogData.orderLog;\n            \n        /**\n          * Close dialog and return promise object\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.close = function() {\n            $scope.closeThisDialog();\n        }\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     CancelOrderController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('PublicApp.Order.cancel', [])\n        .controller('CancelMyOrderController',   [\n            '$scope', \n            '__Form',\n            'appServices',\n            CancelMyOrderController \n        ]);\n\n    /**\n      * CancelMyOrderController for update order status\n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n            \n\n    function CancelMyOrderController($scope, __Form, appServices) {\n\n       var scope  = this;\n\t\t\tscope = __Form.setup(scope, 'form_order_update', 'orderData');\n\t\t\tscope.ngDialogData = $scope.ngDialogData;\n\t\t\tscope = __Form.updateModel(scope, scope.orderData);\n\n\n            /**\n\t\t  \t  * process update order\n\t\t  \t  *\n\t\t  \t  * @return void\n\t\t  \t  *---------------------------------------------------------------- */\n\t\t\tscope.cancel = function() {\n\n\t\t \t\t// post form data\n\t\t \t\t__Form.process({\n\t\t\t\t\t\t'apiURL'   :'cart.order.cancel.process',\n\t\t\t\t\t\t'orderID'  : scope.ngDialogData.orderData._id \n\t\t\t\t\t}, scope ).success( function( responseData ) {\n\t\t\t      \t\t\n\t\t\t\t\tappServices.processResponse(responseData, null, function(reactionCode) {\n\n\t\t                $scope.closeThisDialog( { order_updated : true } );\n\n\t\t            });\n\n\t\t\t    });\n\n\t\t  \t};\n\n\t\t\t/**\n\t\t  \t  * Close dialog and return promise object\n\t\t  \t  *\n\t\t  \t  * @return void\n\t\t  \t  *---------------------------------------------------------------- */\n\t  \t  \tscope.closeDialog = function() {\n\t  \t  \t\t$scope.closeThisDialog();\n\t  \t  \t};\n\n    };\n\n})();","/*!\n *  Engine      : PublicAddressEngine\n *  Component   : Address\n----------------------------------------------------------------------------- */\n\n(function( window, angular, undefined ) {\n\n\t'use strict';\n\t\n\t/*\n\t  Public Address Engine\n\t  -------------------------------------------------------------------------- */\n\t\n\tangular.module('PublicApp.address', \t\t[])\n\n\t\t/**\n    \t  * AddressListController for list of address\n    \t  *\n    \t  * @inject __Utils\n    \t  * @inject __Form\n    \t  * @inject $state\n    \t  * @inject appServices\n    \t  * \n    \t  * @return void\n    \t *-------------------------------------------------------- */\n\n\t\t.controller('AddressListController', [ \n            '__Utils',\n            '__Form',\n            '$state',\n            'appServices',\n            '$scope',\n            '__Auth',\n            '__DataStore',\n\t\t\t'$rootScope',\n            function (__Utils, __Form , $state, appServices, $scope, __Auth, __DataStore, $rootScope) {\n\n            \tvar scope   \t\t= this;\n        \t\tscope \t\t\t\t= __Form.setup(scope, 'user_address_form', 'addressData');\n            \tscope.pageStatus    = false;\n\t\t\t\tscope.addressData   = {};\n\t\t\t\t\n\t\t\t\t/**\n\t\t          * get List of addresses\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\t\t\t\tscope.getAddresses = function() {\n\n\t\t        \t__DataStore.fetch('user.get.addresses')\n\t\t\t        \t.success(function(responseData) {\n\n\t\t        \t\tappServices.processResponse(responseData, null, \n\t\t        \t\tfunction() {\n\t\t\t        \t\tvar requestData \t= responseData.data;\n\t\t\t        \t\tscope.addressData \t= requestData;\n\t\t\t        \t\tscope.pageStatus    = true;\n\n\t\t\t\t\t\t});\n\t\t \t\t\t});\n\t\t        };\n\t\t        scope.getAddresses();\n\n\t\t        /**\n\t\t          * Delete address \n\t\t          *\n\t\t          * @param number addressID\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\t\t        scope.delete = function(addressID) {\n\n\t\t            __globals.showConfirmation({\n\t\t                text                : __globals.getJSString('address_delete_text'),\n\t\t                confirmButtonText   : __globals.getJSString('delete_action_button_text')\n\t\t            }, \n\t\t            function() {\n\n\t\t                __DataStore.post({\n\t\t                    'apiURL'    : 'user.address.delete',\n\t\t                    'addressID' : addressID,\n\t\t                })\n\t\t                .success(function(responseData) {\n\n\t\t                \tvar message = responseData.data.message;\n\t\t                   \n\t\t                    appServices.processResponse(responseData, {\n\t\t                            error : function(data) {\n\t\t                                __globals.showConfirmation({\n\t\t                                    title   : __globals.getJSString('confirm_error_title'),\n\t\t                                    text    : message,\n\t\t                                    type    : 'error'\n\t\t                                });\n\n\t\t                            }\n\t\t                        },\n\t\t                        function(data) {\n\n\t\t                            __globals.showConfirmation({\n\t\t                                title   : __globals.getJSString('confirm_error_title'),\n\t\t                                text    : message,\n\t\t                                type    : 'success'\n\t\t                            });\n\t\t                            \n\t\t                            // use for slowly remove address from list\n\t\t                            $('#address_'+addressID).fadeOut('slow',function() {\n\t\t                                $(this).remove();\n\t\t                            \tscope.getAddresses();\n\t\t                            });\n\n\t\t                        }\n\t\t                    );    \n\n\t\t                });\n\n\t\t            });\n\n\t\t        };\n\n\t\t\t\t$rootScope.$on('lw.login-success', function(event, data) {\n\t\t\t\t\t\n\t\t\t\t\tif (data) {\n\t\t\t\t\t\tscope.getAddresses();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t        /**\n\t\t          * address add dialog\n\t\t          *\n\t\t          * @param number pageType\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\t\t        scope.addAddressDialog = function() {\n\t\t\t\t\t\n\t\t        \tscope.addressType = scope.addressData.addressType;\n\t\t        \tscope.countries   = scope.addressData.countries.data;\n\t\t        \tappServices.showDialog(scope,\n\t\t\t        {\t\n\t\t\t            templateUrl : __globals.getTemplateURL(\n\t\t\t                'address.add'\n\t\t\t            )\n\t\t\t        }, function(promiseObj) {\n\n\t\t\t        \tif (_.has(promiseObj.value, 'address_added') \n\t\t                    && promiseObj.value.address_added === true) {\n\t\t\t\t\t\t\tscope.getAddresses();\n\t\t                }\n\n\t\t        \t});\n\t\t        }\n\n\n\t\t        /**\n\t\t          * address edit dialog\n\t\t          *\n\t\t          * @param number addressID\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\t\t        scope.editAddressDialog = function(addressID) {\n\n\t\t        \t__DataStore.fetch({\n\t\t\t\t        \t'apiURL'\t: 'user.fetch.address.support.data',\n\t\t\t\t        \t'addressID'\t: addressID\n\t\t\t\t        })\n\t            \t   .success(function(responseData) {\n\t            \t   \t\n\t            \t   \tscope.countries \t= responseData.data.countries;\n\t            \t   \tscope.address \t\t= responseData.data.address;\n\t            \t   \tscope.addressType \t= responseData.data.addressType;\n\n\t\t\t            \tappServices.showDialog(scope,\n\t\t\t                {\t\n\t\t\t                    templateUrl : __globals.getTemplateURL(\n\t\t\t                            'address.edit'\n\t\t\t                        )\n\t\t\t                }, function(promiseObj) {\n\n\t\t\t\t        \tif (_.has(promiseObj.value, 'address_updated') \n\t\t\t                    && promiseObj.value.address_updated == true) {\n\t\t\t\t        \t\tscope.getAddresses();\n\t\t\t                }\n\n\t\t        \t\t});\n\n\t     \t\t\t});\n\t\t        }\n\n\t\t        /**\n\t\t          * address list dialog\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\t\t        scope.addressListDialog = function() {\n\n\t\t        \t__DataStore.fetch({'apiURL' : 'get.addresses.for.order'})\n\t\t    \t   .success(function(responseData) {\n\t\t    \t   \t\n\t\t    \t   \t\tvar requestData   = responseData.data;\n\t\t    \t   \t\tscope.addressData = requestData;\n\n\t\t\t\t    \tappServices.showDialog(requestData,\n\t\t\t\t        {\t\n\t\t\t\t            templateUrl : __globals.getTemplateURL(\n\t\t\t\t                    'address.list-dialog'\n\t\t\t\t                )\n\t\t\t\t        },\n\t\t\t\t        function(promiseObj) {\n\n\t\t\t\t        });\n\t\t\t       });\n\t\t        }\n\n\t\t        /**\n\t\t          * Close dialog\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\n\t\t    \tscope.close = function() {\n\t\t            $scope.closeThisDialog();\n\t\t        }\n\n\t\t        /**\n\t\t          * Select address for order\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\n\t\t    \tscope.selectAddressForOrder = function(addressData, selectedAddress) {\n\n\t\t            // get address for order by address ID\n\t\t            if (!_.isEmpty(addressData)) {\n\n\t\t\t            _.forEach(addressData, function(address, key) {\n\n\t\t\t            \t// take primary address\n\t\t\t           \t\tif (address.id == selectedAddress) { \n\n\t\t            \t\t\t$scope.closeThisDialog({'selectedAddress': address});\n\n\t\t\t           \t\t}\n\n\t\t\t            });\n\n\t\t\t        } else {\n\n\t\t\t        \t$scope.closeThisDialog({'selectedAddress': '' });\n\t\t\t        }\n\t\t        }\n\n\t\t        /**\n\t\t          * Make primary address\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\n\t\t    \tscope.makePrimaryAddress = function(addressID) {\n\n\t\t    \t\t__Form.process({\n\t\t\t                'apiURL'    :'user.get primary.address',\n\t\t\t                'addressID' : addressID\n\t\t\t            }, scope)\n\t\t                .success(function(responseData) {\n\n\t\t                    var message \t= responseData.data.message;\n\n\t\t                \tappServices.processResponse(responseData, null,\n\t\t                        function() {\n\n\t\t                        \tscope.getAddresses();\n\t\t                        }\n\t\t                    );  \n\t\t                \n\t\t            });\n\t\t    \t} \n\n\t\t\t}\n    \t])\n\n\n    \t/**\n    \t  * AddressAddController for add new address\n    \t  *\n    \t  * @inject $scope\n    \t  * @inject __Form\n    \t  * @inject appServices\n    \t  * \n    \t  * @return void\n    \t *-------------------------------------------------------- */\n\n\t\t.controller('AddressAddController', [ \n            '$scope',\n            '__Auth',\n            '__Form',\n            'appServices',\n            function ($scope, __Auth, __Form, appServices) {\n            \t\n            \tvar scope   = this;\n\t\t        scope = __Form.setup(scope, 'user_address_form', 'userData', {\n\t\t            secured : false\n\t\t        });\n\n\t\t        scope.ngDialogData = $scope.ngDialogData.addressData;\n\n\t\t        // Get address type\n\t\t        scope.addressType = scope.ngDialogData.addressType;\n\t\t        \n\t\t        \n\t\t        // Get countries List\n\t\t        scope.countriesCollection     = scope.ngDialogData.countries.data;\n\t\t        scope.countries \t\t\t  = scope.countriesCollection.countries;\n\n\t\t        scope.countries_select_config = __globals.getSelectizeOptions({\n\t\t            valueField  : 'value',\n\t\t            labelField  : 'text',\n\t\t            searchField : [ 'text' ]  \n\t\t        });\n\n\n\t\t        /**\n\t\t          * Submit address form action\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\n\t\t        scope.submit = function() {\n\n\t\t            __Form.process('user.address.process', scope)\n\n\t\t                .success(function(responseData) {\n\n\t\t                    appServices.processResponse(responseData, null, function() {\n\n\t\t\t                \t$scope.closeThisDialog({address_added : true})\n\n\t\t               \t\t});\n\t\t            });\n\n\t\t        };\n\n\t            /**\n\t\t          * Close dialog\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\n\t\t    \tscope.close = function() {\n\t\t            $scope.closeThisDialog();\n\t\t        }\n            }\n        ])\n\n\n        /**\n    \t  * AddressEditController for add new address\n    \t  *\n    \t  * @inject $scope\n    \t  * @inject __Form\n    \t  * @inject appServices\n    \t  * \n    \t  * @return void\n    \t *-------------------------------------------------------- */\n\n\t\t.controller('AddressEditController', [ \n            '$scope',\n            '__Form',\n            'appServices',\n            function ($scope, __Form, appServices) {\n            \t\n            \tvar scope = this;\n        \t\tscope     = __Form.setup(scope, 'user_address_edit_form', 'addressData');\n\n\t\t        // Get address type\n\t\t        scope.addressType \t\t  = $scope.ngDialogData.addressType;\n\t\t        \n\t\t        // Get address Data\n\t\t         scope.addressData \t\t  = $scope.ngDialogData.address;\n\n\t\t        // Get all countries\n\t\t        scope.countriesCollection = $scope.ngDialogData.countries.data;\n\t\t        scope.countries \t\t  = scope.countriesCollection.countries;\n\n\t\t        scope.countries_select_config = __globals.getSelectizeOptions({\n\t\t            valueField  : 'value',\n\t\t            labelField  : 'text',\n\t\t            searchField : [ 'text' ]  \n\t\t        });\n\n\n\t\t        /**\n\t\t          * update form action\n\t\t          *\n\t\t          * @return void\n\t\t          *------------------------------------------------------------------------ */\n\n\t\t        scope.update = function() {\n\t\t            \n\t\t             scope.updateURL = {\n\t\t                'apiURL'    :'user.address.update',\n\t\t                'addressID' : scope.addressData.id\n\t\t            };\n\n\t\t            // post form data\n\t\t            __Form.process(scope.updateURL, scope )\n\n\t\t                .success( function( responseData ) {\n\n\t\t                appServices.processResponse(responseData, null, function(reactionCode) {\n\t\t                 \n\t\t                    $scope.closeThisDialog({address_updated : true})\n\t\t                    \n\t\t                });\n\n\t\t            });\n\n\t\t        };\n\n\t            /**\n\t\t          * Close dialog\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\n\t\t    \tscope.close = function() {\n\t\t            $scope.closeThisDialog();\n\t\t        }\n            }\n        ])\n\n\n\n\n})( window, window.angular );","(function() {\n'use strict';\n    \n    /*\n      Login Controller Module\n      -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.login', [])\n\n        /**\n          * UserLoginController - login a user in application\n          *\n          * @inject __Form\n          * @inject __Auth\n          * @inject appServices\n          * @inject __Utils\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserLoginController',   [\n            '__Form', \n            '__Auth', \n            'appServices',\n            '__Utils',\n\t\t\t'$scope',\n            function (__Form, __Auth, appServices, __Utils, $scope) {\n\n                var scope   = this;\n\n                scope = __Form.setup(scope, 'form_user_login', 'loginData', {\n                    secured : true\n                });\n\n                scope.show_captcha      = false;\n                scope.request_completed = false;\n                scope.guestLogin        = false;\n                scope.site_key          = __globals.getAppImmutables('recaptcha_site_key');\n\n                if (_.has($scope.ngDialogData, 'guestOrder')\n                    && $scope.ngDialogData.guestOrder == true) {\n                    scope.guestLogin = true;\n                }\n\n                /**\n                  * Get login attempts for this client ip\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                __Form.fetch('user.login.attempts').success(function(responseData) {\n                    \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\t\t\t\t\t\tscope.show_captcha      = responseData.data.show_captcha;\n                        scope.selectUser        = responseData.data.selectUser;\n                        scope.request_completed = true;\n                        \n                    });                   \n                });\n\n                \n                scope.addUserData = function(value) {\n                    \n                    if (value) {\n                        scope.loginData.email    = scope.selectUser[value]['email'];\n                        scope.loginData.password = scope.selectUser[value]['password']\n                    }\n                };\n                \n                /**\n                  * Fetch captch url\n                  *\n                  * @return string\n                  *---------------------------------------------------------------- */\n\n                scope.getCaptchaURL = function() {\n                    return __Utils.apiURL('security.captcha')+'?ver='+Math.random();\n                };\n\n                /**\n                  * Refresh captch \n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.refreshCaptcha = function() {\n                    scope.captchaURL = scope.getCaptchaURL();\n                };\n\n                scope.captchaURL  = scope.getCaptchaURL();\n\n                /**\n                * Submit login form action\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n\n                scope.submit = function() {\n\n                    scope.isInActive = false;\n\n                    __Form.process('user.login', scope).success(function(responseData) {\n\n                        var requestData = responseData.data;\n       \n                        appServices.processResponse(responseData, {\n                                error : function() {\n\n                                   // scope.isInActive = requestData.isInActive;\n\n                                    scope.show_captcha = requestData.show_captcha;\n\n                                    // reset password field\n                                    scope[scope.ngFormModelName].password   = \"\";\n\n                                    // Check if show captcha exist then refresh captcha\n                                    if (scope.show_captcha) {\n                                        scope[scope.ngFormModelName].confirmation_code   = \"\";\n                                        scope.refreshCaptcha();\n                                    }\n\n                                },\n                                otherError : function(reactionCode) {\n\n                                    scope.isInActive = requestData.isInActive;\n                                    \n                                    // If reaction code is Server Side Validation Error Then \n                                    // Unset the form fields\n                                    if (reactionCode == 3) {\n                                        // Check if show captcha exist then refresh captcha\n                                        if (scope.show_captcha) {\n                                            scope.refreshCaptcha();\n                                        }\n                                    } else if (reactionCode == 10) {\n                                        if (requestData.auth_info.authorized) {\n                                            window.location = window.appConfig.appBaseURL;\n                                        }\n                                    }\n\n                                }\n                            },\n                            function() {\n\n                                __Auth.checkIn(requestData.auth_info, function() {\n\n                                    if (requestData.intendedUrl) {\n\n                                        __globals.redirectBrowser(requestData.intendedUrl);\n\n                                    } else {\n                                        __globals.redirectBrowser(window.appConfig.appBaseURL);\n                                    }\n\n                                });\n                            });    \n\n                    });\n\n                };\n\n\n\n\t\t\t\t/**\n                * Submit login form action\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n\n                scope.submitDialogLogin = function() {\n\n                    scope.isInActive = false;\n                  \n                    __Form.process('user.login', scope).success(function(responseData) {\n\n                        var requestData = responseData.data;\n\n                        appServices.processResponse(responseData, {\n                                error : function() {\n\n                                   // scope.isInActive = requestData.isInActive;\n\n                                    scope.show_captcha = requestData.show_captcha;\n\n                                    // reset password field\n                                    scope[scope.ngFormModelName].password   = \"\";\n\n                                    // Check if show captcha exist then refresh captcha\n                                    if (scope.show_captcha) {\n                                        scope[scope.ngFormModelName].confirmation_code   = \"\";\n                                        scope.refreshCaptcha();\n                                    }\n\n                                },\n                                otherError : function(reactionCode) {\n\n                                    scope.isInActive = requestData.isInActive;\n                                    \n                                    // If reaction code is Server Side Validation Error Then \n                                    // Unset the form fields\n                                    if (reactionCode == 3) {\n\n                                        // Check if show captcha exist then refresh captcha\n                                        if (scope.show_captcha) {\n                                            scope.refreshCaptcha();\n                                        }\n\n                                    } else if (reactionCode == 10) {\n                                        if (requestData.auth_info.authorized) {\n                                            window.location = window.appConfig.appBaseURL;\n                                        }\n                                    }\n\n                                }\n                            },\n                            function() {\n\n                                __Auth.checkIn(requestData.auth_info, function() {\n                                    \n                                    if (scope.guestLogin == true) {\n                                        __globals.redirectBrowser(__Utils.apiURL('order.summary.view'));\n                                    } else {\n                                        $scope.closeThisDialog({'login_success' : true});\n                                    }\n                                });\n\n                            });    \n\n                    });\n\n                };\n\n            }\n\n        ]);\n\n})();","(function() {\n'use strict';\n    \n    /*\n     UserLogoutController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.logout', [])\n        .controller('UserLogoutController',   [\n            '__DataStore', \n            '__Auth', \n            'appServices', \n            UserLogoutController \n        ]);\n\n    /**\n      * UserLogoutController for login logout\n      *\n      * @inject __DataStore\n      * @inject __Auth\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function UserLogoutController(__DataStore, __Auth, appServices) {\n\n        var scope   = this;\n\n        __DataStore.post('user.logout').success(function(responseData) {\n\n            appServices.processResponse(responseData, function(reactionCode) {\n\n                // set user auth information\n                __Auth.checkIn(responseData.data.auth_info);  \n\n            });\n\n        });\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     UserForgotPasswordController Module\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.forgotPassword', [])\n\n        /**\n          * UserForgotPasswordController - request to send password reminder\n          *\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserForgotPasswordController',   [\n            '__Form', \n            'appServices',\n            '__Utils',\n            function (__Form, appServices, __Utils) {\n\n                var scope   = this;\n\n\n                scope = __Form.setup(scope, 'user_forgot_password_form', 'userData', {\n                    secured : true\n                });\n\n                /**\n                  * Submit form\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function() {\n\n                    __Form.process('user.forgot_password.process', scope)\n                    .success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function() {\n                            \n                           __globals.redirectBrowser(__Utils.apiURL('user.forgot_password.success'));\n                           \n                        });    \n\n                    });\n\n                };\n\n            }\n\n        ]);\n\n})();","(function() {\n'use strict';\n    \n    /*\n     UserResetPasswordController Module\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.resetPassword', [])\n\n        /**\n          * UserResetPasswordController for reset user password\n          *\n          * @inject __Form\n          * @inject appServices\n          * @inject __Utils\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserResetPasswordController',   [\n            '__Form', \n            'appServices',\n            '__Utils',\n            function (__Form, appServices, __Utils) {\n\n                var scope = this;\n\n                scope = __Form.setup(scope, 'user_reset_password_form', 'userData', {\n                    secured : true\n                });\n\n                /**\n                  * Submit reset password form action\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                \n                scope.submit = function() {\n\n                    __Form.process({\n                        'apiURL'        : 'user.reset_password.process',\n                        'reminderToken' : __globals.getAppJSItem('passwordReminderToken')\n                    }, scope)\n                        .success(function(responseData) {\n                            \n                        appServices.processResponse(responseData, null,\n                            function(reactionCode) {\n                                window.location = __Utils.apiURL('user.login');\n                        });    \n\n                    });\n\n                };\n\n            }\n        ]);\n\n})();","(function() {\n'use strict';\n    \n    /*\n     UserChangePasswordController Module\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.changePassword', [])\n\n        /**\n          * UserChangePasswordController - change user password\n          *\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserChangePasswordController',   [\n            '__Form', \n            'appServices',\n            '__Utils',\n            '$state',\n            function (__Form, appServices, __Utils, $state) {\n\n                var scope   = this;\n\n                scope = __Form.setup(scope, 'user_password_update_form', 'userData', {\n                    secured : true\n                });\n\n                /**\n                  * Submit update password form action\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function() {\n\n                    __Form.process('user.change_password.process', scope)\n                    .success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function() {\n                            scope.userData = {};\n                            \n                            if (document.location.href == responseData.data.passwordRoute) {\n                            \twindow.location = window.appConfig.appBaseURL;\n                            } else {\n                            \t$state.go('dashboard');\n                            }\n                            \n                        });    \n\n                    });\n\n                };\n\n            } \n        ]);\n\n})();","(function() {\n'use strict';\n    \n    /*\n     UserChangeEmailController Module\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.changeEmail', [])\n\n        /**\n          * UserChangeEmailController - handle chnage email form view js scope\n          *\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserChangeEmailController',   [\n            '__Form', \n            'appServices',\n            function (__Form, appServices) {\n\n                var scope   = this;\n\n                scope.requestSuccess  = false;\n                scope.pageStatus = false;\n\n                scope = __Form.setup(scope, 'user_change_email_form', 'userData', {\n                    secured : true\n                });\n\n                /**\n                  * Fetch support data\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                __Form.fetch('user.change_email.support_data')\n                    .success(function(responseData) {\n                \n                    var requestData     = responseData.data;\n                    \n                    appServices.processResponse(responseData, null, function() {\n                            \n                        scope.changeEmail = requestData.newEmail;\n                        scope.formattedDate = requestData.formattedDate;\n                        scope.humanReadableDate = requestData.humanReadableDate;\n\n                        scope.pageStatus = true;\n                        \n                    });    \n\n                });\n                \n                /**\n                  * Submit change email form action\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function() {\n\n                    __Form.process('user.change_email.process', scope)\n                    .success(function(responseData) {\n\n                        var requestData = responseData.data;\n\n                        appServices.processResponse(responseData, null,\n                        function() {\n                            scope.userData = {};\n                            if (responseData.reaction == 1) {\n                                scope.activationRequired = requestData.activationRequired;\n\n                                scope.requestSuccess = true;\n\n                                $('.lw-form').slideUp();\n                            }\n                        });    \n\n                    });\n\n                };\n\n            }\n            \n        ]);\n\n})();","(function() {\n'use strict';\n    \n    /*\n     UserRegisterController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.register', [])\n\n        /**\n          * UserRegisterController - handle register form & send request to server\n          * to submit form data. \n          *\n          * @inject __Form\n          * @inject $state\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserRegisterController',   [\n            '__Form', \n            '$state',\n            'appServices',\n            '__Utils',\n            function (__Form, $state, appServices, __Utils) {\n\n                var scope   = this;\n                scope.show_captcha      = false;\n\n                scope = __Form.setup(scope, 'user_register_form', 'userData', {\n                    secured : true\n                });\n\n                /**\n                  * Get login attempts for this client ip\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                __Form.fetch('user.register.supportData').success(function(responseData) {\n                    scope.show_captcha      = true;\n                    scope.site_key      = responseData.data.site_key;                   \n                });\n\n\n\t\t\t\t/**\n\t\t\t\t  * Fetch captch url\n\t\t\t\t  *\n\t\t\t\t  * @return string\n\t\t\t\t  *---------------------------------------------------------------- */\n\n                scope.getCaptchaURL = function() {\n                    return __Utils.apiURL('security.captcha')+'?ver='+Math.random();\n                };\n\n                /**\n                  * Refresh captch \n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.refreshCaptcha = function() {\n                    scope.captchaURL = scope.getCaptchaURL();\n                };\n\n                scope.captchaURL  = scope.getCaptchaURL();\n                scope.errorMessage = false;\n                /**\n                  * Submit register form action\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                \n                scope.submit = function() {\n\n                    scope.isInActive = false;\n\n                    __Form.process('user.register.process', scope)\n                        .success(function(responseData) {\n\n                           var requestData = responseData.data;\n                           \n                        appServices.processResponse(responseData, {\n                        \t\terror : function() {\n\n                                },\n                                otherError : function() {\n\n                                    if (responseData.reaction == 3 && !_.isEmpty(responseData.message)) {\n                                        scope.errorMessage = responseData.message;\n                                    }\n\n                                    //console.log(responseData.message);\n                                    scope.isInActive = requestData.isInActive;\n\n\t                                // reset password field\n\t                                scope[scope.ngFormModelName].password   = \"\";\n\t                                scope[scope.ngFormModelName].password_confirmation   = \"\";\n\n\t                                // refresh captcha\n\t                                scope[scope.ngFormModelName].confirmation_code   = \"\";\n\t                                scope.refreshCaptcha();\n\n                                }\n                            },\n                            function() {\n                            __globals.redirectBrowser(__Utils.apiURL('user.register.success'));\n                        });    \n\n                    });\n\n                };\n\n                /**\n                  * Show terms and conditions dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.showTermsAndConditionsDialog = function() {\n\n                    appServices.showDialog(scope,\n                    {   \n                        templateUrl : __globals.getTemplateURL(\n                            'user.terms-and-conditions'\n                        )\n                    }, \n                    function(promiseObj) {\n                    });\n\n                };\n\n            } \n        ]);\n    \n})();","(function() {\n'use strict';\n    \n    /*\n     UserContactController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.contact', [])\n        .controller('UserContactController',   [\n            '__Form', \n            '$state',\n            'appServices',\n            '__Utils',\n            '__Auth',\n            '$scope',\n            UserContactController \n        ]);\n\n    /**\n      * UserContactController handle register form & send request to server\n      * to submit form data. \n      *\n      * @inject __Form\n      * @inject $state\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function UserContactController(__Form, $state, appServices, __Utils, __Auth, $scope) {\n\n        var scope   = this;\n       \n        scope = __Form.setup(scope, 'user_contact_form', 'userData', {\n        \tsecured : true,\n\t\t    unsecuredFields : ['message'],\n        });\n\n        // get logged in user Info\n        __Auth.refresh(function(authInfo) {\n\t \t\tscope.auth_info = authInfo;\n\t \t});\n\n\t \tif (scope.auth_info.reaction_code != 9) { // not authenticate\n\t\t \tscope.userData.email \t= scope.auth_info.profile.email;\n\t\t \tscope.userData.fullName = scope.auth_info.profile.full_name;\n\t \t}\n\n\t \tif (!_.isEmpty($scope.ngDialogData)) {\n\n\t \t\tscope.userData.orderUID = $scope.ngDialogData.orderUID;\n\t \t}\n        \t\n\n        /**\n          * Submit register form action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.requestSuccess = false;\n    \n        scope.submit = function(formType) {\n\n        \tscope.userData.formType = formType;\n\n        \t __Form.process('user.contact.process', scope)\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n\n                    scope.userData \t\t   = '';\n                    \n                \t// Check if form type dialog or form\n                \tif (scope.userData.formType == 2) { // dialog\n                        \n                \t\t$scope.closeThisDialog();\n                \t} else {\n\n                        $('.lw-form').slideUp();\n                    }\n                    \n                    scope.requestSuccess = true;\n\n                });    \n\n            });\n\n        };\n\n        /**\n\t  \t  * Close dialog\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\t\tscope.closeDialog = function() {\n  \t  \t\t$scope.closeThisDialog();\n  \t  \t};\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     UserProfileController Module\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.profile', [])\n\n        /**\n          * UserProfileController - edit user profile\n          *\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserProfileController',   [\n            '__Form', \n            'appServices',\n            function (__Form, appServices) {\n\n                var scope   = this;\n\n                scope = __Form.setup(scope, 'user_profile__form', 'profileData');\n\n                scope.request_completed = false;\n\n                __Form.fetch('user.profile.details').success(function(responseData) {\n\n                    appServices.processResponse(responseData, null, function() {\n                        __Form.updateModel(scope, responseData.data.profile);\n                        scope.request_completed = true;\n                    });\n\n                });\n\n            }\n\n        ]);\n\n})();","(function() {\n'use strict';\n    \n    /*\n     UserProfileEditController Module\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.profileEdit', [])\n\n        /**\n          * UserProfileEditController - edit user profile\n          *\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserProfileEditController',   [\n            '__Form', \n            'appServices',\n            function (__Form, appServices) {\n\n                var scope   = this;\n\n                scope = __Form.setup(scope, 'user_profile_edit_form', 'profileData');\n\n                scope.request_completed = false;\n\n                __Form.fetch('user.profile.details').success(function(responseData) {\n\n                    appServices.processResponse(responseData, null, function() {\n                        __Form.updateModel(scope, responseData.data.profile);\n                        scope.request_completed = true;\n                    });    \n\n                });\n\n                /**\n                  * Submit profile edit form action\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function() {\n                    \n                    __Form.process('user.profile.update', scope)\n                    .success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function() {\n                        });    \n\n                    });\n\n                };\n\n            }\n             \n        ]);\n\n})();","(function() {\n'use strict';\n    \n    /*\n     UserAddressAddController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.address', [])\n        .controller('UserAddressAddController',   [\n        \t'$scope',\n            '__Form', \n            '$state',\n            'appServices',\n            '__Utils',\n            '$rootScope',\n            UserAddressAddController \n        ]);\n\n    /**\n      * UserAddressAddController handle address form & send request to server\n      * to submit form data. \n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject $state\n      * @inject appServices\n      * @inject __Utils\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function UserAddressAddController($scope, __Form, $state, appServices, __Utils, $rootScope) {\n\n        var scope   = this;\n        \n        scope = __Form.setup(scope, 'user_address_form', 'userData', {\n            secured : false\n        });\n\n        scope.addressType \t\t\t  = __globals.getAppJSItem('configGetAddressType');\n\n        // Get countries\n        scope.countriesCollection     = __globals.getAppJSItem('countries');\n        scope.countries \t\t\t  = scope.countriesCollection.data.countries;\n\n        scope.countries_select_config = __globals.getSelectizeOptions({\n            valueField  : 'value',\n            labelField  : 'text',\n            searchField : [ 'text' ]  \n        });\n\n        //scope.countries = __globals.configItem('countries');\n\n        /**\n          * Submit address form action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.submit = function() {\n\n            __Form.process('user.address.process', scope)\n                .success(function(responseData) {\n                    appServices.processResponse(responseData, null, function() {\n\t                \t$scope.closeThisDialog({address_added : true, selectedAddressID : $scope.ngDialogData.selectedAddressID, addressType : $scope.ngDialogData.addressType})\n               \t\t});\n            });\n\n        };\n\n         /**\n          * Close dialog and return promise object\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n          \n        scope.close = function() {\n        \t\n        \t$scope.closeThisDialog({address_added : true, selectedAddressID : $scope.ngDialogData.selectedAddressID, addressType : $scope.ngDialogData.addressType});\n        }\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     UserAddressListController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.Addresslist', [])\n        .controller('UserAddressListController',   [\n        \t'$scope',\n            '$state',\n            '__DataStore',\n            '__Form',\n            'appServices',\n            '__Utils',\n            '$rootScope',\n            UserAddressListController \n        ]);\n\n    /**\n      * UserAddressListController handle address form & send request to server\n      * to get list of address. \n      *\n      * @inject scope\n      * @inject $state\n      * @inject __DataStore\n      * @inject __Form\n      * @inject appServices\n      * @inject __Utils\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function UserAddressListController($scope, $state, __DataStore, __Form, appServices, __Utils, $rootScope) {\n    \t\n    \tvar scope   \t\t\t= this;\n        \tscope \t\t\t\t= __Form.setup(scope, 'user_address_form', 'addressData');\n        \tscope.ngDialogData  = $scope.ngDialogData;\n\t\t\tscope.pageStatus    = false;\n\t\t\t\n        /**\n          * get details of addresses\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.getAddresses = function() {\n\n        \t__DataStore\n        \t.fetch('user.get.addresses')\n        \t.success(\n        \tfunction(responseData) {\n\n                //scope.message = responseData.data.message;\n        \t\tappServices.processResponse(\n        \t\t\tresponseData,\n        \t\t\tnull, \n\t        \t\tfunction(reactionCode) {\n\n\t        \t\t\tvar requestData      \t= responseData.data;\n\n\t        \t\t\tif (requestData.getRoute === document.location.href) {\n\t        \t\t\t\tvar pageType\t \t= \"noDialog\";\n\t        \t\t\t} else {\n\t        \t\t\t\tvar pageType\t \t= \"dialog\";\n\n\t\t    \t\t\t\tscope.selectAddress = scope.ngDialogData.selectedAddressID;\n\t\t\t\t\t        scope.addressType \t= scope.ngDialogData.addressType;\n\t\t\t\t\t        scope.addressSameAs = scope.ngDialogData.addressSameAs;\n\t\t\t\t\t        scope.couponAmt\t\t= scope.ngDialogData.couponAmt;\n\n\t        \t\t\t};\n\n\t        \t\t\tscope.addressData \t = requestData;\n\t                    scope.pageStatus     = true;\n\t        \t\t\tscope.addressprimary = true;\n\t\t            \tscope.pageType \t\t = pageType;\n                 \n\t                    if (!_.isEmpty(scope.ngDialogData)) {\n\t                        scope.selectAddress  = scope.ngDialogData.selectedAddressID;\n\t                        scope.addressType    = scope.ngDialogData.addressType;\n\t                        scope.addressSameAs = scope.ngDialogData.addressSameAs;\n\t                        scope.couponAmt\t\t= scope.ngDialogData.couponAmt;\n\t                    } else {\n\t                        scope.selectAddress  = \"\";\n\t                        scope.addressType    = \"\";\n\t                        scope.addressSameAs  = \"\";\n\t                        scope.couponAmt\t\t = 0;\n\t                    }\n\n\t\t\t\t});\n \t\t\t});\n        }\n\n        scope.getAddresses();\n\n\n        $rootScope.$on('changeAddresses',function(events, resposeData){\n\n        \tif (resposeData.status) {\n        \t\tscope.addressType \t= resposeData.addressType;\n        \t};\n\t    \n\t    });\n        \n\n        /**\n          * address add dialog\n          *\n          * @param number pageType\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.addAddress = function(pageType, selectedAddressID, addressType) {\n\n        \tif (pageType == \"dialog\") {\n\n        \t\t$scope.closeThisDialog({\n\n\t    \t\t\tshowAddDialog   \t: true,\n\t    \t\t\tpageType \t\t\t: pageType,\n\t    \t\t\tselectedAddressID \t: selectedAddressID,\n\t    \t\t\taddressType \t\t: addressType\n\t    \t\t\n\t    \t\t});\n\n        \t} else {\n\n        \t\tappServices.showDialog(scope,\n\t\t        {\t\n\t\t            templateUrl : __globals.getTemplateURL(\n\t\t                'user.add-address'\n\t\t            )\n\t\t        }, function(promiseObj) {\n\n\t\t        \t\n\t\t        \tif (_.has(promiseObj.value, 'address_added') \n\t                    && promiseObj.value.address_added === true) {\t\n\t\t\t\t\t\tscope.addressType \t = promiseObj.value.addressType;\n\t\t\t\t\tscope.getAddresses();\n\t                }\n\n\t        \t});\n        \t}\n        \t\n        }\n\n        /**\n          * address edit dialog\n          *\n          * @param number pageType\n          * @param number addressID\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.editAddress = function(pageType, addressID, selectedAddressID, addressType) {\n\n        \tif (pageType == \"dialog\") {\n\n        \t\t$scope.closeThisDialog({\n\t        \t\tshowEditDialog \t\t: true,\n\t        \t\taddressID \t\t\t: addressID,\n\t        \t\tselectedAddressID \t: selectedAddressID,\n\t        \t\taddressType \t\t: addressType\n\t        \t});\n\n        \t\n        \t} else {\n\n        \t\t__DataStore.fetch({\n\t\t\t        \t'apiURL'\t: 'user.fetch.address.support.data',\n\t\t\t        \t'addressID'\t: addressID\n\t\t\t        })\n            \t   .success(function(responseData) {\n\n            \t   \tscope.address = responseData.data.address;\n\t\t            \tappServices.showDialog(scope,\n\t\t                {\t\n\t\t                    templateUrl : __globals.getTemplateURL(\n\t\t                            'user.edit-address'\n\t\t                        )\n\t\t                }, function(promiseObj) {\n\n\t\t\t        \tif (_.has(promiseObj.value, 'address_updated') \n\t\t                    && promiseObj.value.address_updated == true) {\n\t\t\t        \t\tscope.getAddresses();\n\t\t                }\n\n\t        \t\t});\n\n     \t\t\t});\n\n        \t}\n        }\n\n        /**\n          * Delete address \n          *\n          * @param number addressID\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.delete = function(addressID, addressType) {\n\n            __globals.showConfirmation({\n                text                : __globals.getJSString('address_delete_text'),\n                confirmButtonText   : __globals.getJSString('delete_action_button_text')\n            }, function() {\n\n                __DataStore.post({\n                    'apiURL'    : 'user.address.delete',\n                    'addressID' : addressID,\n                })\n                .success(function(responseData) {\n                \n                    var message = responseData.data.message,\n                    addressOBJ  = {\n\t\t\t\t\t\tstatus  : true,\n\t\t\t\t\t\taddressType  : addressType,\n\t\t\t\t\t\taddressID  : addressID\n                   \t};\n                   \n                    appServices.processResponse(responseData, {\n                            error : function(data) {\n                                __globals.showConfirmation({\n                                    title   : __globals.getJSString('confirm_error_title'),\n                                    text    : message,\n                                    type    : 'error'\n                                });\n\n                            }\n                        },\n                        function(data) {\n\n                            __globals.showConfirmation({\n                                title   : __globals.getJSString('confirm_error_title'),\n                                text    : message,\n                                type    : 'success'\n                            });\n                            \n                            $('#address_'+addressID).fadeOut('slow',function() {\n                                $(this).remove();\n                            \tscope.getAddresses();\n                            });\n\n                            $rootScope.$emit('changeAddress', addressOBJ);   // reload datatable\n\n                        }\n                    );    \n\n                });\n\n            });\n\n        };\n\n        /**\n          * Close dialog and return promise object\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.close = function() {\n\n        \tvar billingAddressOBJ  = {\n            \tstatus  : false,\n       \t\t};\n       \t\t$rootScope.$emit('changeAddress', billingAddressOBJ);\n        \t$scope.closeThisDialog({address_list : true});\n\n        }\n\n        /**\n          * get primary address \n          *\n          * @param number addressID\n          * @param number primary\n          * @param number pageType\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.primaryAddress = function(addressID, primary, pageType) {\n\n        \tscope.addressData.primary = primary;\n\n        \tscope.updateURL = {\n                'apiURL'    :'user.get primary.address',\n                'addressID' : addressID\n            };\n\n        \t__Form.process(scope.updateURL, scope)\n                .success(function(responseData) {\n\n                    var message \t= responseData.data.message;\n                \t \t/*addressOBJ  = {\n                        \tstatus          : true\n                   \t\t};*/\n                \tappServices.processResponse(responseData, null,\n                        function(data) {\n                        \tscope.getAddresses();\n                        \t/*if (pageType == 'dialog') {\n                        \t\t$scope.closeThisDialog({address_list : true})\n                        \t};*/\n\t\t\t\t\t\t\t//$rootScope.$emit('changePrimaryAddress', addressOBJ);\n                        }\n                    );  \n                \n            });\n\t\t}\n\n\t\t/**\n          * select address for address \n          *\n          * @param number addressID\n          * @param number addressType\n          * @param number addressSameAs\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\t\tscope.selectAddressForOrder = function(addressID, addressType, addressSameAs) {\n\t\t\t\n\t\t\t__DataStore.fetch({\n                    'apiURL'    : 'user.get.address.for.order',\n                    'addressID' : addressID,\n                    'couponAmt' : scope.couponAmt\n                })\n                .success(function(responseData) {\n\n                \tappServices.processResponse(responseData, null,\n                        function(data) {\n\n\t\t               \t\tvar addressOBJ = {\n\n\t\t               \t\t\tstatus \t\t\t: true,\n\t\t               \t\t\taddressSameAs \t: addressSameAs,\n\t\t               \t\t\tresponseData \t: responseData.data,\n\t\t               \t\t\taddressType \t: addressType,\n\t\t               \t\t\ttotalOrder \t\t: responseData.data.shipping\n\t\t               \t\t};\n\n\t\t\t               \tif (addressType == 'billing') {\n\n\n\t\t\t               \t\tvar billingAddressOBJ  = {\n\t\t\t                    \tstatus  : false,\n\t\t\t                    \taddressType : 'billing',\n\t\t               \t\t\t\ttotalOrder \t\t: responseData.data.shipping\n\t\t\t               \t\t};\n\t\t\t               \t\t$rootScope.$emit('changeAddress', billingAddressOBJ);\n\n\t\t\t               \t};\n\n\t\t\t               \tif (addressSameAs == false && addressType != 'billing') {\n\t\t\t               \t\t$rootScope.$emit('changeAddressInOrder', addressOBJ);\n\t\t\t               \t} else {\n\n\t\t\t               \t\t$rootScope.$emit('changeAddressInOrder', addressOBJ);\n\t\t\t               \t}\n\t\t\t               \t\n\t\t\t               \t$scope.closeThisDialog({address_list : true});\n                        }\n                    ); \n            \t});\n\n\t\t}\n\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     Category edit Controller\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.editAddress', [])\n        .controller('UserAddressEditController',    [\n            '$scope', \n            '__Form', \n            'appServices',\n            '__Utils',\n            '$state',\n            UserAddressEditController \n        ]);\n\n    /**\n     * UserAddressEditController\n     *\n     * @inject $scope\n     * @inject __Form\n     * @inject appServices\n     * @inject __Utils\n     * @inject $state\n     * \n     * @return void\n     *-------------------------------------------------------- */\n\n    function UserAddressEditController($scope, __Form, appServices, __Utils, $state) {\n\n        var scope = this;\n\n        scope     = __Form.setup(scope, 'user_address_edit_form', 'addressData');\n\n        scope.addressID = __globals.getAppJSItem('addressID');\n        scope.loadSelectBox = false;\n        scope.addressType = __globals.getAppJSItem('configGetAddressType');\n\n        // Get all countries\n        scope.countriesCollection = __globals.getAppJSItem('countries');\n        scope.countries = scope.countriesCollection.data.countries;\n\n        scope.countries_select_config = __globals.getSelectizeOptions({\n            valueField  : 'value',\n            labelField  : 'text',\n            searchField : [ 'text' ]  \n        });\n\n        if (_.isEmpty(scope.addressID)) {\n            scope.addressData = $scope.ngDialogData.address;\n                    \n            if (!_.isEmpty(scope.addressData)) {\n                scope.loadSelectBox = true;\n            };  \n            scope.addressID = scope.addressData.id;\n            scope.getRoute = \"\";\n\n        } else {\n            scope.addressID = scope.addressData.id;\n            scope           = __Form.updateModel(scope, __globals.getAppJSItem('addressData'));\n            scope.getRoute  = __globals.getAppJSItem('getRoute');\n        }          \n\n        /**\n          * update form action\n          *\n          * @return void\n          *------------------------------------------------------------------------ */\n\n        scope.update = function() {\n            \n             scope.updateURL = {\n                'apiURL'    :'user.address.update',\n                'addressID' : scope.addressID\n            };\n\n            // post form data\n            __Form.process(scope.updateURL, scope )\n                            .success( function( responseData ) {\n                appServices.processResponse(responseData, function(reactionCode) {\n                    if (reactionCode == 1) {\n                        $scope.closeThisDialog({address_updated : true, selectedAddressID : $scope.ngDialogData.selectedAddressID})\n                    };\n                    \n                });\n\n            });\n\n        };\n\n        /**\n          * Close dialog and return promise object\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.close = function() {\n            $scope.closeThisDialog({address_updated : true, selectedAddressID : $scope.ngDialogData.selectedAddressID});\n        }\n    };\n})();\n","(function() {\n'use strict';\n    \n    /*\n     UserResendActivationEmailController Module\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.resendActivationEmail', [])\n\n        /**\n          * UserResendActivationEmailController for request to send password reminder\n          *\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserResendActivationEmailController',   [\n            '__Form', \n            'appServices',\n            '__Utils',\n            function (__Form, appServices, __Utils) {\n\n                var scope   = this;\n                \n                scope = __Form.setup(scope, 'form_user_resend_activation_email', 'userData', {\n                    secured : false\n                });\n\n                /**\n                  * Submit forgot password form action\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function() {\n\n                    __Form.process('user.resend.activation.email.proccess', scope)\n                    .success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function() {\n                            window.location = __Utils.apiURL('user.resend_activation_email.success');\n                        });    \n\n                    });\n\n                };\n\n            }\n             \n        ]);\n})();","// MyWishListController\n(function() {\n'use strict';\n\n    angular\n        .module('PublicApp.myWishList', [])\n    \n    /**\n     * MyWishListController\n     *\n     * @inject $scope\n     * @inject __DataStore\n     * @inject appServices\n     *\n     * @return void\n     *-------------------------------------------------------- */\n    .controller('MyWishListController', [\n        '$scope',\n        'appServices',\n        '__Utils',\n        '$compile',\n        '__DataStore',\n        function MyWishListController($scope, appServices, __Utils, $compile, __DataStore) {\n            var scope = this;\n            scope.pageStatus = false;\n\n\n            //manage rating star\n            scope.calculateRating = function(value) {\n            \tvar decimal = (value - Math.floor(value));\n            \tvar rated = 0, unrated = 0;\n            \tif (decimal >= 0 && decimal < 0.5) {\n            \t\trated = Math.round(value);\n            \t\tunrated = Math.ceil(5 - value);\n            \t\tdecimal  = 0;\n            \t} else if (decimal > 0.5 && decimal < 1 ) {\n            \t\trated = Math.ceil(value);\n            \t\tunrated = Math.round(5 - value);\n            \t\tdecimal  = 0;\n            \t} else {\n            \t\trated = Math.floor(value);\n            \t\tunrated = Math.floor(5 - value);\n            \t\tdecimal  = Math.round(decimal);\n            \t}\n\n            \treturn (_.repeat('<i class=\"fa fa-star lw-color-gold\"></i>', rated)+\n    \t            \t_.repeat('<i class=\"fa fa-star-half-o lw-color-gold\"></i>', decimal)+\n    \t            \t_.repeat('<i class=\"fa fa-star lw-color-gray\"></i>', unrated));\n            };\n             \n             // product reviews pagination data start\n        \tthis.getWishListPaginationData = function(page) {\n                var requestURL = '';\n                \n\t            if (!_.isEmpty(page) && page.search(\"http\") != -1) {\n\t                \n\t                requestURL = page;\n\t                \n\t            } else {\n\n\t                requestURL = __Utils.apiURL('product.my_wishlist.details');\n\t                \n\t                var pageUrl = \"\";\n\n\t                if (page != undefined) {\n\t                  pageUrl = \"?page=\"+page;\n\t                }\n\n\t                requestURL = requestURL+pageUrl;\n\n\t            }\n\n                __DataStore.fetch(requestURL, {'fresh' : true})\n                .success(function(responseData) {\n\n                    var requestData = responseData.data;\n\n                    appServices.processResponse(responseData, null, function() {\n\n                        scope.wishListData = requestData.wishListData;\n                        scope.totalProducts = requestData.totalProducts;\n                        scope.paginationLinks = requestData.paginationLinks;\n                       \n                       scope.wishListCollection = [];\n                        _.forEach(scope.wishListData, function(value, key) {\n\n                            _.defer(function() {\n                                $('#lwWislListProductDesc'+value.productId).html($compile('<p lw-expander slice-count=\"250\">'+value.productDescription+'</p>')($scope));\n                            });\n\n                            scope.wishListCollection.push({\n                                'productId' : value.productId,\n                                'productImage' : value.productImage,\n                                'createdOn' : value.createdOn,\n                                'detailURL' : value.detailURL,\n                                'itemRating' : value.itemRating,\n                                'productDescription' : value.productDescription,\n                                'productName' : value.productName,\n                            });\n                        });\n\n                        if (scope.paginationLinks) {\n                            var $paginationLinksElement = $(\".lw-pagination-container\").html(scope.paginationLinks);\n                        }\n\n                        scope.pageStatus = true;\n                    });\n                });\n            };\n\n            this.getWishListPaginationData('');\n            $(\".lw-pagination-container\").on('click', 'a', function(event) {\n                event.preventDefault();\n                var $this = $(this),\n                    url   = $this.attr('href');\n                scope.getWishListPaginationData(url);\n            });\n            // product reviews pagination data stop\n\n            /**\n              * Remove from Wish-list\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n            scope.removeFromWishlist = function(productID) {\n                __DataStore.post({\n                    'apiURL'    : 'product.wishlist.remove_process',\n                    'productId' : productID\n                }, scope).success(function(responseData) {\n\n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        if (reactionCode == 1) {\n                            scope.getWishListPaginationData('');\n                        }                       \n                    });\n                });\n            };\n        }\n    ])\n\n})();","// MyRatingListController\n(function() {\n'use strict';\n\n    angular\n        .module('PublicApp.myRatingList', [])\n    \n    /**\n     * MyRatingListController\n     *\n     * @inject $scope\n     * @inject __DataStore\n     * @inject appServices\n     *\n     * @return void\n     *-------------------------------------------------------- */\n    .controller('MyRatingListController', [\n        '$scope',\n        'appServices',\n        '__Utils',\n        '$compile',\n        '__DataStore',\n        function MyRatingListController($scope, appServices, __Utils, $compile, __DataStore) {\n            var scope = this;\n            scope.pageStatus = false;\n\n\n             // product reviews pagination data start\n        this.getRatingListPaginationData = function(page) {\n                var requestURL = '';\n                \n            if (!_.isEmpty(page) && page.search(\"http\") != -1) {\n                \n                requestURL = page;\n                \n            } else {\n\n            requestURL = __Utils.apiURL('product.my_rating.details');\n                \n                var pageUrl = \"\";\n\n                if (page != undefined) {\n                  pageUrl = \"?page=\"+page;\n                }\n\n                requestURL = requestURL+pageUrl;\n\n            }\n\n                __DataStore.fetch(requestURL, {'fresh' : true})\n                .success(function(responseData) {\n\n                    var requestData = responseData.data;\n                   \n                    appServices.processResponse(responseData, null, function() {\n\n                        scope.ratingListData = requestData.ratingsData;\n                        scope.paginationLinks = requestData.paginationLinks;\n                       \n                        scope.ratingData = [];\n                        _.forEach(scope.ratingListData, function(value, key) {\n\n                            _.defer(function() {\n                                $('#lwProductDesc'+value.productId).html($compile('<p lw-expander slice-count=\"250\">'+value.productDescription+'</p>')($scope));\n                            });\n\n                            scope.ratingData.push({\n                                'productId' : value.productId,\n                                'productImage' : value.productImage,\n                                'createdOn' : value.createdOn,\n                                'detailURL' : value.detailURL,\n                                'itemRating' : value.itemRating,\n                                'productDescription' : value.productDescription,\n                                'productName' : value.productName,\n                            });\n                        });\n                        \n                        if (scope.paginationLinks) {\n                            var $paginationLinksElement = $(\".lw-pagination-container\").html(scope.paginationLinks);\n                        }\n                        scope.pageStatus = true;\n                    });\n                });\n            };\n\n            this.getRatingListPaginationData('');\n            $(\".lw-pagination-container\").on('click', 'a', function(event) {\n                event.preventDefault();\n                var $this = $(this),\n                    url   = $this.attr('href');\n                scope.getRatingListPaginationData(url);\n            });\n            // product reviews pagination data stop\n\n            //manage rating star\n            scope.calculateRating = function(value) {\n\n                var decimal = '', \n                    rated = Math.floor(value), \n                    unrated = Math.floor(5 - rated);\n                    \n                if (value % 1 != 0) {\n                    decimal = '<i class=\"fa fa-star-half-o lw-color-gold\"></i>';\n                    unrated = unrated - 1;\n                }\n               \n            \treturn (_.repeat('<i class=\"fa fa-star lw-color-gold\"></i>', rated)+\n    \t            \tdecimal+\n    \t            \t_.repeat('<i class=\"fa fa-star lw-color-gray\"></i>', unrated));\n            };\n\n        }\n    ])\n\n})();"]}