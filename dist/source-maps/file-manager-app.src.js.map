{"version":3,"sources":["FileManagerAppIgniter.js","FileManagerAppEngine.js","FileManagerEngine.js"],"names":[],"mappingslefile":"../ng-yantrana/file-manager-app.src.js","sourcesContent":["(function() {\n'use strict';\n\n  angular.module('FileManagerApp', [\n    'ngMessages',\n    'ngAnimate',\n    'ngSanitize',\n    'ui.router',\n    'angular-loading-bar',\n    'angularFileUpload',\n    'selectize',\n    'ngNotify',\n    'ngDialog',\n    'lw.core.utils',\n    'lw.auth',\n    'lw.data.datastore',\n    'lw.data.datatable',\n    'lw.security.main',\n    'lw.form.main',\n    'app.service',\n    'app.notification',\n    'app.form',\n    'FileManagerAppEngine',\n    'app.FileManagerEngine'\n  //constant('__ngSupport', window.__ngSupport).\n]).\n  run([\n    '__Auth', '$state', '$rootScope', function(__Auth, $state, $rootScope) {\n      \n        // Verify Route Permissions\n        __Auth.verifyRoute($state);\n\n         $rootScope.__ngSupport = window.__ngSupport;\n       \n    }\n  ]).\n  config([ \n    '$stateProvider', '$urlRouterProvider', '$interpolateProvider', routes\n  ]);\n\n  \n  /**\n    * Application Routes Configuration\n    *\n    * @inject $stateProvider\n    * @inject $urlRouterProvider\n    * @inject $interpolateProvider\n    *\n    * @return void\n    *---------------------------------------------------------------- */\n\n\n\n  function routes($stateProvider, $urlRouterProvider, $interpolateProvider) {     \n\n    $interpolateProvider.startSymbol('[[');\n    $interpolateProvider.endSymbol(']]');\n\n   /* $urlRouterProvider\n       .otherwise('/');\n\n    //state configurations\n    $stateProvider\n        \n        // home\n        .state('home', \n             __globals.stateConfig('/', 'home')\n        )\n\n        // author account registration\n        .state('author_account_registration', __globals.stateConfig( '/registration', 'account/account-registration', {\n\t        access  : { \n\t        \tguestOnly : true\n\t        }\n        } ))\n        ;*/\n\n    };\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t FileManagerAppEngine\n\t-------------------------------------------------------------------------- */\n\t\n\tangular\n        .module('FileManagerAppEngine', [])\n\n        /**\n          * FileManagerService :- to manage file manager common methods\n          * \n          *\n          * @inject $rootScope\n          *\n          * @return object\n          *-------------------------------------------------------- */\n\n        .service(\"FileManagerService\", [\n        \t'$rootScope', \n        \t'$state', \n        \t'appNotify',\n        \t'ngDialog', \n        \tfunction ($rootScope, $state, appNotify, ngDialog) {\n\n        \t\t/**\n\t\t\t      * Close all dialog\n\t\t\t      *\n\t\t\t      * @return void\n\t\t\t      *---------------------------------------------------------------- */\n\t\t\t    \n\t\t\t    this.closeAllDialog = function() {\n\t\t\t        ngDialog.closeAll();\n\t\t\t    };\n\n\t\t\t    /**\n\t\t\t      * Handle dialog show & close methods\n\t\t\t      *\n\t\t\t      * @param object transmitedData\n\t\t\t      * @param object options\n\t\t\t      * @param object closeCallback\n\t\t\t      *\n\t\t\t      * @return object\n\t\t\t      *---------------------------------------------------------------- */\n\t\t\t    \n\t\t\t    this.showDialog = function( transmitedData, options , closeCallback ) {\n\n\t\t\t        return ngDialog.open({\n\n\t\t\t          template        : options.templateUrl,\n\t\t\t          controller      : options.controller,\n\t\t\t          controllerAs    : options.controllerAs,\n\t\t\t          closeByEscape   : false,\n\t\t\t          closeByDocument : false,\n\t\t\t          data            : transmitedData\n\n\t\t\t        }).closePromise.then(function ( data ) {\n\n\t\t\t            return closeCallback.call( this, data );\n\n\t\t\t        });\n\n\t\t\t    };\n\n\t\t\t    /**\n\t\t\t      * Handle dialog show & close methods\n\t\t\t      *\n\t\t\t      * @param object options\n\t\t\t      * @param object closeCallback\n\t\t\t      *\n\t\t\t      * @return object\n\t\t\t      *---------------------------------------------------------------- */\n\t\t\t    \n\t\t\t    this.confirmDialog = function( options , closeCallback ) {\n\n\t\t\t        return ngDialog.openConfirm({\n\n\t\t\t            template  : options.templateUrl,\n\t\t\t            className : 'ngdialog-theme-default',\n\t\t\t            showClose : true,\n\t\t\t            plain \t : options.plain ? true : false\n\n\t\t\t        }, function( value ) {\n\n\t\t\t            return closeCallback.call( this, value );\n\n\t\t\t        });\n\n\t\t\t    };\n\n    \t\t}\n\n\t\t])\n\n        .controller('FileManagerController', \t[\n\t\t\t'$rootScope',\n            '__DataStore', \n            '$scope', \n            '__Auth', \n            'appServices', \n            'appNotify',\n            '__Utils',\n            'FileManagerService', \n            FileManagerController \n\t \t])\n        ;\n\n /**\n\t* MainController for manage page application\n\t*\n\t* @inject $rootScope\n\t* @inject __DataStore\n\t* @inject $scope\n\t* @inject __Auth\n\t* @inject appServices\n\t* @inject appNotify\n\t* \n\t* @return void\n\t*-------------------------------------------------------- */\n\n\tfunction FileManagerController($rootScope, __DataStore, $scope, __Auth,  appServices, appNotify, __Utils, FileManagerService) {\n\n\t \tvar scope \t\t= this,\n\t \t\tconfigData \t= __globals.getAppJSItem('file_manager_config');\n\n        scope.pageStatus    = false;\n\n\t \t__Auth.refresh(function(authInfo) {\n\n\t \t\tscope.auth_info = authInfo;\n        \t\n\t \t});\n\n        scope.unhandledError = function() {\n\n            appNotify.error(__globals.getReactionMessage(19)); // Unhanded errors\n\n        };\n\n        scope.currentDir\t\t = '';\n        scope.currentFolderData  = '';\n\n        $rootScope.$on('lw.page.css_styles', function (event, data) {\n\n            scope.pageCSSStyles = data.header_bg_color;\n\n        });\n\n        $rootScope.$on('lw.events.state.change_start', function () {\n\t \t\tappServices.closeAllDialog(); \n        });\n\n        $rootScope.$on('lw.form.event.fetch.started', __globals.showFormLoader );\n\n        $rootScope.$on('lw.datastore.event.fetch.finished', __globals.hideFormLoader );\n\n        $rootScope.$on('lw.form.event.process.error', scope.unhandledError );\n\n        $rootScope.$on('lw.datastore.event.fetch.error', scope.unhandledError );\n\n        /**\n          * Show upload new file dialog\n          *\n          * @return void \n          *---------------------------------------------------------------- */\n\n        scope.showUploadNewFileDialog  =  function() {\n\n            FileManagerService.showDialog( {'currentDir' : scope.currentDir}, {\n                templateUrl : __globals.getTemplateURL('file-manager.upload-file-dialog')\n            },\n            function(promiseObj) {\n\n            \tscope.retrieveFiles();\n\n            });\n        };\n\n        /**\n          * Show image file dialog\n          *\n          * @return void \n          *---------------------------------------------------------------- */\n\n        scope.showImageFileDialog  =  function(fileData) {\n\n            FileManagerService.showDialog( {'fileData' : fileData}, {\n                templateUrl : __globals.getTemplateURL('file-manager.image-file-dialog')\n            },\n            function(promiseObj) {\n\n            });\n            \n        };\n\n        /**\n          * Show upload new file dialog\n          *\n          * @return void \n          *---------------------------------------------------------------- */\n\n        scope.useFile  =  function(fileData) {\n\n        \t// Check if dialog exist\n\t\t\tif (window.opener && !window.opener.closed) {\n\n\t\t\t\tvar gp \t=\tnew Array();\n\t\t\t\tvar loc = location.search, \n\t\t\t\tnameValue;\n\n\t\t\t\tif (loc) {\n\n\t\t\t\t\tloc = loc.substring(1);\n\n\t\t\t\t\tvar parms=loc.split('&');\n\n\t\t\t\t\tfor (var i=0;i<parms.length;i++) {\n\n\t\t\t\t\t\tnameValue=parms[i].split('=');\n        \t\t\t\tgp[nameValue[0]]=unescape(nameValue[1]);\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar editor = gp['CKEditor'];\n\n\t\t\t\t/* I had multiple CKEDITORS using the same nav bar so there might be a little more code than you would normally need here. */\n\t\t\t\tvar sourceElement \t\t\t= window.opener.CKEDITOR.instances[editor]._.filebrowserSe;\n\t\t\t\tvar dialog \t\t\t\t\t= sourceElement.getDialog();\n\t\t\t\tvar targetElement \t\t\t= sourceElement.filebrowser.target || null;\n\n\t\t\t\t/*  here is where I did stuff to the url */\n\n\t\t\t\t// If there is a reference to targetElement, update it.\n\t\t\t\tif ( targetElement )\n\t\t\t\t{\n\t\t\t\t\tvar target \t\t= targetElement.split( ':' );\n\t\t\t\t\tvar element \t= dialog.getContentElement( target[ 0 ], target[ 1 ] );\n\n\t\t\t\t\tif ( element )\n\t\t\t\t\t{\n\t\t\t\t\t\telement.setValue( fileData.previewUrl );\n\t\t\t\t\t\tdialog.selectPage( target[ 0 ] );\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\twindow.close();\n\t\t\t\t\n\t\t\t} else {\n\n\t\t\t\tscope.showImageFileDialog(fileData);\n\n\t\t\t}\n\n        };\n\n        /**\n          * Show add new folder dialog\n          *\n          * @return void \n          *---------------------------------------------------------------- */\n\n        scope.showAddFolderDialog  =  function() {\n\n            FileManagerService.showDialog( {'currentDir' : scope.currentDir}, {\n                templateUrl : __globals.getTemplateURL('file-manager.add-folder-dialog')\n            },\n            function(promiseObj) {\n\n            \tscope.retrieveFiles();\n\n            });\n        };\n\n        /**\n          * Show edit new folder dialog\n          *\n          * @return void \n          *---------------------------------------------------------------- */\n\n        scope.showRenameFolderDialog  =  function(name, folder_relative_path) {\n\n            FileManagerService.showDialog( { \n            \t'currentDir' \t\t\t: scope.currentDir,\n            \t'name' \t\t \t\t\t: name,\n            \t'folder_relative_path' \t: folder_relative_path\n            }, {\n                templateUrl : __globals.getTemplateURL('file-manager.edit-folder-dialog')\n            },\n            function(promiseObj) {\n\n            \tscope.retrieveFiles();\n\n            });\n\n        };\n\n        /**\n          * Show rename file dialog\n          *\n          * @return void \n          *---------------------------------------------------------------- */\n\n        scope.showRenameFileDialog  =  function(fileData) {\n\n            FileManagerService.showDialog( { \n            \t'currentDir' \t\t\t: scope.currentDir,\n            \t'fileData' \t\t\t\t: fileData\n            }, {\n                templateUrl : __globals.getTemplateURL('file-manager.rename-file-dialog')\n            },\n            function(promiseObj) {\n\n            \tscope.retrieveFiles();\n\n            });\n\n        };\n\n        /**\n\t \t  * Retrieve files required\n\t \t  *\n\t \t  * @return void\n\t \t  *---------------------------------------------------------------- */\n\t \t\n\t \tscope.retrieveFiles  =  function() {\n\n\t \t\tscope.showLoader = false;\n\n\t \t\t__DataStore.fetch(\n\t \t\t\t__Utils.apiURL('file_manager.files')+'?currentDir='+scope.currentDir+'&type='+configData.type,\n\t \t\t\t{ 'fresh' : true } )\n\t \t\t\t.success(function(responseData) {\n                \n                var requestData = responseData.data;\n\n                appServices.processResponse(responseData, null, function() {\n\n                   \tscope.files \t\t\t\t= requestData.files;\n                   \tscope.currentDir\t\t \t= requestData.currentDir;\n        \t\t\tscope.currentFolderData  \t= requestData.currentFolderData;\n                   \tscope.showLoader \t\t\t= false;\n\n                }); \n\n            });\n\n\t \t};\n\n\t \tscope.showFolderFiles = function(relativePath) {\n\n\t \t\tif (relativePath) {\n\n\t \t\t\tscope.currentDir \t= relativePath;\n\n\t \t\t\tscope.retrieveFiles();\n\n\t \t\t}\n\n\t \t};\n\n\t \tscope.backToParent = function(parentDirectoryPath) {\n\n\t \t\tscope.currentDir \t= parentDirectoryPath;\n\n\t \t\tscope.retrieveFiles();\n\n\t \t};\n\n        /**\n          * Check if user logged in\n          *\n          * @return boolean \n          *---------------------------------------------------------------- */\n        \n        scope.isLoggedIn = function() {\n            return scope.auth_info.authorized;     // is looged in\n        };\n\n        /**\n          * Check if user logged in\n          *\n          * @return boolean \n          *---------------------------------------------------------------- */\n        \n        scope.isAdmin = function() {\n            return scope.isLoggedIn() && scope.auth_info.designation === 1;   //check if is admin\n        };\n\n        /**\n          * Get user full name\n          *\n          * @return boolean \n          *---------------------------------------------------------------- */\n        \n        scope.getFullName = function() {\n            if (scope.isLoggedIn()) {\n                return scope.auth_info.profile.full_name;\n            }\n        };\n\n        /**\n          * Delete file\n          *\n          * @param string filename\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.deleteFile = function(filename, relativePath) {\n\n        \tappServices.confirmDialog({\n                templateUrl : 'lw-file-delete-dialog.ngtemplate',\n            }).then(function(promiseObj) {\n\n                __DataStore.post({\n                    'apiURL'\t\t: 'file_manager.file.delete',\n                    'filename'   \t:  relativePath\n                }, {'filename' : relativePath}).success(function(responseData) {\n                    \n                    appServices.processResponse(responseData, null, function() {\n                        scope.retrieveFiles();\n                    }); \n\n                });\n\n            });\n            \n        };\n\n        /**\n          * Delete folder\n          *\n          * @param string filename\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.deleteFolder = function(folderName, relativePath) {\n\n        \tappServices.confirmDialog({\n                templateUrl : 'lw-folder-delete-dialog.ngtemplate',\n            }).then(function(promiseObj) {\n\n                __DataStore.post({\n                    'apiURL'\t\t: 'file_manager.folder.delete',\n                    'folder'   \t\t:  relativePath\n                }, {'folderName' : relativePath}).success(function(responseData) {\n                    \n                    appServices.processResponse(responseData, null, function() {\n                        scope.retrieveFiles();\n                    }); \n\n                });\n\n            });\n            \n        };\n\n        var downloadFileUrl = __Utils.apiURL('file_manager.file.download');\n\n        /**\n          * Download file\n          *\n          * @param string filename\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.downloadFileUrl = function(relativePath) {\n\n        \treturn downloadFileUrl+'?filename='+relativePath;\n            \n        };\n\n        scope.retrieveFiles();\n\n\t};\n\n})();","/*!\n*  Component  : FileManager\n*  File       : FileManagerEngine.js  \n*  Engine     : FileManagerEngine \n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('app.FileManagerEngine', [])\n\n        /**\n          * File Manager Controller \n          *\n          * @inject object $scope\n          * @inject object __DataStore\n          * @inject object __Form\n          * @inject object $stateParams\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        /*.controller('FileManagerController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            function ($scope, __DataStore, __Form, $stateParams) {\n\n                var scope = this;\n\n            }\n        ])*/\n  \n\n        /**\n          * File Manager Master Controller \n          *\n          * @inject object $scope\n          * @inject object __DataStore\n          * @inject object __Form\n          * @inject object $stateParams\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        .controller('FileManagerMasterController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            function ($scope, __DataStore, __Form, $stateParams) {\n\n                var scope = this;\n\n            }\n        ])  \n\n        /**\n          * Add Folder Dialog Controller \n          *\n          * @inject object $scope\n          * @inject object __Form\n          * @inject object appServices\n          * @inject object appNotify\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        .controller('AddFolderDialogController', [\n            '$scope',\n            '__Form',\n            'appServices', \n            'appNotify',\n            function ($scope, __Form, appServices, appNotify) {\n\n                var scope = this,\n                ngDialogData \t= $scope.ngDialogData;\n\n                scope   = __Form.setup(scope, 'add_folder_form', 'folderData');\n\n\t            /*\n\t              Submit form action\n\t              -------------------------------------------------------------------------- */\n\t            \n\t            scope.submit = function() {\n\n\t                __Form.process('file_manager.folder.add', scope).success(function(responseData) {\n\t                        \n\t                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n\t                        $scope.closeThisDialog( {'folder_added' : true} );\n\n\t                    }); \n\n\t                });\n\n\t            };\n\n\t            scope.folderData.currentDir = ngDialogData.currentDir; \n\n\t            /**\n\t              * Close dialog\n\t              *\n\t              * @return void\n\t              *---------------------------------------------------------------- */\n\n\t            scope.closeDialog = function() {\n\t                $scope.closeThisDialog();\n\t            };\n\n            }\n        ])  \n\n        /**\n          * Upload File Dialog Controller \n          *\n          * @inject object $scope\n          * @inject object __DataStore\n          * @inject object $stateParams\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        .controller('UploadFileDialogController', [\n           '$scope',\n            '__DataStore',\n            'appServices', \n            'appNotify',\n            '__Utils',\n            'FileUploader', \n            function ($scope, __DataStore, appServices, appNotify, __Utils, FileUploader) {\n\n                var scope = this,\n                \tuploader,\n                \tngDialogData \t= $scope.ngDialogData,\n                \tcurrentDir \t\t= ngDialogData.currentDir;\n\n                uploader    = scope.uploader = new FileUploader(\n                        {\n                            url         : __Utils.apiURL('file_manager.upload')+'?currentDir='+currentDir,\n                            autoUpload  : true,\n                            headers     : {\n                                'X-XSRF-TOKEN': __Utils.getXSRFToken()\n                            }\n                        }\n                    );\n\n                uploader.filters.push({\n\t                name: 'uploaderFilter',\n\t                fn: function() {\n\t                    return this.queue.length < 1000;\n\t                }\n            \t}); \n\n                scope.currentUploadedFileCount = 0;\n\n                uploader.onAfterAddingAll = function() {\n                    scope.showLoader = true;\n                };\n\n                uploader.onSuccessItem = function(fileItem, responseData) {\n                \t\n                    appServices.processResponse( \n                        responseData,\n                        null,\n                        function() {\n\n                            var requestData = responseData.data;\n\n                            scope.currentUploadedFileCount++\n\n                        }\n\n                    );\n\n                };\n\n                uploader.onCompleteAll  = function() {\n\n                \tscope.showLoader = false;\n                \t\n                    if (scope.currentUploadedFileCount > 0) {\n                        appNotify.success(scope.currentUploadedFileCount+' file uploaded');\n                    }\n\n                    $scope.closeThisDialog();\n\n                    scope.currentUploadedFileCount = 0;\n\n                };\n\n                /**\n\t              * Close dialog\n\t              *\n\t              *---------------------------------------------------------------- */\n\n\t            scope.closeDialog = function() {\n\t                $scope.closeThisDialog();\n\t            };\n\n            }\n        ])\n\n        /**\n          * Image File Dialog Controller \n          *\n          * @inject object $scope\n          * @inject object $stateParams\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        .controller('ImageFileDialogController', [\n           '$scope',\n            '__DataStore',\n            'appServices', \n            function ($scope, appServices) {\n\n                var scope = this,\n                \tngDialogData \t= $scope.ngDialogData;\n\n            \tscope.fileData = ngDialogData.fileData;\n\n               /**\n\t              * Close dialog\n\t              *\n\t              *---------------------------------------------------------------- */\n\n\t            scope.closeDialog = function() {\n\t                $scope.closeThisDialog();\n\t            };\n\n            }\n        ])\n\n        /**\n          * Rename Folder Dialog Controller \n          *\n          * @inject object $scope\n          * @inject object __Form\n          * @inject object appServices\n          * @inject object appNotify\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        .controller('RenameFolderDialogController', [\n            '$scope',\n            '__Form',\n            'appServices', \n            'appNotify',\n            function ($scope, __Form, appServices, appNotify) {\n\n                var scope = this,\n                ngDialogData \t= $scope.ngDialogData;\n\n                scope   = __Form.setup(scope, 'rename_folder_form', 'folderData');\n\n\t            /*\n\t              Submit form action\n\t              -------------------------------------------------------------------------- */\n\t            \n\t            scope.submit = function() {\n\n\t                __Form.process('file_manager.folder.rename', scope).success(function(responseData) {\n\t                        \n\t                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n\t                        $scope.closeThisDialog( {'folder_updated' : true} );\n\n\t                    }); \n\n\t                });\n\n\t            };\n\n\t            scope   = __Form.updateModel(scope, {\n\t            \t\t'name' \t\t\t\t\t: \tngDialogData.name,\n\t            \t\t'existing_name'\t\t\t: \tngDialogData.name,\n\t            \t\t'currentDir'  \t\t\t:  \tngDialogData.currentDir,\n\t            \t\t'folder_relative_path'\t:   ngDialogData.folder_relative_path\n\t            \t});\n\n\t            /**\n\t              * Close dialog\n\t              *\n\t              * @return void\n\t              *---------------------------------------------------------------- */\n\n\t            scope.closeDialog = function() {\n\t                $scope.closeThisDialog();\n\t            };\n\n            }\n        ])\n\n        /**\n          * Rename File Dialog Controller \n          *\n          * @inject object $scope\n          * @inject object __Form\n          * @inject object appServices\n          * @inject object appNotify\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        .controller('RenameFileDialogController', [\n            '$scope',\n            '__Form',\n            'appServices', \n            'appNotify',\n            function ($scope, __Form, appServices, appNotify) {\n\n                var scope \t\t\t= this,\n\t                ngDialogData \t= $scope.ngDialogData,\n\t                fileData \t\t= ngDialogData.fileData;\n\n                scope   = __Form.setup(scope, 'rename_file_form', 'fileData');\n\n\t            /*\n\t              Submit form action\n\t              -------------------------------------------------------------------------- */\n\t            \n\t            scope.submit = function() {\n\n\t                __Form.process('file_manager.file.rename', scope).success(function(responseData) {\n\t                        \n\t                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n\t                        $scope.closeThisDialog( {'file_updated' : true} );\n\n\t                    }); \n\n\t                });\n\n\t            };\n\n\t            scope.fileExtension = fileData.extension;\n\n\t            scope   = __Form.updateModel(scope, {\n\t            \t\t'name' \t\t\t\t\t: \tfileData.baseName,\n\t            \t\t'existing_name'\t\t\t: \tfileData.name,\n\t            \t\t'currentDir'  \t\t\t:  \tngDialogData.currentDir,\n\t            \t\t'file_relative_path'\t:   fileData.relativePath\n\t            \t});\n\n\t            /**\n\t              * Close dialog\n\t              *\n\t              * @return void\n\t              *---------------------------------------------------------------- */\n\n\t            scope.closeDialog = function() {\n\t                $scope.closeThisDialog();\n\t            };\n\n            }\n        ]) \n    ;\n\n})(window, window.angular);"]}