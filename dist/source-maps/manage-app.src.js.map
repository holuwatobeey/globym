{"version":3,"sources":["manage-igniter.js","ManageController.js","UploadManagerEngine.js","ManageUsersController.js","ManageUserChangePasswordController.js","ManageUserDetailsDialog.js","UserProfileController.js","UserProfileEditController.js","UserChangePasswordController.js","UserChangeEmailController.js","CategoryController.js","CategoryAddDialogController.js","CategoryAddController.js","CategoryEditDialogController.js","EditCategoryController.js","CategoryDeleteController.js","BrandListController.js","BrandDetailDialogController.js","BrandAddDialogController.js","BrandAddController.js","BrandEditDialogController.js","BrandEditController.js","BrandDeleteDialogController.js","ManageProductAddController.js","ManageProductUploadedMediaController.js","ManageEditProductDetailsController.js","ManageProductEditController.js","ManageProductEditDetailsController.js","ManageProductNotifyMailController.js","ProductImagesController.js","ProductImageAddController.js","ProductImageEditController.js","ProductOptionsController.js","ProductOptionAddController.js","ProductOptionEditController.js","ProductOptionValuesController.js","ProductOptionValuesAddController.js","ProductSpecificationController.js","ProductSpecificationAddController.js","ProductFaqsAddController.js","ProductFaqsEditontroller.js","ProductSpecificationEditController.js","ProductRatingListController.js","ProductListController.js","ProductSeoMetaController.js","ManageProductRatingsListController.js","ManageProductFaqsListController.js","ManageProductAwatingUserListController.js","ManageOrderDetailsController.js","ManagePagesListController.js","ManagePagesAddDialogController.js","ManagePagesAddController.js","ManagePagesEditDialogController.js","ManagePagesEditController.js","PageDetailsController.js","EditStoreSettingsController.js","GeneralSettingsController.js","CurrencySettingsController.js","OrderSettingsController.js","PaymentSettingsController.js","PlacementSettingsController.js","ProductSettingsController.js","ContactSettingsController.js","ManageSliderSettingsEngine.js","PrivacyPolicySettingsController.js","LandingPageSettingController.js","ManageFooterSettingController.js","userSettingsController.js","CssStyleSettingsController.js","SocialSettingsController.js","EmailTemplateSettingsController.js","EmailSettingEditController.js","ManagePaymentEngine.js","ManageOrderListController.js","ManageUpdateOrderController.js","ManageCancelOrderController.js","ManageOrderDialogController.js","ManageOrderLogController.js","ManagePaymentDetailsController.js","ManageRawDataController.js","ManageUpdateOrderPaymentController.js","ManageRefundOrderPaymentController.js","ManageContactUserController.js","ManageOrderDeleteController.js","ManagePaymentDeleteController.js","DashboardController.js","ManageCouponEngine.js","ManageShippingEngine.js","ManageTaxEngine.js","ManageReportEngine.js","UserLoginController.js","UserLogoutController.js","RolePermissionDataServices.js","RolePermissionEngine.js","SpecificationPresetEngine.js","ShippingTypeEngine.js","TransliterateEngine.js","TransliterateDataServices.js"],"names":[],"mappingsvjizvxztWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClrlLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChjPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtvtrLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClpbzkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClhrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxvrhOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxhpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvneltrtrnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/TA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrvrdnpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzxoldnjwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5dzfile":"../Manage/manage-app.src.js","sourcesContent":["(function() {\n'use strict';\n\n  angular.module('ManageApp', [\n    'ngMessages',\n    'ngAnimate',\n    'ngSanitize',\n    'ui.router',\n    'ngNotify',\n    'ngDialog',\n    'angularFileUpload',\n    'angular-loading-bar',\n    'selectize',\n    'NgSwitchery',\n    'lw.core.utils',\n    'lw.security.main',\n    'lw.auth',\n    'lw.data.datastore',\n    'lw.data.datatable',\n    'lw.form.main',\n    'app.service',\n    'app.http',\n    'app.notification',\n    'app.form',\n    'app.fancytree',\n    'app.directives',\n    'ManageApp.master',\n    'UserApp.manage',\n    'UserApp.manageUserChangePassword',\n    'ManageApp.userDetailDialog',\n    'UserApp.profile',\n    'UserApp.profileEdit',\n    'UserApp.changePassword',\n    'UserApp.changeEmail',\n    'ManageApp.category',\n    'ManageApp.categoryAddDialog',\n    'ManageApp.categoryAdd',\n    'ManageApp.categoryEditDialog',\n    'ManageApp.categoryEdit',\n    'ManageApp.categoryDelete',\n    'ManageApp.brand',\n    'ManageApp.brandDetailDialog',\n    'ManageApp.brandAddDialog',\n    'ManageApp.brandAdd',\n    'ManageApp.brandEditDialog',\n    'ManageApp.brandEdit',\n    'ManageApp.coupon',\n    'ManageProductApp.details',\n    'ManageProductApp.add',\n    'ManageProductApp.uploadedMedia',\n    'ManageProductApp.edit',\n    'ManageProductApp.editDetails',\n    'ManageProductApp.notifyMailCustomer',\n    'ManageApp.shipping',\n    'ManageApp.tax',\n    'ManageApp.report',\n    'ManageProductApp.images',\n    'ManageProductApp.addImage',\n    'ManageProductApp.editImage',\n    'ManageProductApp.options',\n    'ManageProductApp.addOption',\n    'ManageProductApp.editOption',\n    'ManageProductApp.addOptionValues',\n    'ManageProductApp.optionValues',\n    'ManageProductApp.specification',\n    'ManageProductApp.addSpecification',\n    'ManageProductApp.awatingUser',\n    'ManageProductApp.addFaq',\n    'ManageProductApp.editFaq',\n    'ManageProductApp.editSpecification',\n\t'ManageProductApp.ratings',\n    'ManageProductApp.faqs',\n    'ManagePagesApp.list',\n    'ManagePagesApp.add',\n    'ManagePagesApp.add.dialog',\n    'ManagePagesApp.edit.dialog',\n    'ManagePagesApp.edit',\n    'ManagePagesApp.page.details',\n    'manageApp.storeSettingsEdit',\n    'manageApp.GeneralSettings',\n    'manageApp.CurrencySettings',\n    'manageApp.OrderSettings',\n    'manageApp.PaymentSettings',\n    'manageApp.ProductSettings',\n    'manageApp.PlacementSettings',\n    'manageApp.ContactSettings',\n    'manageApp.SliderSettings',\n    'manageApp.userSettings',\n    'manageApp.emailSettings',\n    'manageApp.privacyPolicySettings',\n    'manageApp.socialSettings',\n    'ManageApp.orderList',\n    'ManageApp.orderUpdate',\n    'ManageApp.orderCancel',\n    'ManageApp.orderLogList',\n    'ManageApp.orderDialogList',\n    'ManageApp.payment',\n    'ManageApp.paymentDetailsDialog',\n    'ManageApp.rawDataDialog',\n    'ManageApp.orderPaymentUpdate',\n    'ManageApp.orderPaymentRefund',\n    'ManageApp.orderContact',\n    'uploadManagerEngine',\n    'DashboardApp.main',\n    'ManageApp.brandDeleteDialog',\n    'ManageApp.productList',\n    'ManageApp.orderDetails',\n    'ManageApp.orderDelete',\n    'ManageApp.paymentDelete',\n    'manageApp.CssStyleSettings',\n    'manageApp.EmailTemplateSettings',\n\t'UserApp.login',\n    'UserApp.logout',\n    'manageApp.landingPageSettings',\n    'manageApp.manageFooterSettings',\n    'ManageApp.RolePermissionDataServices',\n    'ManageApp.RolePermissionEngine',\n    'ManageApp.specificationPresetList',\n    'ManageApp.ShippingTypeEngine',\n    'ManageProductApp.seoMeta',\n    'ManageApp.productRatingList',\n    'ManageApp.TransliterateDataServices',\n    'ManageApp.transliterateDialog'\n  ]).\n  //constant('__ngSupport', window.__ngSupport).\n  run([\n    '__Auth', '$state', '$rootScope', function(__Auth, $state, $rootScope) {\n      \n        // Verify Route Permissions\n        __Auth.verifyRoute($state);\n\n         $rootScope.__ngSupport = window.__ngSupport;\n       \n    }\n  ]).\n  config([ \n    '$stateProvider', '$urlRouterProvider', '$interpolateProvider', routes\n  ]);\n\n  \n  /**\n    * Application Routes Configuration\n    *\n    * @inject $stateProvider\n    * @inject $urlRouterProvider\n    * @inject $interpolateProvider\n    *\n    * @return void\n    *---------------------------------------------------------------- */\n\n\n\n  function routes($stateProvider, $urlRouterProvider, $interpolateProvider) {     \n\n    $interpolateProvider.startSymbol('[[');\n    $interpolateProvider.endSymbol(']]');\n\n    $urlRouterProvider\n       .otherwise('/dashboard');\n\n    //state configurations\n    $stateProvider\n        \n        // home\n        .state('home', \n             __globals.stateConfig('/home', 'home', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // dashboard\n        .state('dashboard', \n             __globals.stateConfig('/dashboard', 'dashboard/details', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // profile\n        .state('profile', \n             __globals.stateConfig('/profile', 'user/manage-profile', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // profile edit\n        .state('profileEdit', \n             __globals.stateConfig('/profile/edit', 'user/profile-edit', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // change password\n        .state('changePassword', \n             __globals.stateConfig('/change-password', 'user/change-password', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // change email\n        .state('changeEmail', \n             __globals.stateConfig('/change-email', 'user/change-email', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // users\n        .state('users', \n             __globals.stateConfig('/users', 'user/manage/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n         // categories\n        .state('categories', \n             __globals.stateConfig('/categories/:mCategoryID?', 'category/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // productsList\n        .state('products', \n             __globals.stateConfig('/products/:mCategoryID?/:brandID?', 'product/manage/list', {\n                access  : { \n                },\n                params: {\n                    mCategoryID: { squash: true, value: null },\n                    brandID: { squash: true, value: null }\n                }\n              }\n            )\n        )\n\n        // category add \n        .state('categories.add', \n             __globals.stateConfig('^/categories/add/:mCategoryID?', null, {\n             \tcontroller  : 'CategoryAddDialogController',\n                access  : { \n                },\n                params: {\n                    mCategoryID: { squash: true }\n                }\n              }\n            )\n        )\n\n          // category edit\n        .state('categories.edit', \n             __globals.stateConfig('^/categories/:catID/edit', null, {\n                controller  : 'CategoryEditDialogController',\n                access  : { \n                },\n                params: {\n                    catID: { squash: true }\n                }\n              }\n            )\n        )\n\n        // specificationList\n        .state('specificationsPreset', \n             __globals.stateConfig('/specifications-preset', 'specification-preset/manage/list', {\n                access  : { \n                },\n              }\n            )\n        )\n\n        // specificationsPreset add dialog\n        .state('specificationsPreset.add', \n            __globals.stateConfig('/add', null, {\n            access  : {},\n            controller : 'PresetAddDialogController'\n        } ))\n\n        // specificationsPreset edit dialog\n        .state('specificationsPreset.edit', \n            __globals.stateConfig('/:presetId/edit', null, {\n            access  : {},\n            controller : 'PresetEditDialogController'\n        } ))\n\n         // shipping type list\n        .state('shippingType', \n             __globals.stateConfig('/shipping-type', 'shipping-type/manage/list', {\n                access  : { \n                },\n              }\n            )\n        )\n\n        // shipping type add dialog\n        .state('shippingType.add', \n            __globals.stateConfig('/add', null, {\n            access  : {},\n            controller : 'ShippingTypeAddDialogController'\n        } ))\n\n        // shippingType edit dialog\n        .state('shippingType.edit', \n            __globals.stateConfig('/:shippingTypeId/edit', null, {\n            access  : {},\n            controller : 'ShippingTypeEditDialogController'\n        } ))\n\n\n        /*// edit \n        .state(\"categories.edit\", \n            __globals.appStateConfig('categories.edit', {\n            access      : { \n                designation : 1\n            }\n        }))*/\n\n        // list productRating\n        .state('productRating', \n             __globals.stateConfig('/product-rating', 'product-rating/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n\t\t// list brands\n        .state('brands', \n             __globals.stateConfig('/brands', 'brand/manage/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // add brands \n        .state('brands.add', \n             __globals.stateConfig('/add', null, {\n             \tcontroller  : 'BrandAddDialogController',\n                access  : { \n                }\n              }\n            )\n        )\n\n          // category edit\n        .state('brands.edit', \n             __globals.stateConfig('/:brandID/edit', null, {\n                controller  : 'BrandEditDialogController',\n                access  : { \n                }\n              }\n            )\n        )\n\n        // list coupons\n        .state('coupons', \n             __globals.stateConfig('/coupons', 'coupon/manage/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n\n        // list coupons current\n        .state('coupons.current', \n             __globals.stateConfig('/current', 'coupon/manage/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // list coupons expired\n        .state('coupons.expired', \n             __globals.stateConfig('/expired', 'coupon/manage/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // list coupons upcoming\n        .state('coupons.upcoming', \n             __globals.stateConfig('/up-coming', 'coupon/manage/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // list shippings\n        .state('shippings', \n             __globals.stateConfig('/shipping', 'shipping/manage/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // add shipping \n        .state('shippings.add', \n             __globals.stateConfig('/add', null, {\n             \tcontroller  : 'ShippingAddDialogController',\n                access  : { \n                }\n              }\n            )\n        )\n\n        // edit coupon\n        .state('shippings.edit', \n             __globals.stateConfig('/:shippingID/edit', null, {\n                controller  : 'ShippingEditDialogController',\n                access  : { \n                }\n              }\n            )\n        )\n\n        // list taxes\n        .state('taxes', \n             __globals.stateConfig('/taxes', 'tax/manage/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // add tax \n        .state('taxes.add', \n             __globals.stateConfig('/add', null, {\n             \tcontroller  : 'TaxAddDialogController',\n                access  : { \n                }\n              }\n            )\n        )\n\n        // edit tax\n        .state('taxes.edit', \n             __globals.stateConfig('/:taxID/edit', null, {\n                controller  : 'TaxEditDialogController',\n                access  : { \n                }\n              }\n            )\n        )\n\n        // add product\n        .state('product_add', \n             __globals.stateConfig('/product/add', 'product/manage/add', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // add category product\n        .state('category_product_add', \n             __globals.stateConfig('/product/add/:categoryID', 'product/manage/add', {\n                access  : { \n                }\n              }\n            )\n        )\n        \n        // products\n        /*.state('products', \n             __globals.stateConfig('/products', 'product/manage/list', {\n                access  : { \n                }\n              }\n            )\n        )*/\n\n        // products by category id\n       /*.state('category_products', \n             __globals.stateConfig('/:categoryID/category-products', 'product/manage/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n       // products by brand id\n       .state('brand_products', \n             __globals.stateConfig('/:brandId/brand-products', 'product/manage/list', {\n                access  : { \n                }\n              }\n            )\n        )*/\n\n\n        // edit product\n        .state('product_edit', \n             __globals.stateConfig('/product/:productID/edit', 'product/manage/edit', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // edit product\n        .state('product_edit.details', \n             __globals.stateConfig('/details', 'product/manage/edit-details', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // product options\n        .state('product_edit.options', \n             __globals.stateConfig('/options', 'product/manage/options/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n         // product specification\n        .state('product_edit.specification', \n             __globals.stateConfig('/specification', 'product/manage/specification/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n\t\t// edit product ratings\n        .state('product_edit.ratings', \n             __globals.stateConfig('/ratings', 'product/manage/ratings/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // edit product ratings\n        .state('product_edit.faq', \n             __globals.stateConfig('/faqs', 'product/manage/faq/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // edit product ratings\n        .state('product_edit.awating_user', \n             __globals.stateConfig('/awating-user', 'product/manage/awating-user/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // edit product seo meta\n        .state('product_edit.seo_meta', \n             __globals.stateConfig('/seo-meta', 'product/manage/seo-meta/edit', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // pages\n        .state('pages', \n             __globals.stateConfig('/pages/:parentPageID?', 'pages/manage/list', {\n                access  : { \n                },\n                params: {\n                    parentPageID: { squash: true, value: null }\n                }\n              }\n            )\n        )\n\n\n        // add page\n        .state('pages.add', \n             __globals.stateConfig('^/pages/add/', null, {\n                controller  : 'ManagePagesAddDialogController',\n                access  : { \n                }\n              }\n            )\n        )\n\n        // edit page\n        .state('pages.edit', \n             __globals.stateConfig('^/pages/:pageID/edit', null, {\n                controller  : 'ManagePagesEditDialogController',\n                access  : { \n                }\n              }\n            )\n        )\n\n       // page_details\n        .state('page_details', \n             __globals.stateConfig('/details/:pageID/:pageTitle', 'pages/manage/details', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // store_settings_edit\n        .state('store_settings_edit', \n             __globals.stateConfig('/setting', 'store/edit_settings', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // store_settings_edit general \n        .state('store_settings_edit.general', \n             __globals.stateConfig('/general', 'store.general', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // store_settings_edit products\n        .state('store_settings_edit.product', \n             __globals.stateConfig('/product', 'store.product', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // store_settings_edit placements\n        .state('store_settings_edit.placement', \n             __globals.stateConfig('/placements', 'store.placement', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // store_settings_edit currency\n        .state('store_settings_edit.currency', \n             __globals.stateConfig('/currency', 'store.currency', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // store_settings_edit order\n        .state('store_settings_edit.order', \n             __globals.stateConfig('/order', 'store.order', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // store_settings_edit order\n        .state('store_settings_edit.payment', \n             __globals.stateConfig('/payment', 'store.payment', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // store_settings_edit contact\n        .state('store_settings_edit.contact', \n             __globals.stateConfig('/contact', 'store.contact', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // store_settings_edit term_condition\n        .state('store_settings_edit.user', \n             __globals.stateConfig('/users', 'store.user', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // store_settings_edit privacy_policy\n        .state('store_settings_edit.privacy_policy', \n             __globals.stateConfig('/privacy-policy', 'store.privacy-policy', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // store_settings_edit social\n        .state('store_settings_edit.social', \n             __globals.stateConfig('/social', 'store.social', {\n                access  : { \n                }\n              }\n            )\n        )\n\n\t\t// store_settings_edit.social_authentication_setup\n        .state('store_settings_edit.social_authentication_setup', \n             __globals.stateConfig('/social-authentication-setup', 'store.social-login', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // store_settings_edit language\n        .state('store_settings_edit.language', \n             __globals.stateConfig('/language', null, {\n             \tcontroller  : 'LanguageController',\n                access  : { \n                }\n              }\n            )\n        )\n\n        // configuration blog\n        .state('store_settings_edit.email_settings', \n             __globals.stateConfig('/email-settings', 'store.email', {\n                access  : {},\n              }\n            )\n        )\n\n        // configuration footer\n        .state('store_settings_edit.manage_footer_settings', \n             __globals.stateConfig('/manage-footer', 'store.manage-footer', {\n                access  : {},\n              }\n            )\n        )\n\n        // configuration footer\n        .state('store_settings_edit.landing_page', \n             __globals.stateConfig('/landing-page', 'store.landing-page-settings', {\n                controller  : 'LandingPageSettingController as landingPageSettingCtrl',\n                access  : {},\n              }\n            )\n        )\n\n        // store_settings_edit css style\n        .state('css_styles', \n             __globals.stateConfig('/css-style', 'store/css-style', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // slider_setting \n        .state('slider_setting', \n             __globals.stateConfig('/slider-setting', 'slider/manage/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // slider_setting add\n        .state('slider_setting_add', \n             __globals.stateConfig('/slider-setting/add', 'slider/manage/add', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // slider_setting edit Page\n        .state('slider_setting_edit', \n            __globals.stateConfig('/slider-setting/:sliderID/edit', 'slider/manage/edit', {\n            access  : {}\n        } ))\n\n        // product images\n        .state('product_edit.images', \n             __globals.stateConfig('/images', 'product/manage/Images/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // manage orders\n        .state('orders', \n             __globals.stateConfig('/orders', 'order/manage/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // manage order active\n        .state('orders.active', \n            __globals.stateConfig('/active/:userID?', 'order/manage/list', {\n                access  : { \n                },\n                params: {\n                    userID: { squash: true, value: null }\n                }\n              }\n            )\n        )\n\n        // manage order invalid-cancelled\n        .state('orders.cancelled', \n            __globals.stateConfig('/cancelled/:userID?', 'order/manage/list', {\n                access  : { \n                },\n                params: {\n                    userID: { squash: true, value: null }\n                }\n              }\n            )\n        )\n\n        // manage order active\n        .state('orders.completed', \n            __globals.stateConfig('/completed/:userID?', 'order/manage/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // order details\n        .state('order_details', \n             __globals.stateConfig('/order/:orderId/details', 'order/manage/details-view', {\n                access  : { \n                }\n              }\n            )\n        )\n        \n        // manage report active\n        .state('reports', \n            __globals.stateConfig('/report', 'report/manage/list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // manage order report active\n        .state('order_report', \n            __globals.stateConfig('/order-report', 'report/manage/order-report', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // manage payment report active\n        .state('payment_report', \n            __globals.stateConfig('/payment-report', 'report/manage/payment-report', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // manage product report active\n        .state('product_report', \n            __globals.stateConfig('/product-report', 'report/manage/product-report', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        // manage payments list\n        .state('payments', \n            __globals.stateConfig('/payments', 'order/manage/payment-list', {\n                access  : { \n                }\n              }\n            )\n        )\n\n        \n        // invalid request\n        .state('invalid_request', __globals.stateConfig('/invalid-request',\n            'errors/invalid-request'\n        ))\n\n        // not found\n        .state('not_found', __globals.stateConfig('/not-found',\n            'errors.manage-not-exist'\n        ))\n\n        // not exist\n        .state('not_exist', __globals.stateConfig('/not-exist',\n            'errors.manage-not-exist'\n        ))\n\n        // unauthorized\n        .state('unauthorized', __globals.stateConfig('/unauthorized',\n            'errors.unauthorized', {\n            access      : {}\n        }))\n\n\n\t\t // google_social_doc\n        .state('google_social_doc', \n             __globals.stateConfig('/google-setup-steps', 'store.google-help', {\n                access  : { \n                    \n                }\n              }\n            )\n        )\n\n        // facebook_social_doc\n        .state('facebook_social_doc', \n             __globals.stateConfig('/facebook-setup-steps', 'store.facebook-help', {\n                access  : {}\n              }\n            )\n        )\n\n        // twitter_social_doc\n        .state('twitter_social_doc', \n             __globals.stateConfig('/twitter-setup-steps', 'store.twitter-help', {\n                access  : {}\n              }\n            )\n        )\n\n\t\t // github_social_doc\n        .state('github_social_doc', \n             __globals.stateConfig('/github-setup-steps', 'store.github-help', {\n                access  : {}\n              }\n            )\n        )\n\n        // list discounts current\n        .state('email_templates', \n             __globals.stateConfig('/email-templates', 'dynamic-mail-templates/email-template-list', {\n             \tcontroller  : 'EmailTemplateListController as emailTemplateListCtrl',\n              }\n            )\n        )\n\n        // list discounts current\n        .state('show_template', \n             __globals.stateConfig('/:emailTemplateId/templates', 'dynamic-mail-templates/email-template-edit', {\n             \tcontroller  : 'EmailTemplateEditController as emailTemplateEditCtrl',\n             \tresolve: {\n                    // editTemplateData: [\"ConfigurationDataService\", \"$stateParams\", function(ConfigurationDataService, $stateParams) {\n\n                    //    return ConfigurationDataService\n                    //             .fetchEmailTemplate($stateParams.emailTemplateId) // Dynamic Email Data\n                    //             .then(function(response) { \n                    //                 return response;\n                    //             });\n                    // }]\n                }\n              }\n            )\n        )\n\n        // RolePermission list\n        .state('role_permission',\n            __globals.stateConfig('/role-permissions', 'user/role-permission/list', {\n            access  : {\n                // authority:'manage.user.role_permission.read.list'\n            },\n            controller : 'RolePermissionListController as rolePermissionListCtrl'\n        } ))\n\n\t\t;\n\n    };\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t ManageController\n\t-------------------------------------------------------------------------- */\n\t\n\tangular\n        .module('ManageApp.master', [])\n        .controller('ManageController', \t[\n\t\t\t'$rootScope',\n            '__DataStore', \n            '$scope', \n            '__Auth', \n            'appServices', \n            'appNotify', \n\t\t\t'$state',\n            '$transitions',\n\t\t\t'__Utils',\n            ManageController \n\t \t]).controller('HelpController',    [\n            '$rootScope',\n            '$scope', \n            HelpController \n        ]);\n\n  /**\n\t* ManageController for manage page application\n\t*\n\t* @inject $rootScope\n\t* @inject __DataStore\n\t* @inject $scope\n\t* @inject __Auth\n\t* @inject appServices\n\t* @inject appNotify\n\t* \n\t* @return void\n\t*-------------------------------------------------------- */\n\n\tfunction ManageController($rootScope, __DataStore, $scope, __Auth,  appServices, appNotify, $state, $transitions, __Utils) {\n\n\t \tvar scope \t= this;\n\n        scope.pageStatus    = false;\n\n\t \t__Auth.refresh(function(authInfo) {\n\n\t \t\tscope.auth_info = authInfo;\n        \t\n\t \t});\n\n\t \t// update the total new order placed count\n\t \t$rootScope.$on('update.new.order.placed.count', function(event, data) {\n\t \t\t\n\t\t\tscope.newOrderPlacedCount = data.newOrderPlacedCount;\n\t\t});\n\t\t\t\n        scope.unhandledError = function() {\n\n              appNotify.error(__globals.getReactionMessage(19)); // Unhandled errors\n\n        };\n\n        // for toggling options in side bar filter\n        scope.searchSidebarFilter = function(searchterm) {\n        \tif (_.isEmpty(searchterm)) {\n        \t\t$('#lwToggleSidebar .collapse').removeClass('show');\n        \t} else {\n        \t\t$('#lwToggleSidebar .collapse').addClass('show');\n        \t}\n        }\n\n        $rootScope.$on('lw.page.css_styles', function (event, data) {\n\n            scope.pageCSSStyles = data.header_bg_color;\n\n        });\n\n\t \t$rootScope.$on('lw.events.state.change_start', function () {\n\t \t\tappServices.closeAllDialog(); \n\t \t\tvar sw =  document.querySelector(\".show-sweet-alert\");\n            \n            if(sw) {\n             \tvar okButton = $('.sweet-close');\n             \t$(okButton).trigger(\"click\");  \n            }\n            scope.currentStateStatus = false;\n        });\n\n\t \t$rootScope.$on('lw.auth.event.reset', function (event, authInfo) {\n\t \t\tscope.auth_info = authInfo;             \n        });\n\n\t \t$rootScope.$on('lw.form.event.process.started', function (event, data) {\n\n\t \t\t$('button[type=\"submit\"] span').addClass('fa fa-spinner fa-spin');\n\t \t\t$('a, button').prop(\"disabled\", true);\n        \t$('button[type=\"submit\"]').prop(\"disabled\", true);\n\n    \t});\n\n\t \t$rootScope.$on('lw.form.event.process.finished', function (event, data) {\n\n        \t$('button[type=\"submit\"] span').removeClass('fa fa-spinner fa-spin');\n        \t$('button[type=\"submit\"]').prop(\"disabled\", false);\n        \t$('a, button').prop(\"disabled\", false);\n\n    \t} );\n\n        $rootScope.$on('lw.form.event.fetch.started', __globals.showFormLoader );\n\n        $rootScope.$on('lw.datastore.event.fetch.finished', __globals.hideFormLoader );\n\n        $rootScope.$on('lw.form.event.process.error', scope.unhandledError );\n\n        $rootScope.$on('lw.datastore.event.fetch.error', scope.unhandledError );\n\n        scope.showUploadManagerDialog  =  function() {\n            appServices.showDialog(scope, {\n                templateUrl : __globals.getTemplateURL('upload-manager.upload-manager-dialog')\n            },\n            function(promiseObj) {\n\n            });\n        };\n\n        $transitions.onSuccess({}, function($stateEvent) {\n            var $stateInfo = $stateEvent.router.stateService.current;\n            var exceptStates = [\n                'store_settings_edit',\n                'store_settings_edit.general',\n                'store_settings_edit.product',\n                'store_settings_edit.placement',\n                'store_settings_edit.currency',\n                'store_settings_edit.order',\n                'store_settings_edit.contact',\n                'store_settings_edit.term_condition',\n                'store_settings_edit.privacy_policy',\n                'store_settings_edit.social',\n                'store_settings_edit.social_authentication_setup',\n                'store_settings_edit.language',\n                'store_settings_edit.css-style'\n            ],\n            scrollOffsets  = __globals.getScrollOffsets(),\n            yOffset = Math.round(scrollOffsets.y);\n\n            if(!_.includes(exceptStates, $stateInfo.name)) {\n                $('html, body').animate({scrollTop:0}, yOffset < 500 ? 500 : yOffset);\n            };\n        });\n        \n        /**\n          * Open help dialog\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.openHelpDailog = function(templateUrl, templateTitle) {\n\n            scope.templateTitle = templateTitle;\n\n            appServices.showDialog(scope,\n            {\n                templateUrl  : __globals.getTemplateURL(templateUrl)\n            },\n            function(promiseObj) {\n               \n               \n\n            });\n\n        };\n\n\t\t$rootScope.$on('lw-open-login-dialog', function (event, response) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif (!($(\"html\").hasClass(\"lw-manage-login-page-active\"))) {\n\n        \t\t$('html').addClass('lw-manage-login-page-active');\n\t            \n\t            appServices.loginRequiredDialog('login-dialog', response.data, function(result, newData) {\n\t            \t\n\t            \t$('html').removeClass('lw-manage-login-page-active');\n\t                __DataStore.reset();\n\t\t\t\t\t\n\t\t\t\t\tif (result) {\n\t\t\t\t\n\t\t\t\t\t\t$state.reload();\n\n\t\t\t\t\t}\n\n\t\t\t\t});\n        \t}\t\n\n        });\n\n        \n        $.typeahead({\n            input: '.lw-module-search',\n            minLength: 1,\n            order: \"asc\",\n            hint : false,\n            dynamic: true,\n            group: true,\n\t\t\tdelay: 500,\n\t\t\tsearchOnFocus: false,\n            emptyTemplate: \"no result found\",\n            source: {\n                'Application Settings': {\n                    display: [\"keywords\", \"keys\"],\n                    data: [\n                        {\n                            \"keywords\" : \"General Settings\",\n                            \"state\"    : \"store_settings_edit.general\",\n                            \"keys\"     : \"Store Name, Logo, Invoice Logo, Theme Colors, Business Email, Default Home Page Content, Language, TimeZone, Store Address\"\n                        },\n                        {\n                            \"keywords\" : \"Order Settings\",\n                            \"state\"    : \"store_settings_edit.order\",\n                            \"keys\"     : \"Enable Guest Order, Apply Tax, Calculate Tax, Customer Order\"\n                        },\n                        {\n                            \"keywords\" : \"Payment Settings\",\n                            \"state\"    : \"store_settings_edit.payment\",\n                            \"keys\"     : \"Paypal, Check, Bank Transfer, Cod, Stripe, Razorpay, Iyzico, Other, Paytm\"\n                        },\n                        {\n                            \"keywords\" : \"Currency Settings\",\n                            \"state\"    : \"store_settings_edit.currency\",\n                            \"keys\"     : \"Currency, Code, Symbol, Format, Multiple Currencies, Auto Refresh, Currency Markup\"\n                        },\n                        {\n                            \"keywords\" : \"Product Settings\",\n                            \"state\"    : \"store_settings_edit.product\",\n                            \"keys\"     : \"Out Of Stock, Paginated Product, Per Page On List, Enable Rating, Review, Buyers Can Add Rating, Facebook, Twitter, Social Sharing Links\"\n                        },\n                        {\n                            \"keywords\" : \"User Settings\",\n                            \"state\"    : \"store_settings_edit.user\",\n                            \"keys\"     : \"Register, New User, Change Email, Product Wishlist, Recaptcha, captcha, Terms & Conditions\"\n                        },\n                        {\n                            \"keywords\" : \"Social Links Settings\",\n                            \"state\"    : \"store_settings_edit.social\",\n                            \"keys\"     : \"Facebook Username, Twitter Handle, Social Links\"\n                        },\n                        {\n                            \"keywords\" : \"Contact Settings\",\n                            \"state\"   : \"store_settings_edit.contact\",\n                            \"keys\"     : \"Contact Form, Address, Telephone, Contact Page\"\n                        },\n                        {\n                            \"keywords\" : \"Placement and Misc Settings\",\n                            \"state\"   : \"store_settings_edit.placement\",\n                            \"keys\"     : \"Categories Menu, Brand Menu, Credit Info, Google Analytics, Addition Footer, Website Notification, Append Email Message\"\n                        },\n                        {\n                            \"keywords\" : \"Social Login Settings\",\n                            \"state\"   : \"store_settings_edit.social_authentication_setup\",\n                            \"keys\"     : \"Facebook Login, Google Login, Twitter Login, Github Login\"\n                        },\n                        {\n                            \"keywords\" : \"Privacy Policy Settings\",\n                            \"state\"   : \"store_settings_edit.privacy_policy\",\n                            \"keys\"     : \"Privacy\"\n                        },\n                        {\n                            \"keywords\" : \"Email Settings\",\n                            \"state\"   : \"store_settings_edit.email_settings\",\n                            \"keys\"     : \"Mail From Address, Mail From Name, Mail Driver, Port, Host, Mail Username, Mail Encryption, Mail Password, Mail Domain, Mailgun Password, Mail Endpoint\"\n                        },\n                        {\n                            \"keywords\" : \"Footer Settings\",\n                            \"state\"    : \"store_settings_edit.manage_footer_settings\",\n                            \"keys\"     : \"Header Advertisement, Footer Advertisement\",\n                            \"keys\"     : \"Footer Editor\"\n                        },\n                        {\n                            \"keywords\" : \"Landing Page Settings\",\n                            \"state\"    : \"store_settings_edit.landing_page\",\n                            \"keys\"     : \"Slider, Page Content, Latest Product, Featured Product\"\n                        },\n                        {\n                            \"keywords\" : \"Slider Settings\",\n                            \"state\"   : \"slider_setting\",\n                            \"keys\"     : \"Add New Slider, Image Slide, Enable autoplay, Autoplay Speed Product, Edit New Slider\"\n                        },\n                        {\n                            \"keywords\" : \"CSS Style\",\n                            \"state\"    : \"css_styles\",\n                            \"keys\"     : \"CSS Style\"\n                        },\n                        {\n                            \"keywords\" : \"Manage Email Templates\",\n                            \"state\"    : \"css_styles\",\n                            \"keys\"     : \"Template, Name, Email\"\n                        }\n                    ]\n                },\n                'Manage Products': {\n                    display: [\"keywords\", \"keys\"],\n                    data: [\n                        {\n                            \"keywords\" : \"Manage Brands\",\n                            \"state\"    : \"brands\",\n                            \"keys\"     : \"Add Brand, Edit Brand, Status, Logo\"\n                        },\n                        {\n                            \"keywords\" : \"Manage Categories\",\n                            \"state\"    : \"categories\",\n                            \"keys\"     : \"Add Category, Parent Category, Status, Edit Category, Subcategories, Add Products\"\n                        },\n                        {\n                            \"keywords\" : \"Manage Products\",\n                            \"state\"    : \"products\",\n                            \"keys\"     : \"Add Product, Product ID, Mark as Featured, Out of Stock, Comming Soon, Launching On, Available, Categories, Brand, Image, Youtube Video, Old Price, Description, Related Products, Thumbnail, Manage Options, Manage Images, Manage Specifications, Manage Ratings, Manage FAQs, Manage Awating User, Send Notification\"\n                        },\n                        {\n                            \"keywords\" : \"Manage Sepcification Presets\",\n                            \"state\"    : \"specificationsPreset\",\n                            \"keys\"     : \"Add New Preset, Edit Preset\"\n                        }\n                    ]\n                },\n                'Manage Reports and Orders': {\n                    display: [\"keywords\", \"keys\"],\n                    data: [\n                        {\n                            \"keywords\" : \"Manage Orders\",\n                            \"state\"    : \"orders.active\",\n                            \"keys\"     : \"Order ID, Contact User, Order Log, Contact User, Update Payment, Payment Method, Order Status, Refund, Transaction ID, Comment, Completed, Active, Cancelled\"\n                        },\n                        {\n                            \"keywords\" : \"Manage Order Payments\",\n                            \"state\"    : \"payments\",\n                            \"keys\"     : \"Order ID, Transaction ID, Payment Method, Fee, Total Amount\"\n                        },\n                        {\n                            \"keywords\" : \"Order Reports\",\n                            \"state\"    : \"order_report\",\n                            \"keys\"     : \"Order ID, Name, Order Status, Payment Status, Placed On, Total Amount\"\n                        },\n                        {\n                            \"keywords\" : \"Payment Reports\",\n                            \"state\"    : \"payment_report\",\n                            \"keys\"     : \"Credit Amount, Debit Amount, Difference Amount\"\n                        },\n                        {\n                            \"keywords\" : \"Product Report\",\n                            \"state\"    : \"product_report\",\n                            \"keys\"     : \"Product Report, Qty, Title\"\n                        }\n                    ]\n                },\n                'Other': {\n                    display: [\"keywords\", \"keys\"],\n                    data: [\n                        {\n                            \"keywords\" : \"Manage Pages\",\n                            \"state\"    : \"pages\",\n                            \"keys\"     : \"Add Page, Title, Type, Description, Parent Page, Add to menu, Hide Sidebar, Active, List Order\"\n                        },\n                        {\n                            \"keywords\" : \"Manage Users\",\n                            \"state\"    : \"users\",\n                            \"keys\"     : \"New User, First Name, Last Name, Email, Role, Password, Password Confirmation, Change Password, User Order, User Details, Permission, Contact, Active, Deleted, Never Activated\"\n                        },\n                        {\n                            \"keywords\" : \"Manage Roles\",\n                            \"state\"    : \"role_permission\",\n                            \"keys\"     : \"New User Role, Title, Preset, Permission\"\n                        }\n                    ]\n                },\n                'Manage Reports': {\n                    display: [\"keywords\", \"keys\"],\n                    data: [\n                        {\n                            \"keywords\" : \"Order Report\",\n                            \"state\"    : \"order_report\",\n                            \"keys\"     : \"Order Report, Order Payment Report, Order ID, Payment Status, Total, Name, Generate Excel\"\n                        },\n                        {\n                            \"keywords\" : \"Payment Report\",\n                            \"state\"    : \"payment_report\",\n                            \"keys\"     : \"Payment Report, Credit Amount, Debit Amount, Currency, Difference Amount, Generate Excel\"\n                        },\n                        {\n                            \"keywords\" : \"Product Report\",\n                            \"state\"    : \"product_report\",\n                            \"search_term\"   : \"paypal\",\n                            \"keys\"     : \"Product Report, Title, Qty\"\n                        }\n                    ]\n                },\n                'Manage Coupons / Discounts': {\n                    display: [\"keywords\", \"keys\"],\n                    data: [\n                        {\n                            \"keywords\" : \"Manage Coupons\",\n                            \"state\"    : \"coupons\",\n                            \"keys\"     : \"Add New Coupon, Discount, Title, Coupon Code, Discount Type\"\n                        },\n                        {\n                            \"keywords\" : \"Expired Coupons\",\n                            \"state\"    : \"coupons.expired\",\n                            \"keys\"     : \"Expired Coupons\"\n                        },\n                        {\n                            \"keywords\" : \"Up-coming Coupons\",\n                            \"state\"    : \"coupons.upcoming\",\n                            \"keys\"     : \"Up-coming Coupons, Upcoming Coupons\"\n                        },\n                    ]\n                },\n                'Manage Shipping Rules': {\n                    display: [\"keywords\", \"keys\"],\n                    data: [\n                        {\n                            \"keywords\" : \"Manage Shipping Rules\",\n                            \"state\"    : \"shippings\",\n                            \"keys\"     : \"Add Shipping Rule, Edit Shipping Rule, Countries, Charges, Charge Type\"\n                        }\n                    ]\n                },\n                'Manage Shipping Method': {\n                    display: [\"keywords\", \"keys\"],\n                    data: [\n                        {\n                            \"keywords\" : \"Manage Shipping Method\",\n                            \"state\"    : \"shippingType\",\n                            \"keys\"     : \"Add Shipping Method, Edit Shipping Method\"\n                        }\n                    ]\n                },\n                'Manage Taxes': {\n                    display: [\"keywords\", \"keys\"],\n                    data: [\n                        {\n                            \"keywords\" : \"Manage Taxes\",\n                            \"state\"    : \"taxes\",\n                            \"keys\"     : \"Add Tax, Edit Tax, Tax Settings,  Apply Tax\"\n                        }\n                    ]\n                },\n                \n                'search results' : {\n                    display: \"name\",\n                    ajax: function (query, callback) {\n\n                        return {\n                            type : \"GET\",\n                            path : \"searchResult\",\n                            url  : __Utils.apiURL({\n                                        'apiURL'        : 'product.search.term',\n                                        'searchQuery'   : query\n                                    }),\n                            callback: {\n                                done: function (responseData) {\n\n                                \t_.map(responseData.data.searchResult, function(result) {\n\n                                \t\tvar state = '',\n                                \t\t\tparams = {};\n\t\t\t\t\t\t\t\t\t\tswitch(result.type) {\n\t\t\t\t\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\t\t\t\t\tstate = 'product_edit.details';\n\t\t\t\t\t\t\t\t\t\t\t\tparams = {productID : result.id};\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\t\t\t\tstate = 'categories';\n\t\t\t\t\t\t\t\t\t\t\t\tparams = {mCategoryID : result.id};\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\t\t\t\tstate = 'brands.edit';\n\t\t\t\t\t\t\t\t\t\t\t\tparams = {brandID : result.id};\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\t\tstate = '';\n\t\t\t\t\t\t\t\t\t\t\t\tparams = {};\n\t\t\t\t\t\t\t\t\t\t} \n \t\t\t\t\t\t\t\t\t\tresult['state'] = state;\n \t\t\t\t\t\t\t\t\t\tresult['params'] = params;\n                                \t});\n\n                            \t\treturn responseData.data;\n                                }\n                            }\n                        }\n                    },\n                }\n            },\n            callback: {\n                onClick: function (node, a, item, event) {\n                    // You can do a simple window.location of the item.href\n                    $state.go(item.state, item.params);\n        \n                }\n            },\n            debug: true\n        });\n\n\t};\n\n    /**\n    * HelpController for helping information\n    *\n    * @inject $rootScope\n    * @inject $scope\n    * \n    * @return void\n    *-------------------------------------------------------- */\n\n    function HelpController($rootScope, $scope) {\n\n        var scope  = this;\n\n\t\tif (_.has($scope.ngDialogData, 'templateTitle')) {\n\t\t\t   scope.templateTitle =  $scope.ngDialogData.templateTitle;\n\t\t}\n\n\t\tvar $lwCopyToClipboardJS = new ClipboardJS('.lw-copy-action');\n\n\t\t$lwCopyToClipboardJS.on('success', function(ele) {\n\n\t\t\t$(ele.trigger).attr(\"title\", \"Copied!\");\n\n\t\t\tele.clearSelection();\n\n\t\t});\n     \n\n        /**\n          * Close dialog\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.closeDialog = function() {\n            $scope.closeThisDialog();\n        };\n\n    };\n\n})();","/*!\n *  Engine      : UploadManagerEngine \n *  Component   : UploadManager\n----------------------------------------------------------------------------- */\n(function( window, angular, undefined ) {\n\n'use strict';\n\n    /**\n      * UploadManagerEngine\n      *\n      * @inject object __DataStore       -  js-utils data store service for sent http request\n      * @inject object appServices       -  app common service\n      * \n      * @return void\n      *---------------------------------------------------------------------- */\n\n    angular\n        .module('uploadManagerEngine', [])\n\n        /**\n          * UploadManagerController\n          *\n          * @inject object __DataStore       -  js-utils data store service for sent http request\n          * @inject object appServices       -  app common service\n          * \n          * @return void\n          *---------------------------------------------------------------------- */\n\n        .controller('UploadManagerController',[\n            '__DataStore',\n            'appServices',\n            function (__DataStore, appServices) {\n                \n\n            }\n        ])\n\n        /**\n          * UploadManagerDialogController\n          *\n          * @inject object __DataStore       -  js-utils data store service for sent http request\n          * @inject object appServices       -  app common service\n          * \n          * @return void\n          *---------------------------------------------------------------------- */\n          \n        .controller('UploadManagerDialogController',[\n            '__DataStore',\n            'appServices',\n            'FileUploader',\n            '__Utils',\n            '$scope',\n            function (__DataStore, appServices, FileUploader, __Utils, $scope) {\n                \n                var scope    = this,\n                    uploader = scope.uploader = new FileUploader({\n                    url         : __Utils.apiURL('upload_manager.upload'),\n                    autoUpload  : true,\n                    headers     : {\n                        'X-XSRF-TOKEN': __Utils.getXSRFToken()\n                    }\n                });\n\n                scope.close = function() {\n                    $scope.closeThisDialog();\n                };\n\n                /**\n                  * Fetch upload manager files\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.getFiles = function() {\n\n                    __DataStore.fetch('upload_manager.files', { fresh : true })\n                        .success(function(responseData) {\n                            \n                        appServices.processResponse(responseData, null, function() {\n                            scope.files = responseData.data.files\n                        });    \n\n                    });\n\n                };\n\n                scope.getFiles();\n\n                // FILTERS\n                uploader.filters.push({\n                    name: 'customFilter',\n                    fn: function(item /*{File|FileLikeObject}*/, options) {\n                        return this.queue.length < 1000;\n                    }\n                });\n\n                // CALLBACKS\n                uploader.onCompleteItem = function(fileItem, response, status, headers) {\n                    appServices.processResponse(response, null, function() {\n                    });\n                    \n                };\n\n                uploader.onCompleteAll = function() {\n                    scope.getFiles();\n                };\n\n\n                /**\n                  * Select image\n                  *\n                  * @return void\n                  *-------------------------------------------------------- */\n\n                scope.selectImage = function(imgURL) {\n\n                    var imgTag = '<img src=\"'+imgURL+'\"/>',\n                        editor = CKEDITOR.instances['description'];\n                    editor.insertHtml(imgTag);\n\n                    scope.close(); // close dialog\n\n                };\n\n                /**\n                  * Select document\n                  *\n                  * @return void\n                  *-------------------------------------------------------- */\n\n                scope.selectDocument = function(fileURL, fileName) {\n\n                    var linkTag = '<a href=\"'+fileURL+'\"/>'+fileName+'</a>',\n                        editor  = CKEDITOR.instances['description'];\n\n                    editor.insertHtml(linkTag);\n\n                    scope.close(); // close dialog\n\n                };\n\n                /**\n                  * Delete file\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.delete = function(fileName) {\n\n                    __DataStore.post({\n                        'apiURL'    : 'upload_manager.delete',\n                        'fileName'  : fileName\n                    })\n                    .success(function(responseData) {\n                            \n                        appServices.processResponse(responseData, null, function() {\n                            scope.getFiles();\n                        });    \n\n                    });\n\n                };\n\n            }\n        ])\n\n        ;\n\n})(window, window.angular);","(function() {\n'use strict';\n    \n    /*\n       ManageUsersController Module\n      ----------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.manage', [])\n        .controller('ManageUsersController',   [\n            '$scope', \n            '__DataStore',\n            'appServices',\n            ManageUsersController \n        ]).controller('UserAddController',   [\n            '$scope', \n            '__Form',\n            'appServices','__DataStore',\n            UserAddController \n        ]).controller('ContactUserController',   [\n            '$scope', \n            '__Form',\n            'appServices','__DataStore',\n            ContactUserController \n        ])\n        \n\n        /**\n          * Manage User Dynamic Permissions\n          *\n          * @inject $scope\n          * @inject __Form\n          * \n          * @return void\n          *-------------------------------------------------------- */\n        .controller('ManageUsersDynamicPermissionController',   [\n            '$scope',\n            '__Form',\n            '__DataStore',\n            'appServices',\n            function ManageUsersDynamicPermissionController($scope, __Form, __DataStore, appServices) {\n\n                var scope   = this;\n                \n                scope  = __Form.setup(scope, 'user_dynamic_access', 'accessData', {\n                    secured : true,\n                    unsecuredFields : []\n                });\n                \n                scope.ngDialogData  = $scope.ngDialogData;\n                scope.userId  = scope.ngDialogData.userId;\n                scope.fullName = scope.ngDialogData.userFullName;\n                scope.requestData   = scope.ngDialogData.requestData;\n                scope.permissions = scope.requestData.permissions;\n                scope.userRoleTitle  = scope.ngDialogData.requestData.userRoleTitle;\n            \n             \tscope.accessData.allow_permissions = scope.requestData.allow_permissions;\n\t\t\t\tscope.accessData.deny_permissions = scope.requestData.deny_permissions;\n\t\t\t\tscope.accessData.inherit_permissions = scope.requestData.inherit_permissions;\n\n                scope.disablePermissions = function(eachPermission, permissionID) {\n\n                    _.map(eachPermission.children, function(key) {\n                        if (_.includes(key.dependencies, permissionID)) {\n                            _.delay(function(text) {\n                                $('input[name=\"'+key.id+'\"]').attr('disabled', true);\n                            }, 500);\n                        }\n                    });\n\n                }\n\n\t\t\t\tscope.checkedPermission = {};\n\n\t\t\t\t_.map(scope.accessData.allow_permissions, function(permission) {\n\t\t\t\t\tscope.checkedPermission[permission] = \"2\";\n\t\t\t\t});\n\n\t\t\t\t_.map(scope.accessData.deny_permissions, function(permission) {\n\t\t\t\t\tscope.checkedPermission[permission] = \"3\";\n\n\n                    _.map(scope.permissions, function(eachPermission) {\n\n                        var pluckedIDs = _.pluck(eachPermission.children, 'id');\n                        \n                        if (_.includes(pluckedIDs, permission)) {\n                            scope.disablePermissions(eachPermission, permission)\n                        }\n\n                        if (_.has(eachPermission, 'children_permission_group')) {\n                             \n                            _.map(eachPermission.children_permission_group, function(groupchild) {\n\n                                var pluckedIDs = _.pluck(groupchild.children, 'id');\n                        \n                                if (_.includes(pluckedIDs, permission)) {\n                                    scope.disablePermissions(groupchild, permission)\n                                }\n                            });\n                        }\n                    });\n\n\t\t\t\t});\n\n\t\t\t\t_.map(scope.accessData.inherit_permissions, function(permission) {\n\t\t\t\t\tscope.checkedPermission[permission] = \"1\";\n\n                    _.map(scope.permissions, function(eachPermission) {\n\n                        var pluckedIDs = _.pluck(eachPermission.children, 'id');\n                         \n                        if (_.includes(pluckedIDs, permission) && eachPermission.children[0].inheritStatus == false && eachPermission.children[0].result == \"1\") {\n                            scope.disablePermissions(eachPermission, permission);\n                        }\n\n                        if (_.has(eachPermission, 'children_permission_group')) {\n                             \n                            _.map(eachPermission.children_permission_group, function(groupchild) {\n\n                                var pluckedIDs = _.pluck(groupchild.children, 'id');\n                        \n                                if (_.includes(pluckedIDs, permission) && groupchild.children[0].inheritStatus == false && groupchild.children[0].result == \"1\") {\n                                    scope.disablePermissions(groupchild, permission);\n                                }\n\n                            });\n                        }\n                    });\n\t\t\t\t});\n                    \n                //for updating permissions\n                scope.checkPermission = function(childId, status) {\n \t\t\t\t\t\n \t\t\t\t\tif (!_.isString(status)) {\n \t\t\t\t\t\tstatus = status.toString();\n \t\t\t\t\t}\n\n \t\t\t\t\tscope.checkedPermission[childId] = status;\n \t\t\t\t\t\n                 \tif (status == \"2\") {\n                \t\tif(!_.includes(scope.accessData.allow_permissions, childId)) {\n                 \t\t\tscope.accessData.allow_permissions.push(childId);\n                \t\t}\n                 \t\tif (_.includes(scope.accessData.deny_permissions, childId)) {\n                 \t\t\tscope.accessData.deny_permissions = _.without(scope.accessData.deny_permissions, childId);\n                 \t\t}\n                \t} else if (status == \"3\")  {\n\n\t                   \tif(!_.includes(scope.accessData.deny_permissions, childId)) {\n                 \t\t\tscope.accessData.deny_permissions.push(childId);\n                \t\t}\n                 \t\tif (_.includes(scope.accessData.allow_permissions, childId)) {\n                 \t\t\tscope.accessData.allow_permissions = _.without(scope.accessData.allow_permissions, childId);\n                 \t\t}\n                \t} else {\n                \t\tif (_.includes(scope.accessData.deny_permissions, childId)) {\n                 \t\t\tscope.accessData.deny_permissions = _.without(scope.accessData.deny_permissions, childId);\n                 \t\t}\n\t\t\t\t\t\tif (_.includes(scope.accessData.allow_permissions, childId)) {\n                 \t\t\tscope.accessData.allow_permissions = _.without(scope.accessData.allow_permissions, childId);\n                 \t\t}\n                \t}\n\n                \t_.map(scope.permissions, function(permission) {\n\n                        var pluckedIDs = _.pluck(permission.children, 'id'), \n                        keyPermissions = [];\n\n                        if (_.includes(pluckedIDs, childId) && permission.children[0].id == childId) {\n                            \n                            _.map(permission.children, function(key) {\n                                if (_.includes(key.dependencies, childId) && status == \"3\") {\n                                    \n                                    $('input[name=\"'+key.id+'\"]').attr('disabled', true);\n\n                                }  else if (_.includes(key.dependencies, childId) && status == \"1\" && permission.children[0].result && permission.children[0].inheritStatus == false) {\n               \n                                            $('input[name=\"'+key.id+'\"]').attr('disabled', true);\n\n                                        }\n                                else {\n                                    $('input[name=\"'+key.id+'\"]').attr('disabled', false);\n                                }\n\n                            });\n\n                        }\n                        \n\t\t\t\t\t\tif (_.has(permission, 'children_permission_group')) {\n \t\t\t \t\t \t\t_.map(permission.children_permission_group, function(groupchild) {\n\n                                var pluckedGroupChildIDs = _.pluck(groupchild.children, 'id'),\n                                keyPermissionsGroup = [];\n\n                                //for disabling options if read option  in denied\n                                if (_.includes(pluckedGroupChildIDs, childId) && groupchild.children[0].id == childId) {\n                            \n                                    _.map(groupchild.children, function(groupchildkey) {\n                                        if (_.includes(groupchildkey.dependencies, childId) && status == \"3\") {\n                                            $('input[name=\"'+groupchildkey.id+'\"]').attr('disabled', true);\n \n                                        } else if (_.includes(groupchildkey.dependencies, childId) && status == \"1\" && groupchild.children[0].result && groupchild.children[0].inheritStatus == false) {\n               \n                                            $('input[name=\"'+groupchildkey.id+'\"]').attr('disabled', true);\n\n                                        }  else {\n                                            $('input[name=\"'+groupchildkey.id+'\"]').attr('disabled', false);\n                                        }\n                                        \n                                         \n                                    });\n\n                                }\n\t\t\t\t\t\t\t})\n\t\t\t\t\t \t}\n\t\t\t\t\t})\n              \t}\n              \t\n            \n                /*\n                 Submit form action\n                -------------------------------------------------------------------------- */\n\n                scope.submit = function() {\n                    __Form.process({\n                        'apiURL' : 'manage.user.write.user_permissions',\n                        'userId' : scope.userId\n                    }, scope)\n                        .success(function(responseData) {\n                        appServices.processResponse(responseData, null, function() {\n                            // close dialog\n                            $scope.closeThisDialog();\n                        });    \n                    });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n                        \n            }\n        ])\n\n\n    /**\n      * ManageUsersController - show all store users & we can perform actions -\n      * on this users\n      *\n      * @inject __Form\n      * @inject __DataStore\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ManageUsersController($scope, __DataStore, appServices) {\n\n        var dtUsersColumnsData = [\n            {\n                \"name\"      : \"name\",\n                \"template\"  : \"#userNameColumnTemplate\",\n                \"orderable\" : true\n            },\n            {\n                \"name\"      : \"email\",\n                \"orderable\" : true\n            },\n            {\n                \"name\"      : \"role_title\",\n                \"orderable\" : true\n            },\n            {\n                \"name\"      : \"creation_date\",\n                \"orderable\" : true,\n                \"template\"    : \"#creationDateColumnTemplate\"\n            },\n            {\n            \t\"name\"\t\t: \"last_login\",\n            \t\"orderable\" : true,\n                \"template\"  : \"#userLastLoginColumnTemplate\"\n            },\n            {\n                \"name\"      : null,\n                \"template\"  : \"#userActionColumnTemplate\"\n            }\n        ],\n        dtDeletedUserColumndata = [\n            {\n                \"name\"      : \"name\",\n                \"template\"  : \"#userNameColumnTemplate\",\n                \"orderable\" : true\n            },\n            {\n                \"name\"      : \"email\",\n                \"orderable\" : true\n            },\n            {\n                \"name\"      : \"role_title\",\n                \"orderable\" : true\n            },\n            {\n                \"name\"      : \"deleted_on\",\n                \"orderable\" : true\n            },\n            {\n                \"name\"      : \"last_login\",\n                \"orderable\" : true,\n                \"template\"  : \"#userLastLoginColumnTemplate\"\n            },\n            {\n                \"name\"      : null,\n                \"template\"  : \"#userActionColumnTemplate\"\n            }\n        ],\n        tabs    = {\n            'activeTab'    : {\n                id      : 'activeUsersTabList',\n                status  : 1\n            },\n            'deleted'    : {\n                id      : 'deletedUsersTabList',\n                status  : 5\n            },\n            'never_activated'    : {\n                id      : 'neverActivatedUsersTabList',\n                status  : 4\n            }\n        },\n        scope   = this;\n\n\n        // Manage users tab action\n        // When clicking on tab, its related tab data load on same page\n\n        $('#manageUsersTabs a').click(function (e) {\n\n            e.preventDefault();\n\n            var $this       = $(this),\n                tabName     = $this.attr('aria-controls'),\n                selectedTab = tabs[tabName];\n\n            // Check if selected tab exist    \n            if (!_.isEmpty(selectedTab)) {\n\n                $(this).tab('show')\n\n                scope.getUsers(selectedTab.id, selectedTab.status);\n\n            }\n            \n        });\n\n        /**\n          * Get users as a datatable source  \n          *\n          * @param string tableID\n          * @param number status\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n                        \n        scope.getUsers   = function(tableID, status) {\n\n            // destroy if existing instatnce available\n            if (scope.usersListDataTable) {\n                scope.usersListDataTable.destroy();\n            }\n\n            scope.usersListDataTable = __DataStore.dataTable('#'+tableID, { \n                url         : {\n                    'apiURL'    : 'manage.user.list',\n                    'status'    : status\n                }, \n                dtOptions   : {\n                    \"searching\" : true,\n\t\t\t\t\t\"order\"     : [[ 2, \"desc\" ]]\n                },\n                columnsData : status === 5 ? dtDeletedUserColumndata : dtUsersColumnsData, \n                scope       : $scope\n\n            }, null, function(options) {\n                scope.isDemoMode = options._options.isDemoMode;\n            });\n\n        };\n\n        // load initial data for first tab\n        //scope.getUsers('activeUsersTabList', 1);\n        var selectedTab = $('.nav li a[href=\"#activeTab\"]');\n\n        selectedTab.triggerHandler('click', true);\n\n        /*\n          Reload current datatable\n          ------------------------------------------------------------------- */\n        \n        scope.reloadDT = function() {\n            __DataStore.reloadDT(scope.usersListDataTable);\n        };\n\n        /**\n          * Delete user \n          *\n          * @param number userID\n          * @param string userName\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.delete = function(userID, userName) {\n        \t\n            __globals.showConfirmation({\n                text                : __ngSupport.getText(\n                    __globals.getJSString('user_delete_confirm_text'), {\n                        '__name__'    : unescape(userName)\n                    }\n                ),\n                confirmButtonText   : __globals.getJSString('delete_action_button_text')\n            },\n            function() {\n\n                __DataStore.post({\n                    'apiURL'  : 'manage.user.delete',\n                    'userID'  : userID,\n                })\n                .success(function(responseData) {\n                \n                    var message = responseData.data.message;\n\n                    appServices.processResponse(responseData, {\n\n                            error : function() {\n\n                                __globals.showConfirmation({\n                                    title   : 'Deleted!',\n                                    text    : message,\n                                    type    : 'error'\n                                });\n\n                            }\n                        },\n                        function() {\n\n                            __globals.showConfirmation({\n                                title   : 'Deleted!',\n                                text    : message,\n                                type    : 'success'\n                            });\n                            scope.reloadDT();   // reload datatable\n\n                        }\n                    );    \n\n                });\n\n            });\n\n        };\n\n        /**\n          * Restore deleted user \n          *\n          * @param number userID\n          * @param string userName\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.restore = function(userID, userName) {\n\n            __globals.showConfirmation({\n                text                : __ngSupport.getText(\n                    __globals.getJSString('user_restore_confirm_text'),{\n                        '__name__'    : userName\n                    }\n                ),\n                confirmButtonText   : __globals.getJSString('restore_action_button_text')\n            },\n            function() {\n\n                __DataStore.post({\n                    'apiURL'  : 'manage.user.restore',\n                    'userID'  : userID,\n                })\n                .success(function(responseData) {\n                \n                    var message = responseData.data.message;\n\n                    appServices.processResponse(responseData, {\n\n                            error : function() {\n                                __globals.showConfirmation({\n                                    title   : 'Restore!',\n                                    text    : message,\n                                    type    : 'error'\n                                });\n                            }\n                        },\n                        function() {\n\n                            __globals.showConfirmation({\n                                    title   : 'Restore!',\n                                    text    : message,\n                                    type    : 'success'\n                                });\n                            scope.reloadDT();   // reload datatable\n\n                        });    \n\n                    });\n                }\n            );\n\n        };\n\n        /**\n          * Change password of user by Admin \n          *\n          * @param number userID\n          * @param number name\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.changePassword = function (userID, name) {\n        \t\n        \t// open change password dialog\n\t\t\tappServices.showDialog({\n\t\t\t\t\tuserID : userID,\n        \t\t\tname   : unescape(name)\n        \t\t},\n\t\t        {\t\n\t\t            templateUrl : __globals.getTemplateURL('user.manage.change-password')\n\t\t        },\n\t\t        function(promiseObj) {\n\n\t\t        });\n        };\n\n        /**\n          * Change password of user by Admin \n          *\n          * @param number userID\n          * @param number name\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.getUserDetails =function (userID) {\n\n        \t__DataStore.fetch({\n        \t\tapiURL : 'manage.users.get.detail',\n        \t\tuserID : userID\n        \t})\n        \t.success(function(responseData) {\n\n        \t\tvar requestData = responseData.data;\n        \t\t\n        \t\tappServices.processResponse(responseData, null, function() {\n        \t\t\t\n        \t\t\tappServices.showDialog(responseData.data, {\n\n        \t\t\t\ttemplateUrl : __globals.getTemplateURL('user.manage.user-details')\n        \t\t\t},\n        \t\t\tfunction(promiseObj){\n\n        \t\t\t});\n        \t\t});\n        \t});\n        };\n\n\n        /**\n          * user permission dialog\n          * \n          * @return void\n          *---------------------------------------------------------------- */\n\t\tscope.openPermissionDialog = function(userID, userFullName) {\n\n\t\t\t__DataStore.fetch({\n\t        \t'apiURL'\t: 'manage.user.read.user_permissions',\n\t        \t'userId' : userID\n\t        })\n    \t   .success(function(responseData) {\n\n    \t   \t\tvar requestData = responseData.data;\n\n    \t   \t\tappServices.processResponse(responseData, null, function() {\n\n\t\t\t    \tappServices.showDialog({\n\t    \t   \t\t\t'requestData' : requestData,\n\t    \t   \t\t\t'userId'\t: userID,\n\t    \t   \t\t\t'userFullName' : userFullName\n\t    \t   \t\t},\n\t\t\t        {\t\n\t\t\t            templateUrl : __globals.getTemplateURL('user.manage.user-dynamic-permission'),\n\t\t\t            controller: 'ManageUsersDynamicPermissionController as manageUsersDynamicPermissionCtrl',\n\t\t\t        },\n\t\t\t        function(promiseObj) {\n\n\t\t\t        });\n\t\t\t    });\n\t       });\n\n\t\t}\n\n        /**\n          * Contact user dialog\n          * \n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.contactDialog = function (id) {\n\n        \tappServices.showDialog({\n        \t\t'userId': id},\n            {\n                templateUrl : __globals.getTemplateURL(\n                    'user.manage.contact'\n                )\n            },\n            function(promiseObj) {\n\n            });\n        };\n\n        /**\n          * Add new user dialog\n          * \n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.addNewUser = function (id) {\n\n            appServices.showDialog(scope,\n            {\n                templateUrl : __globals.getTemplateURL(\n                    'user.manage.add'\n                )\n            },\n            function(promiseObj) {\n                  \n                if (_.has(promiseObj.value, 'user_added') \n                    && promiseObj.value.user_added == true) {\n                    scope.reloadDT();\n                }\n                \n            });\n        };\n\n    };\n\n    function UserAddController($scope, __Form, appServices, __DataStore) {\n\n        var scope  = this;\n            scope  = __Form.setup(scope, 'add_new_user_form', 'userData');\n\n            __DataStore.fetch('manage.user.add.read.supportData')\n            .success(function(responseData) {\n\n                var requestData = responseData.data;\n                \n                appServices.processResponse(responseData, null, function () {\n\n                     scope.userRoles = requestData.userRoles;\n                    \n                });\n            });\n            \n            /**\n              * Submit register form action\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n            \n            scope.submit = function() {\n\n                 __Form.process('manage.user.add', scope)\n                    .success(function(responseData) {\n                        \n                    appServices.processResponse(responseData, null, function() {\n                        \n                        $scope.closeThisDialog({'user_added':true});\n                    });    \n\n                });\n\n            };\n\n            /**\n            * Close dialog\n            *\n            * @return void\n            *---------------------------------------------------------------- */\n            scope.closeDialog = function() {\n                $scope.closeThisDialog({'user_added':false});\n            };\n    };\n\n    function ContactUserController($scope, __Form, appServices, __DataStore) {\n\n    \tvar scope \t = this;\n\n    \t \tscope    = __Form.setup(scope, 'contact_form', 'userData', {\n\t\t            secured : true,\n                    unsecuredFields : ['message'],\n\t\t        });\n\n\t        // get ng dialog data\n\t        scope.ngDialogData = $scope.ngDialogData;\n\n\t        __DataStore.fetch({\n        \t\t'apiURL' : 'manage.user.contact.info',\n        \t\t'userId' : scope.ngDialogData.userId\n        \t})\n        \t.success(function(responseData) {\n\n        \t\tvar requestData = responseData.data;\n\n        \t\tappServices.processResponse(responseData, null, function () {\n\n        \t\t\tscope.userData = requestData;\n\n    \t\t\t\tscope   = __Form.updateModel(scope, scope.userData)\n        \t\t\t\n        \t\t});\n        \t});\n    \t\t\n\t        /**\n\t          * Submit register form action\n\t          *\n\t          * @return void\n\t          *---------------------------------------------------------------- */\n\t        \n\t        scope.submit = function() {\n\n\t        \t __Form.process('manage.user.contact.process', scope)\n\t                .success(function(responseData) {\n\t                    \n\t                appServices.processResponse(responseData, null, function() {\n\t                \t\n\t                \t$scope.closeThisDialog();\n\t                });    \n\n\t            });\n\n\t        };\n\n\t        /**\n\t  \t  \t* Close dialog\n\t  \t  \t*\n\t  \t  \t* @return void\n\t  \t  \t*---------------------------------------------------------------- */\n\t\t\tscope.closeDialog = function() {\n\t  \t  \t\t$scope.closeThisDialog();\n\t  \t  \t};\n\t};\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManageUserChangePasswordController module\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.manageUserChangePassword', [])\n        .controller('ManageUserChangePasswordController',   [\n        \t'$scope',\n            '__Form', \n            'appServices',\n            ManageUserChangePasswordController \n        ]);\n\n    /**\n      * ManageUserChangePasswordController handle change password by admin\n      * \n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ManageUserChangePasswordController($scope,__Form, appServices) {\n\n        var scope   = this;\n\n        scope = __Form.setup(scope, 'change_password_form', 'changePasswordData', {\n        \t\t\tsecured : true\n                });\n        \n        scope.ngDialogData = $scope.ngDialogData;\n\n        scope.title = __ngSupport.getText(\n                    __globals.getJSString('user_change_password_title_text'), {\n                        '__name__'    : unescape(scope.ngDialogData.name)\n                    });\n\n        // get id of user\n        scope.userID = scope.ngDialogData.userID;\n\n\n        /*\n\t \t Submit form action\n\t \t-------------------------------------------------------------------------- */\n\n\t \tscope.submit = function() {\n            \n            __Form.process({\n                'apiURL'    : 'manage.user.change_password.process',\n                'userID' : scope.userID\n            }, scope)\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                \t\n                \t// close dialog\n\t      \t\t\t$scope.closeThisDialog();\n\n                });    \n\n            });\n\n\t  \t};\n\n\t  \t/**\n\t  \t  * Close dialog\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\n  \t  \tscope.closeDialog = function() {\n  \t  \t\t$scope.closeThisDialog();\n  \t  \t};\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManageUserDetailsDialog module\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.userDetailDialog', [])\n        .controller('ManageUserDetailsDialog',   [\n            '$scope',\n            ManageUserDetailsDialog \n        ]);\n\n    /**\n      * ManageUserDetailsDialog for manage product list\n      *\n      * @inject $scope\n      * @inject __Form\n      * \n      * @return void\n      *-------------------------------------------------------- */\n    function ManageUserDetailsDialog($scope) {\n\n        var scope   = this;\n       \n        scope.ngDialogData  = $scope.ngDialogData;\n        scope.userDetails \t= scope.ngDialogData;\n        \n\t/**\n\t  * Close dialog\n\t  *\n\t  * @return void\n\t  *---------------------------------------------------------------- */\n\t\tscope.closeDialog = function() {\n\t  \t\t$scope.closeThisDialog();\n\t  \t};\n\t            \n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     UserProfileController Module\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.profile', [])\n\n        /**\n          * UserProfileController - edit user profile\n          *\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserProfileController',   [\n            '__Form', \n            'appServices',\n            function (__Form, appServices) {\n\n                var scope   = this;\n\n                scope = __Form.setup(scope, 'user_profile__form', 'profileData');\n\n                scope.request_completed = false;\n\n                __Form.fetch('user.profile.details').success(function(responseData) {\n\n                    appServices.processResponse(responseData, null, function() {\n                        __Form.updateModel(scope, responseData.data.profile);\n                        scope.request_completed = true;\n                    });\n\n                });\n\n            }\n\n        ]);\n\n})();","(function() {\n'use strict';\n    \n    /*\n     UserProfileEditController Module\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.profileEdit', [])\n\n        /**\n          * UserProfileEditController - edit user profile\n          *\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserProfileEditController',   [\n            '__Form', \n            'appServices',\n            function (__Form, appServices) {\n\n                var scope   = this;\n\n                scope = __Form.setup(scope, 'user_profile_edit_form', 'profileData');\n\n                scope.request_completed = false;\n\n                __Form.fetch('user.profile.details').success(function(responseData) {\n\n                    appServices.processResponse(responseData, null, function() {\n                        __Form.updateModel(scope, responseData.data.profile);\n                        scope.request_completed = true;\n                    });    \n\n                });\n\n                /**\n                  * Submit profile edit form action\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function() {\n                    \n                    __Form.process('user.profile.update', scope)\n                    .success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function() {\n                        });    \n\n                    });\n\n                };\n\n            }\n             \n        ]);\n\n})();","(function() {\n'use strict';\n    \n    /*\n     UserChangePasswordController Module\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.changePassword', [])\n\n        /**\n          * UserChangePasswordController - change user password\n          *\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserChangePasswordController',   [\n            '__Form', \n            'appServices',\n            '__Utils',\n            '$state',\n            function (__Form, appServices, __Utils, $state) {\n\n                var scope   = this;\n\n                scope = __Form.setup(scope, 'user_password_update_form', 'userData', {\n                    secured : true\n                });\n\n                /**\n                  * Submit update password form action\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function() {\n\n                    __Form.process('user.change_password.process', scope)\n                    .success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function() {\n                            scope.userData = {};\n                            \n                            if (document.location.href == responseData.data.passwordRoute) {\n                            \twindow.location = window.appConfig.appBaseURL;\n                            } else {\n                            \t$state.go('dashboard');\n                            }\n                            \n                        });    \n\n                    });\n\n                };\n\n            } \n        ]);\n\n})();","(function() {\n'use strict';\n    \n    /*\n     UserChangeEmailController Module\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.changeEmail', [])\n\n        /**\n          * UserChangeEmailController - handle chnage email form view js scope\n          *\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserChangeEmailController',   [\n            '__Form', \n            'appServices',\n            function (__Form, appServices) {\n\n                var scope   = this;\n\n                scope.requestSuccess  = false;\n                scope.pageStatus = false;\n\n                scope = __Form.setup(scope, 'user_change_email_form', 'userData', {\n                    secured : true\n                });\n\n                /**\n                  * Fetch support data\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                __Form.fetch('user.change_email.support_data')\n                    .success(function(responseData) {\n                \n                    var requestData     = responseData.data;\n                    \n                    appServices.processResponse(responseData, null, function() {\n                            \n                        scope.changeEmail = requestData.newEmail;\n                        scope.formattedDate = requestData.formattedDate;\n                        scope.humanReadableDate = requestData.humanReadableDate;\n\n                        scope.pageStatus = true;\n                        \n                    });    \n\n                });\n                \n                /**\n                  * Submit change email form action\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function() {\n\n                    __Form.process('user.change_email.process', scope)\n                    .success(function(responseData) {\n\n                        var requestData = responseData.data;\n\n                        appServices.processResponse(responseData, null,\n                        function() {\n                            scope.userData = {};\n                            if (responseData.reaction == 1) {\n                                scope.activationRequired = requestData.activationRequired;\n\n                                scope.requestSuccess = true;\n\n                                $('.lw-form').slideUp();\n                            }\n                        });    \n\n                    });\n\n                };\n\n            }\n            \n        ]);\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t CategoryController\n\t-------------------------------------------------------------------------- */\n\t\n\tangular\n        .module('ManageApp.category', [])\n        .controller('CategoryController', \t[\n            '$scope', \n            '__DataStore', \n            'appServices',\n            '$state',\n            '__Utils',\n            '$rootScope',\n            CategoryController \n\t \t]);\n\n\t/**\n\t * CategoryController for admin.\n\t *\n\t * @inject __DataStore\n\t * @inject $scope\n\t * @inject $state\n\t * \n\t * @return void\n\t *-------------------------------------------------------- */\n\n\tfunction CategoryController($scope, __DataStore, appServices, $state, __Utils, $rootScope) {\n\n\t \tvar scope   \t\t\t= this,\n\t\t \tcatID \t\t\t\t= _.isEmpty($state.params.mCategoryID)\n\t\t\t \t\t\t\t \t\t? null \n\t\t\t \t\t\t\t \t\t: $state.params.mCategoryID,\n\t\t \tcurrentStateName \t= $state.current.name;\n\n\t\t// Get current state name\n\t \tscope.currentStateName \t\t\t= currentStateName;\n\n\t \tscope.pageContentLoaded \t\t= false;\n\t \tscope.parentCategoryExist \t\t= false;\n\n\t \t// Get category ID\n\t\tscope.categoryID = catID;\n\t\t \t\n \t\tscope.dtCategoriesColumnsData = [\n\t        {\n\t            \"name\"      : \"name\",\n\t            \"orderable\" :  true,\n\t            \"template\"  : \"#categoriesColumnActionSubcategories\"\n\t        },\n\t        {\n\t            \"name\"      : \"status\",\n\t            \"orderable\" :  true,\n\t            \"template\"  : \"#categoriesColumnStatus\"\n\t        },\n\t        {\n\t            \"name\"      : null,\n\t            \"template\"  : \"#categoriesColumnActionAddcategory\"\n\t        },\n\t        {\n\t            \"name\"      : null,\n\t            \"template\"  : \"#categoriesColumnActionAddProduct\"\n\t        },\n\t        {\n\t            \"name\"      : null,\n\t            \"template\"  : \"#categoriesColumnActionTemplate\"\n\t        }\n    \t];\n        // var tabs    = {\n        //     'manageCategories'    : {\n        //             id      : 'categoriesTabList',\n        //             route   : 'categories'\n        //     },\n        // };\n\n        // Fired when clicking on tab    \n        // $('#manageCategoryTab a').click(function (e) {\n\n        //     e.preventDefault();\n\n        //     var $this       = $(this),\n        //         tabName     = $this.attr('aria-controls'),\n        //         selectedTab = tabs[tabName];\n\n        //     // Check if selectedTab exist    \n        //     if (!_.isEmpty(selectedTab)) {\n\n        //         $(this).tab('show')\n        //         //scope.getCategories(selectedTab.id);\n\n        //     }\n            \n        // });\n\n        // if ($rootScope.canAccess('manage.category.list')) {\n        //     var selectedTab = $('.nav li a[href=\"#manageCategories\"]');\n\n        //     selectedTab.triggerHandler('click', true);\n        // }\n        \n\n\t \t/**\n\t      * Get datatable source data.\n\t      *\n\t      * @return void\n\t      *---------------------------------------------------------------- */\n\t      \n\t    scope.getCategories  = function() {\n\t    \t\n\t    \t// destroy instance of datatable\n\t    \tif (scope.categoriesDataTable) {\n\t            scope.categoriesDataTable.destroy();\n\t        }\n\n            scope.categoriesDataTable = __DataStore.dataTable('#categoriesTabList', {\n\t            url : {\n                    'apiURL'        : 'manage.category.list',\n                    'categoryID?'   : catID\n                },\n\t            dtOptions   : {\n\t                \"searching\" : true\n\t            },\n\t            columnsData : scope.dtCategoriesColumnsData, \n\t            scope       : $scope,\n\n\t        });\n            \n            // if category ID exist\n\t        if (catID) {\n\t        \t__DataStore.fetch({\n\t                'apiURL' : 'category.get.supportData',\n\t                'catID'  : catID\n              \t}).success(function(responseData) {\n                    \n                    appServices.processResponse(responseData, null, function() {\n                        scope.parentCategory        = responseData.data.categoryData;\n                        scope.isParentInactive      = scope.parentCategory.status;\n                        scope.pageContentLoaded     = true;\n                        scope.parentCategoryExist   = true;\n                        scope.parentData            =  responseData.data.parentData;\n                        scope.isInactiveParent = responseData.data.isInactiveParent;\n                    });\n\n\t            });\n \t\t\t} else if (!_.isEmpty($state.params.brandID)) {\n \t\t\t\t\n\t            url = {\n\t              'apiURL'     : 'manage.brand.product.list',\n\t               'brandId'   : $state.params.brandID\n\t            };\n\n\n\t        } else {\n\t        \tscope.pageContentLoaded = true;\n\t        }\n\t\t};\n\n\n        if (_.isEmpty($state.params.mCategoryID)) {\n            _.defer(function() {\n\t\t\t\tscope.getCategories();\n\t\t\t});\n        }\n\n        if (!_.isEmpty($state.params.mCategoryID)) {\n            scope.getCategories();\n        }\n\n\n\t    /**\n          * Go to categories URL\n          *\n          * @param $event\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n     //    scope.goToCategories = function ($event) {\n\t    //     $event.preventDefault(); \n\t    //     $state.go('categories', {'mCategoryID' : catID});\n\t    // };\n       \n\n\t    /**\n          * Go to products URL \n          *\n          * @param $event\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n     //    scope.goToProducts = function ($event) {\n\t    //     $event.preventDefault();\n\t    //     $state.go('products', {'mCategoryID' : catID});\n\t    // };\n\n\n\t    /*\n\t     * Reload current datatable\n\t     *\n\t     *------------------------------------------------------------------ */\n\t    \n\t    scope.reloadDT = function () {\n\t        __DataStore.reloadDT(scope.categoriesDataTable);\n\t    };\n\n        /**\n\t      * Get detail dialog.\n\t      *\n\t      * @return void\n\t      *---------------------------------------------------------------- */\n\t    scope.detailDialog = function (productID) {\n\n\t    \t__DataStore.fetch({\n\t        \t'apiURL'\t: 'manage.product.detailSupportData',\n\t        \t'productID'\t: productID\n\t        })\n    \t   .success(function(responseData) {\n\n    \t   \t\tvar requestData = responseData.data;\n\n\t\t    \tappServices.showDialog(requestData,\n\t\t        {\t\n\t\t            templateUrl : __globals.getTemplateURL(\n\t\t                    'product.manage.detail-dialog'\n\t\t                )\n\t\t        },\n\t\t        function(promiseObj) {\n\n\t\t        });\n\t       });\n\t    }\n\n\t    /**\n          * Add new category\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.add   = function(catID) {\n        \n        \tthis.catID = catID;\n\n        \t__DataStore.fetch('category.fancytree.support-data')\n\t\t\t\t\t.success(function(responseData) {\n\n          \t\t\tscope.categories = responseData.data.categories;\n          \t\t\n\t          \t\tappServices.showDialog(scope,\n\t                {\n\t                    templateUrl : __globals.getTemplateURL(\n\t                            'category.add-dialog'\n\t                        )\n\t                },\n\t                function(promiseObj) {\n\n\t                    // Check if category updated\n\t                    if (_.has(promiseObj.value, 'category_added') \n\t                        && promiseObj.value.category_added === true) {\n\t                        scope.reloadDT();\n\t                    }\n\n\t                });\n\t    \t});\n            \n\n        };\n\n        /**\n          * Fetch category details & show edit category dialog\n          *\n          * @param number catID\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.edit   = function(catID) {\n\n            __DataStore.fetch({\n                    'apiURL'    : 'manage.category.get.details',\n                    'catID'     :  catID\n                })\n                .success(function(responseData) {\n                \n                    appServices.processResponse(responseData, null, function() {\n\n                    \tscope.categoryData = responseData.data;\n                    \t\n                    \tif (responseData.data.status === 0)\n\t\t\t\t\t\t{\n                       \t\tscope.categoryData.status = false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tscope.categoryData.status = true;\n\t\t\t\t\t\t}\n\n                        appServices.showDialog({\n                            'id'        :scope.categoryData.id,\n\t\t  \t\t\t\t\t'name'      :scope.categoryData.name,\n\t\t  \t\t\t\t\t'status'    :scope.categoryData.status,\n\t\t  \t\t\t\t\t'parent_cat':scope.categoryData.parent_id\n                        },\n                        {\n                            templateUrl : __globals.getTemplateURL(\n                                    'category.edit-dialog'\n                                )\n                        },\n                        function(promiseObj) {\n\n                            // Check if category updated\n                            if (_.has(promiseObj.value, 'category_updated') \n                                && promiseObj.value.category_updated === true) {\n                                scope.reloadDT();\n                            \tscope.getProducts();\n\n                            }\n\n                        }\n                    );\n\n                });    \n\n            });\n\n        };\n\n\t    /**\n\t    * delete category\n\t    *\n\t    * @param int categoryID \n\t    * @param string  name \n\t    *\n\t    * @return void\n\t    *---------------------------------------------------------------- */\n\t    \n\t    scope.deleteDialog  =  function(categoryID, name) \n\t    { \t\n\t    \tappServices.showDialog({\n\t    \t\tcategoryID : categoryID,\n\t    \t\tname \t   : name\n\t    \t},\n\t        {\t\n\t            templateUrl : __globals.getTemplateURL(\n\t                'category.delete-dialog'\n\t            )\n\t        }, function(promiseObj) {\n\t        \t\n\t        \tif (_.has(promiseObj.value, 'category_deleted') \n                    && promiseObj.value.category_deleted === true) {\n\t        \t\t\n\t        \t\tscope.reloadDT();\n\n                }\n\t        });\n\t\t\t\t    \n\t\t};\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     CategoryAddDialogController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.categoryAddDialog', [])\n        .controller('CategoryAddDialogController',   [\n        \t'$scope',\n        \t'$state',\n            'appServices',\n            '__DataStore',\n            CategoryAddDialogController \n        ]);\n\n    /**\n      * CategoryAddDialogController open add category form in dialog\n      * @inject $scope\n      * @inject $state\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function CategoryAddDialogController($scope, $state, appServices, __DataStore) {\n\n    \tvar scope   = this;\n\n    \t__DataStore.fetch('category.fancytree.support-data')\n\t\t\t\t.success(function(responseData) {\n\t\t\t\t\n          \t\tscope.categories = responseData.data.categories;\n                scope.specificationPreset = responseData.data.specificationPreset;\n          \t\tappServices.showDialog(scope,\n\t\t        {\t\n\t\t            templateUrl : __globals.getTemplateURL(\n\t\t                    'category.add-dialog'\n\t\t                )\n\t\t        },\n\t\t        function(promiseObj) {\n\t\t            // Check if category added\n\t\t            if (_.has(promiseObj.value, 'category_added') \n\t\t                && promiseObj.value.category_added === true) {\n\t\t            \t$scope.$parent.categoryCtrl.reloadDT();\n\t\t            }\n\t\t            $state.go('categories');\n\t\t        });\n\t    });\n        \n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     CategoryAddController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.categoryAdd', [])\n        .controller('CategoryAddController',   [\n        \t'$scope',\n            '__Form', \n            '$state',\n            'appServices',\n            '__DataStore',\n            CategoryAddController \n        ]);\n\n    /**\n      * CategoryAddController handle add category form\n      * \n      * @inject $scope\n      * @inject __Form\n      * @inject $state\n      * @inject appServices\n      * @inject __Utils\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function CategoryAddController($scope,__Form, $state, appServices, __DataStore) {\n\n        var scope   = this;\n\n        scope = __Form.setup(scope, 'category_add_form', 'categoryData');\n\n        scope.categoryStatus\t\t  = false;\n        scope.categoryData.status     = true;\n\n        scope.assign_specification_select_config = __globals.getSelectizeOptions({\n            valueField  : '_id',\n            labelField  : 'title',\n            searchField : [ 'title' ]\n        });\n\n        if ($scope.ngDialogData.catID) {\n        \t\n        \tscope.categoryData.parent_cat = $scope.ngDialogData.catID;\n        } else {\n        \tscope.categoryData.parent_cat = $state.params.mCategoryID;\n        }\n\n\t\tscope.categoryData.categories = $scope.ngDialogData.categories;\n\n\t\t _.forEach(scope.categoryData.categories, function(value) {\n\n\t\t\tif (value.key == scope.categoryData.parent_cat) {\n\n\t\t\t\tscope.categoryStatus = true;\n\n\t\t\t\tscope.categoryName = __ngSupport.getText(\n                    __globals.getJSString('category_add_title_text'), {\n                        '__name__'    : value.title\n                    });\n\t\t\t}\n        });\n\n\t\t/*\n\t \t Submit form action\n\t \t-------------------------------------------------------------------------- */\n\n\t \tscope.submit = function() {\n          \n\t \t\t__Form.process('manage.category.add', scope)\n\t \t\t\t\t\t\t.success(function(responseData) {\n\t\t      \t\t\n\t\t\t\tappServices.processResponse(responseData, null, function(reactionCode) {\n\n\t                // close dialog\n\t      \t\t\t$scope.closeThisDialog({ category_added : true });\n\n\t            });\n\n\t\t    });\n\n\t  \t};\n\n\t  \t/**\n\t  \t  * Close dialog\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\n  \t  \tscope.closeDialog = function() {\n  \t  \t\t$scope.closeThisDialog();\n  \t  \t};\n    };\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t CategoryEditDialogController\n\t-------------------------------------------------------------------------- */\n\t\n\tangular\n        .module('ManageApp.categoryEditDialog', [])\n        .controller('CategoryEditDialogController', \t[\n            '$scope', \n            '$state', \n            'appServices',\n            '__DataStore',\n            CategoryEditDialogController \n\t \t]);\n\n\t/**\n\t * Handle category edit dialog scope\n\t *\n     * @inject $scope\n\t * @inject __Form\n\t * @inject $scope\n\t * \n\t * @return void\n\t *-------------------------------------------------------- */\n\n\tfunction CategoryEditDialogController($scope, $state, appServices, __DataStore) {\n\n\t \tvar scope   = this;\n\n        __DataStore.fetch({\n        \t'apiURL': 'manage.category.get.details',\n        \t'catID': $state.params.catID\n        })\n\t   .success(function(responseData) {\n\n\t\t\tappServices.processResponse(responseData,null, function(reactionCode) {\n\n\t\t\t\tappServices.showDialog(responseData.data,{\n\t                templateUrl : __globals.getTemplateURL(\n\t                        'category.edit-dialog'\n\t                    )\n\t            },\n\t            function(promiseObj) {\n\t\t\t\t\t\t\n\t\t\t\t\t// Check if category updated\n                    if (_.has(promiseObj.value, 'category_updated') \n                        && promiseObj.value.category_updated === true) {\n                        $scope.$parent.categoryCtrl.reloadDT();\n                    \t//$scope.$parent.categoryCtrl.productReloadDT();\n                    }\n                    $state.go('categories');\n\t\t\t\t\n                });\n\t\t\t});\n\t\t});\n\t};\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t CategoryController\n\t-------------------------------------------------------------------------- */\n\t\n\tangular\n        .module('ManageApp.categoryEdit', [])\n        .controller('CategoryEditController', [\n            '$scope',\n            '__Form',\n            '$state',\n            'appServices',\n            CategoryEditController \n\t \t]);\n\n\t/**\n\t * CategoryController for admin.\n\t *\n\t * @inject __DataStore\n\t * @inject $scope\n\t * @inject $state\n\t * \n\t * @return void\n\t *-------------------------------------------------------- */\n\n\tfunction CategoryEditController($scope, __Form, $state, appServices) {\n\n\t \tvar scope = this;\n\t \t\tscope.categoryStatus\t\t  = false;\n            \n            scope.assign_specification_select_config = __globals.getSelectizeOptions({\n                valueField  : '_id',\n                labelField  : 'title',\n                searchField : [ 'title' ]\n            });\n\n            scope.categoryId = $state.params.catID;\n\t \t\t\n\t\t\tscope.updateURL = {\n\t\t\t\t'apiURL'\t:'manage.category.update',\n\t\t\t\t'catID' \t: $state.params.catID\n\t\t\t};\n\n\t\t\tscope \t= __Form.setup(scope, 'form_category_edit', 'categoryData');\n\t\t\tscope   = __Form.updateModel(scope, $scope.ngDialogData);\n\n\t\t\tscope.categoryData.parent_cat = $scope.ngDialogData.parent_id;\n\n\t\t\tscope.categoryData.categories = $scope.ngDialogData.categories;\n\t\t\t\n\n\t\t\t _.forEach(scope.categoryData.categories, function(value) {\n\n\t\t\t\tif (value.key == scope.categoryData.parent_cat) {\n\t\t\t\t\tscope.categoryStatus = true;\n\t\t\t\t\tscope.categoryName = value.title;\n\t\t\t\t}\n        \t});\n\n\t\t\t/**\n\t\t\t * Update category.\n\t\t\t *\n\t\t\t * \n\t\t\t * @return void\n\t\t\t *-------------------------------------------------------- */\n\t\t\tscope.update = function() {\n\n\t\t \t\t// post form data\n\t\t \t\t__Form.process(scope.updateURL, scope )\n\t\t \t\t\t\t\t\t.success( function( responseData ) {\n\t\t\t      \t\t\n\t\t\t\t\tappServices.processResponse(responseData, function(reactionCode) {\n\n\t\t                if (reactionCode === 1) {\n\t\t                \t// close dialog\n\t\t      \t\t\t\t$scope.closeThisDialog( { category_updated : true } );\n\t\t      \t\t\t\t\n\t\t                }\n\n\t\t            });\n\n\t\t\t    });\n\n\t\t  \t};\n\n\t\t  \t/**\n\t  \t  * Close dialog and return promise object\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\n  \t  \tscope.closeDialog = function() {\n  \t  \t\t$scope.closeThisDialog();\n  \t  \t\t$state.go('categories');\n  \t  \t};\n\n\n\t};\n\n})();","(function() {\n'use strict';\n    \n    /*\n     Login Controller\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.categoryDelete', [])\n        .controller('CategoryDeleteController',   [\n            '$scope',\n            '__Form',  \n            'appServices',\n            '$state',\n            '__DataStore',\n            CategoryDeleteController \n        ]);\n\n    /**\n      * CategoryDeleteController for delete category\n      * @inject __Form\n      * @inject appServices\n      * @inject $state\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function CategoryDeleteController($scope, __Form, appServices, $state, __DataStore) {\n\n        var scope   = this;\n\n        scope = __Form.setup(scope, 'form_category_delete', 'categoryData', {\n            secured : true\n        });\n        \n        scope.categoryID    = $scope.ngDialogData.categoryID;\n        scope.categoryName\t= _.unescape($scope.ngDialogData.name);\n\n        /**\n          * Submit delete action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.submit = function(categoryID) {\n\n        \t__Form.process({\n                    'apiURL'     : 'manage.category.delete',\n                    'categoryID' : categoryID,\n                }, scope).success(function(responseData) {\n\t\t      \t\t\n\t\t\t\tappServices.processResponse(responseData, function(reactionCode) {\n\n\t                if (reactionCode === 1) {\n\t                \t// close dialog\n\t      \t\t\t\t$scope.closeThisDialog({category_deleted : true});\n\t\t\t\t\t}\n\n\t            });\n\n\t\t    });\n        };\n\n        /**\n          * Close dialog and return promise object\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.closeDialog = function() {\n        \t$scope.closeThisDialog();\n\t\t}\n\t};\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t BrandListController\n\t-------------------------------------------------------------------------- */\n\t\n\tangular\n        .module('ManageApp.brand', [])\n        .controller('BrandListController', \t[\n            '$scope', \n            '__DataStore', \n            'appServices',\n            BrandListController \n\t \t]);\n\n\t/**\n\t * BrandListController for admin.\n\t *\n\t * @inject $scope\n\t * @inject __DataStore\n\t * @inject $appServices\n\t * \n\t * @return void\n\t *-------------------------------------------------------- */\n\n\tfunction BrandListController($scope, __DataStore, appServices) {\n\n\t\tvar scope   = this,\n\t\t\tdtProductsColumnsData = [\n                {\n                    \"name\"      : \"logo_url\",\n                    \"template\"  : \"#brandLogoColumnTemplate\"\n                },\n                {\n                    \"name\"      : \"name\",\n                    \"orderable\" : true,\n                    \"template\"  : \"#brandNameColumnTemplate\"\n                },\n                {\n\t                \"name\"      : \"creation_date\",\n\t                \"orderable\" : true,\n\t                \"template\"  : \"#brandCreatedDateColumnTemplate\"\n\t            },\n                {\n\t                \"name\"      : \"status\",\n\t                \"orderable\" :  true,\n\t                \"template\"  : \"#statusColumnTemplate\"\n\t            },\n\t            {\n\t                \"name\"      : null,\n\t                \"template\"  : \"#brandColumnActionTemplate\"\n\t            }\n            ];\n\t\t\t\n         scope.brandsListDataTable = __DataStore.dataTable('#manageBrandList', {\n            url         : \"manage.brand.list\",\n            dtOptions   : {\n                \"searching\": true,\n                \"order\": [[ 1, \"asc\" ]],\n                \"rowCallback\": function(row, data, dataIndex) {\n                    $('td:eq(0)', row).css(\"text-align\", \"center\");\n                    $('td:eq(1)', row).css(\"text-align\", \"center\");\n                }\n            },\n            columnsData : dtProductsColumnsData, \n            scope       : $scope\n\n        });\n\n\t    /*\n\t     Reload current datatable\n\t    -------------------------------------------------------------------- */\n\t    \n\t    scope.reloadDT = function () {\n\t        __DataStore.reloadDT(scope.brandsListDataTable);\n\t    };\n\n\t    /**\n\t      * Get detail dialog.\n\t      *\n\t      * @return void\n\t      *---------------------------------------------------------------- */\n\t    scope.detailDialog = function (brandID) {\n\n\t    \t__DataStore.fetch({\n\t        \t'apiURL'\t: 'manage.brand.detailSupportData',\n\t        \t'brandID'\t: brandID\n\t        })\n    \t   .success(function(responseData) {\n\n    \t   \t\tvar requestData = responseData.data;\n    \t   \t\t\n    \t   \t\tappServices.processResponse(responseData, null, function() {\n\n\t\t\t    \tappServices.showDialog(requestData,\n\t\t\t        {\t\n\t\t\t            templateUrl : __globals.getTemplateURL(\n\t\t\t                    'brand.manage.detail-dialog'\n\t\t\t                )\n\t\t\t        },\n\t\t\t        function(promiseObj) {\n\n\t\t\t        });\n\t\t\t    });\n\t       });\n\t    }\n\n\t    /**\n\t     * delete brand\n\t     * @param brandID\n\t     * @param brandName\n\t     * \n\t    -------------------------------------------------------------------- **/\n\t    scope.delete = function(brandID, brandName) {\n\t    \t/*__globals.showConfirmation({\n                text                : __ngSupport.getText(\n                    __globals.getJSString('brand_delete_text'), {\n                        '__name__'     : unescape(brandName)\n                    }\n                ),\n                confirmButtonText   : __globals.getJSString('delete_action_button_text')\n            }, function() {\n\n                __DataStore.post({\n                    'apiURL' \t: 'manage.brand.delete',\n                    'brandID' \t: brandID,\n                })\n                .success(function(responseData) {\n                \n                    var message = responseData.data.message;\n                   \n                    appServices.processResponse(responseData, {\n                    \t\n                            error : function(data) {\n                                __globals.showConfirmation({\n                                    title   : __globals.getJSString('confirm_error_title'),\n                                    text    : message,\n                                    type    : 'error'\n                                });\n\n                            }\n                        },\n                        function(data) {\n                        \t\n                            __globals.showConfirmation({\n                                title   : __globals.getJSString('confirm_error_title'),\n                                text    : message,\n                                type    : 'success'\n                            });\n                            scope.reloadDT();   // reload datatable\n\n                        }\n                    );    \n\n                });\n\n            });*/\n\n            appServices.showDialog({\n                    brandId     : brandID,\n                    brandName   : unescape(brandName)\n                },\n                {   \n                    templateUrl : __globals.getTemplateURL('brand.manage.delete-dialog')\n                },\n                function(promiseObj) {\n                    \n                    if (_.has(promiseObj.value, 'brand_deleted') && promiseObj.value.brand_deleted) {\n                        scope.reloadDT();\n                    }\n\n            });\n\n\t    }\n\n\t};\n\n})();","(function() {\n'use strict';\n    \n    /*\n     BrandDetailDialogController module\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.brandDetailDialog', [])\n        .controller('BrandDetailDialogController',   [\n            '$scope',\n            BrandDetailDialogController \n        ]);\n\n    /**\n      * BrandDetailDialogController for manage product list\n      *\n      * @inject $scope\n      * @inject __Form\n      * \n      * @return void\n      *-------------------------------------------------------- */\n    function BrandDetailDialogController($scope) {\n\n        var scope   = this;\n       \n        scope.ngDialogData  = $scope.ngDialogData;\n\t    scope.brandData \t= scope.ngDialogData;\n\n\t/**\n\t  * Close dialog\n\t  *\n\t  * @return void\n\t  *---------------------------------------------------------------- */\n\t\tscope.closeDialog = function() {\n\t  \t\t$scope.closeThisDialog();\n\t  \t};\n\t            \n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     BrandAddDialogController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.brandAddDialog', [])\n        .controller('BrandAddDialogController',   [\n        \t'$scope',\n        \t'$state',\n            'appServices',\n            BrandAddDialogController \n        ]);\n\n    /**\n      * BrandAddDialogController open add brand form in dialog\n      * @inject $scope\n      * @inject $state\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function BrandAddDialogController($scope, $state, appServices) {\n\n    \tvar scope   = this;\n\n    \tappServices.showDialog(scope,\n        {\t\n            templateUrl : __globals.getTemplateURL(\n                    'brand.manage.add-dialog'\n                )\n        },\n        function(promiseObj) {\n\n            // Check if brand added\n            if (_.has(promiseObj.value, 'brand_added') \n                && promiseObj.value.brand_added === true) {\n            \t$scope.$parent.brandListCtrl.reloadDT();\n            }\n            $state.go('brands');\n        });\n        \n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     BrandAddController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.brandAdd', [])\n        .controller('BrandAddController',   [\n        \t'$scope',\n        \t'__Form',\n        \t'appServices',\n        \t'FileUploader',\n        \t'__Utils',\n        \t'appNotify',\n            BrandAddController \n        ]);\n\n    /**\n      * BrandAddController handle add category form\n      * \n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * @inject FileUploader\n      * @inject __Utils\n      * @inject appNotify\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function BrandAddController($scope, __Form, appServices, FileUploader, __Utils, appNotify) {\n\n        var scope   = this;\n\n        scope = __Form.setup(scope, 'manage_brand_add', 'brandData',\n\t\t\t\t\t        { \n\t\t\t\t\t            secured : false\n\t\t\t\t\t        });\n        scope.brandData.status  = true;\n\n        scope.imagesSelectConfig     = __globals.getSelectizeOptions({\n            valueField  : 'name',\n            labelField  : 'name',\n            render      : {\n                item: function(item, escape) {\n                    return  __Utils.template('#logoListItemTemplate',\n                    item\n                    );\n                },\n                option: function(item, escape) {\n                    return  __Utils.template('#logoListOptionTemplate',\n                    item\n                    );\n                }\n            }, \n            searchField : ['name']  \n        });\n        \n        /**\n          * Fetch uploaded temp images media files\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.images_count = 0;\n        scope.getTempImagesMedia = function() {\n\n            __Form.fetch('media.uploaded.images', { fresh : true })\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                    scope.image_files = responseData.data.files\n                    if (responseData.data.files.length > 0) {\n                    \tscope.images_count = responseData.data.files.length;\n\t\t\t\t\t};\n                });    \n\n            });\n\n        };\n\n        scope.getTempImagesMedia();\n        \n        var uploader = scope.uploader = new FileUploader({\n            url         : __Utils.apiURL('media.upload.image'),\n            autoUpload  : true,\n            headers     : {\n                'X-XSRF-TOKEN': __Utils.getXSRFToken()\n            }\n        });\n\n\n        // FILTERS\n        uploader.filters.push({\n            name: 'customFilter',\n            fn: function(item /*{File|FileLikeObject}*/, options) {\n                return this.queue.length < 1000;\n            }\n        });\n\n        scope.currentUploadedFileCount = 0;\n\t\tscope.loadingStatus     \t   = false;\n\n\t\t/**\n        * uploading msg\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        uploader.onAfterAddingAll = function() {\n\n            scope.loadingStatus = true;\n            appNotify.info(__globals.getJSString('loading_text'),{sticky : true});\n\n        };\n\n        /**\n        * Uploading on process\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n\n        uploader.onBeforeUploadItem = function(item) {\n            scope.loadingStatus = true;\n        };\n\n\n        /**\n        * on success counter of uploaded image\n        *\n        * @param object fileItem\n        * @param object response\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        \n        uploader.onSuccessItem = function( fileItem, response ) {\n\n            appServices.processResponse(response, {\n                error : function() {\n                },\n                otherError : function(reactionCode) {\n                  \n                    // If reaction code is Server Side Validation Error Then \n                    if (reactionCode == 3) {\n\n                        appNotify.error(response.data.message,{sticky : false});\n\n                    }\n\n                }\n            },\n            function() {\n\n                scope.currentUploadedFileCount++\n                \n            });   \n\n        };\n\n        /**\n        * uploaded all image then call function\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        \n        uploader.onCompleteAll  = function() {\n\n           scope.loadingStatus  = false;\n            if (scope.currentUploadedFileCount > 0) {\n                appNotify.success(scope.currentUploadedFileCount+' '+__globals.getJSString('file_uploaded_text'), {sticky : false});\n\n            }\n            scope.getTempImagesMedia();\n            scope.currentUploadedFileCount = 0;\n\n        };\n\n        /**\n          * Submit brand form action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.submit = function() {\n        \t \n            __Form.process('manage.brand.add', scope)\n                .success(function(responseData) {\n\n                appServices.processResponse(responseData, null, function() {\n                    $scope.closeThisDialog( { brand_added : true, brand : responseData.data.brand } );\n                });    \n\n            });\n\n        };\n\n        /**\n          * Show uploaded media files\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.showUploadedMediaDialog = function() {\n\n            appServices.showDialog({ 'image_files' : scope.image_files }, {\n                templateUrl : __globals.getTemplateURL(\n                    'product.manage.uploaded-media'\n                )\n            }, function(promiseObj) {\n            \t// Check if upload files updated\n                if (_.has(promiseObj.value, 'files')) {\n                    scope.image_files \t= promiseObj.value.files;\n                    scope.images_count \t= promiseObj.value.files.length;\n                } else {\n                    scope.getTempImagesMedia();\n                }\n\n            });\n\n        };\n\n        /**\n\t  \t  * Close dialog and return promise object\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\t  \t \n\n  \t  \tscope.close = function() {\n  \t  \t\t$scope.closeThisDialog();\n  \t  \t};\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     BrandEditDialogController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.brandEditDialog', [])\n        .controller('BrandEditDialogController',   [\n        \t'$scope',\n        \t'$state',\n            '__DataStore',\n            'appServices',\n            BrandEditDialogController \n        ]);\n\n    /**\n      * BrandEditDialogController open add brand form in dialog\n      * @inject $scope\n      * @inject $state\n      * @inject __DataStore\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function BrandEditDialogController($scope, $state, __DataStore, appServices) {\n\n    \tvar scope   = this;\n\n        __DataStore.fetch({\n\t        \t'apiURL'\t: 'manage.brand.editSupportData',\n\t        \t'brandID'\t: $state.params.brandID\n\t        })\n    \t   .success(function(responseData) {\n\n\t\t\t\tappServices.processResponse(responseData,null, function(reactionCode) {\n\t\t\t\t\t\n\t            \tappServices.showDialog(responseData.data,\n\t                {\n\t                    templateUrl : __globals.getTemplateURL(\n\t                            'brand.manage.edit-dialog'\n\t                        )\n\t                },\n\t                function(promiseObj) {\n\n\t                \t // Check if brand updated\n\t                    if (_.has(promiseObj.value, 'brand_updated') \n\t                        && promiseObj.value.brand_updated === true) {\n\t                    \t\n\t                    \t$scope.$parent.brandListCtrl.reloadDT();\n\t                    }\n\t                    \n\t                    $state.go('brands');\n\t                   \n\t                });\n\t        });\n     \t});\n        \n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     BrandEditController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.brandEdit', [])\n        .controller('BrandEditController',   [\n        \t'$scope',\n        \t'__Form',\n        \t'appServices',\n        \t'$state',\n        \t'FileUploader',\n        \t'__Utils',\n        \t'appNotify',\n            BrandEditController \n        ]);\n\n    /**\n      * BrandEditController handle add brand form\n      * \n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * @inject $state\n      * @inject FileUploader\n      * @inject __Utils\n      * @inject appNotify\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function BrandEditController($scope, __Form, appServices, $state, FileUploader, __Utils, appNotify) {\n\n        var scope   = this,\n        \tngDialogData = $scope.ngDialogData;\n            scope.brandId = $state.params.brandID;\n       \t\tscope.updateURL = {\n\t\t\t\t'apiURL' :'manage.brand.edit.process',\n\t\t\t\t'brandID' : $state.params.brandID\n\t\t\t};\n\n        scope \t= __Form.setup(scope, 'manage_brand_add', 'brandData', { \n\t\t\t\t\t            secured : false\n\t\t\t\t\t        });\n        scope   = __Form.updateModel(scope, $scope.ngDialogData);\n\n        scope.imagesSelectConfig     = __globals.getSelectizeOptions({\n            valueField  : 'name',\n            labelField  : 'name',\n            render      : {\n                item: function(item, escape) {\n                    return  __Utils.template('#logoListItemTemplate',\n                    item\n                    );\n                },\n                option: function(item, escape) {\n                    return  __Utils.template('#logoListOptionTemplate',\n                    item\n                    );\n                }\n            }, \n            searchField : ['name']  \n        });\n\n        /**\n          * Fetch uploaded temp images media files\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.images_count = 0;\n        scope.getTempImagesMedia = function() {\n\n            __Form.fetch('media.uploaded.images', { fresh : true })\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                    scope.image_files = responseData.data.files\n                    if (responseData.data.files.length > 0) {\n                    \tscope.images_count = responseData.data.files.length;\n\t\t\t\t\t};\n                });    \n\n            });\n\n        };\n\n        scope.getTempImagesMedia();\n        \n        var uploader = scope.uploader = new FileUploader({\n            url         : __Utils.apiURL('media.upload.image'),\n            autoUpload  : true,\n            headers     : {\n                'X-XSRF-TOKEN': __Utils.getXSRFToken()\n            }\n        });\n\n        // FILTERS\n        uploader.filters.push({\n            name: 'customFilter',\n            fn: function(item /*{File|FileLikeObject}*/, options) {\n                return this.queue.length < 1000;\n            }\n        });\n\n        scope.currentUploadedFileCount = 0;\n\t\tscope.loadingStatus     \t   = false;\n\n\t\t/**\n        * uploading msg\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        uploader.onAfterAddingAll = function() {\n\n            scope.loadingStatus = true;\n            appNotify.info(__globals.getJSString('loading_text'),{sticky : true});\n\n        };\n\n        /**\n        * Uploading on process\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n\n        uploader.onBeforeUploadItem = function(item) {\n            scope.loadingStatus = true;\n        };\n\n\n        /**\n        * on success counter of uploaded image\n        *\n        * @param object fileItem\n        * @param object response\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        \n        uploader.onSuccessItem = function( fileItem, response ) {\n\n            appServices.processResponse(response, {\n                error : function() {\n                },\n                otherError : function(reactionCode) {\n                  \n                    // If reaction code is Server Side Validation Error Then \n                    if (reactionCode == 3) {\n\n                        appNotify.error(response.data.message,{sticky : false});\n\n                    }\n\n                }\n            },\n            function() {\n\n                scope.currentUploadedFileCount++\n                \n            });   \n\n        };\n\n        /**\n        * uploaded all image then call function\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        \n        uploader.onCompleteAll  = function() {\n\n           scope.loadingStatus  = false;\n            if (scope.currentUploadedFileCount > 0) {\n                appNotify.success(scope.currentUploadedFileCount+' '+__globals.getJSString('file_uploaded_text'), {sticky : false});\n\n            }\n            scope.getTempImagesMedia();\n            scope.currentUploadedFileCount = 0;\n\n        };\n\n\n        /**\n          * Submit brand form action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.submit = function() {\n\n            __Form.process(scope.updateURL, scope)\n                .success(function(responseData) {\n\n                appServices.processResponse(responseData, null, function() {\n                    $scope.closeThisDialog( { brand_updated : true } );\n                });    \n\n            });\n\n        };\n\n        /**\n          * Show uploaded media files\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.showUploadedMediaDialog = function() {\n\n            appServices.showDialog({ 'image_files' : scope.image_files }, {\n                templateUrl : __globals.getTemplateURL(\n                    'product.manage.uploaded-media'\n                )\n            }, function(promiseObj) {\n            \t// Check if files added\n                if (_.has(promiseObj.value, 'files')) {\n                    scope.image_files \t= promiseObj.value.files;\n                    scope.images_count \t= promiseObj.value.files.length;\n                } else {\n                    scope.getTempImagesMedia();\n                }\n\n            });\n\n        };\n\n\n        /**\n\t  \t  * Close dialog and return promise object\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\t  \t\n\t  \tscope.close = function() {\n  \t  \t\t$scope.closeThisDialog();\n  \t  \t};\n    };\n\n})();","(function() {\n    'use strict';\n    \n    /**\n      * BrandDeleteDialogController - handle a delete brand confirmation dialog\n      * \n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.brandDeleteDialog', [])\n        .controller('BrandDeleteDialogController', [\n        \t'$scope',\n        \t'__Form',\n        \t'appServices',\n            function ($scope, __Form, appServices) {\n\n                var scope       = this,\n                    brandId     = $scope.ngDialogData.brandId,\n                    brandName   = $scope.ngDialogData.brandName;\n\n                scope = __Form.setup(scope, 'delete_brand_form', 'brandData',{ secured : true });\n\n                scope.brandData.delete_related_products = false;\n\n                scope.notificationMessage = __ngSupport.getText(\n                    __globals.getJSString('brand_delete_text'), {\n                        '__name__'     : unescape(brandName)\n                    }\n                );\n\n                /**\n                  * Submit delete brand form action\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                \n                scope.submit = function() {\n                     \n                    __Form.process({\n                        'apiURL'    : 'manage.brand.delete',\n                        'brandID'   : brandId\n                    }, scope)\n                        .success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function() {\n                            $scope.closeThisDialog({ 'brand_deleted' : true });\n                        });    \n\n                    });\n\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                 \n\n                scope.close = function() {\n                    $scope.closeThisDialog();\n                }; \n\n        }]);\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManageProductAddController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.add', [])\n        .controller('ManageProductAddController',   [\n            '__Form', \n\t\t\t'$state', \n\t\t\t'appServices',\n     \t\t'FileUploader', \n\t\t\t'__Utils', \n\t\t\t'$stateParams', \n\t\t\t'appNotify', \n\t\t\t'__DataStore',\n            '$rootScope',\n            ManageProductAddController \n        ]);\n\n    /**\n      * ManageProductAddController handle add product form\n      *\n      * @inject __Form\n      * @inject $state\n      * @inject appServices\n      * @inject FileUploader\n      * @inject __Utils\n      * @inject $stateParams\n      * @inject appNotify\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ManageProductAddController(__Form, $state, appServices,\n     FileUploader, __Utils, $stateParams, appNotify, __DataStore, $rootScope) {\n\n        var scope       = this;\n           \tscope.categoryStatus = false;\n            scope.currentStateName = $state.current.name;\n\n        scope = __Form.setup(scope, 'form_product_add', 'productData', \n            { secured : false }\n        );\n\n        scope.productData.out_of_stock = 0;\n\n        var today = moment().format('YYYY-MM-DD HH:mm');\n\n        scope.releaseDateConfig = {\n        \t'format' : 'YYYY-MM-DD HH:mm',\n        };\n        \n        scope.productData.launching_date = today;\n\n        scope.productData.categories = [];\n\n        if (_.has($stateParams, 'categoryID') && !_.isEmpty($stateParams.categoryID)) {\n\n            var categoryID  = $stateParams.categoryID;\n\n            scope.productData.categoryID = categoryID;\n            scope.productData.categories = [ categoryID ];\n        }\n        \n        scope.imagesSelectConfig     = __globals.getSelectizeOptions({\n            valueField  : 'name',\n            labelField  : 'name',\n            render      : {\n                item: function(item, escape) {\n                    return  __Utils.template('#imageListItemTemplate',\n                    item\n                    );\n                },\n                option: function(item, escape) {\n                    return  __Utils.template('#imageListOptionTemplate',\n                    item\n                    );\n                }\n            }, \n            searchField : ['name']  \n        });\n\n        scope.brandsSelectConfig = __globals.getSelectizeOptions({\n            valueField  : 'value',\n            labelField  : 'name',\n            searchField : [ 'name' ]  \n        });\n\n        scope.relatedProductsSelectConfig = __globals.getSelectizeOptions({\n            maxItems        : 1000,\n            searchField     : ['name', 'product_id']  \n        });\n\n        /**\n          * Fetch support data\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.getAddProductData = function() {\n        \t__Form.fetch({\n                'apiURL'     : 'manage.product.add.supportdata',\n                'categoryId?' : scope.productData.categoryID\n            })\n                .success(function(responseData) {\n            var requestData = responseData.data;\n\n\t            appServices.processResponse(responseData, null, function() {\n\t                scope.related_products      = requestData.related_products;\n\t                scope.store_currency_symbol = requestData.store_currency_symbol;\n\t                scope.store_currency        = requestData.store_currency;\n\t                scope.fancytree_categories  = requestData.categories;\n\t                scope.activeBrands  \t\t= requestData.activeBrands;\n                    scope.parentData            = requestData.parentData;\n                    scope.parentCategoryExist   = requestData.isParentExist;\n                    scope.categoryDetail        = requestData.categoryDetail;\n                    scope.specificationPreset   = requestData.specificationPreset;\n\n                    scope.isParentExist = true;\n                    \n                    if (_.isUndefined(scope.productData.categoryID)) {\n                        scope.isParentExist = false;\n                    }\n    \t               \n\t                _.forEach(requestData.categories, function(value) {\n\t                \t\n\t                \tif (value.key == scope.productData.categoryID) {\n\n\t\t\t\t\t\t\tscope.categoryStatus = true;\n\n\t\t\t\t\t\t\tscope.categoryName = __ngSupport.getText(\n\t\t\t                    \t\t\t__globals.getJSString('product_add_title_text'), {\n\t\t\t                        '__name__'    : value.title\n\t\t\t                    });\n\t\t\t\t\t\t}\n\t                });\n\n\t            });    \n\n\t        });\n        }\n        scope.getAddProductData();\n\n        /**\n          * Fetch uploaded temp images media files\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.images_count = 0;\n        scope.getTempImagesMedia = function() {\n\n            __Form.fetch('media.uploaded.images', {fresh : true})\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                    scope.image_files = responseData.data.files;\n                    if (responseData.data.files.length > 0) {\n                    \tscope.images_count = responseData.data.files.length;\n\t\t\t\t\t};\n                });    \n\n            });\n\n        };\n        scope.getTempImagesMedia();\n        \n        var uploader = scope.uploader = new FileUploader({\n            url         : __Utils.apiURL('media.upload.image'),\n            autoUpload  : true,\n            headers     : {\n                'X-XSRF-TOKEN': __Utils.getXSRFToken()\n            }\n        }); \n\n        // FILTERS\n        uploader.filters.push({\n            name: 'customFilter',\n            fn: function(item /*{File|FileLikeObject}*/, options) {\n                return this.queue.length < 1000;\n            }\n        });\n\n        scope.currentUploadedFileCount = 0;\n        scope.loadingStatus     \t   = false;\n\n\t\t/**\n        * uploading msg\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        uploader.onAfterAddingAll = function() {\n\n            scope.loadingStatus = true;\n            appNotify.info(__globals.getJSString('loading_text'),{sticky : true});\n\n        };\n\n        /**\n        * Uploading on process\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n\n        uploader.onBeforeUploadItem = function(item) {\n            scope.loadingStatus = true;\n        };\n\n\n        /**\n        * on success counter of uploaded image\n        *\n        * @param object fileItem\n        * @param object response\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        \n        uploader.onSuccessItem = function( fileItem, response ) {\n\n            appServices.processResponse(response, {\n                error : function() {\n                },\n                otherError : function(reactionCode) {\n                  \n                    // If reaction code is Server Side Validation Error Then \n                    if (reactionCode == 3) {\n\n                        appNotify.error(response.data.message,{sticky : false});\n\n                    }\n\n                }\n            },\n            function() {\n\n                scope.currentUploadedFileCount++\n                \n            });   \n\n        };\n\n        /**\n        * uploaded all image then call function\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        \n        uploader.onCompleteAll  = function() {\n\n           scope.loadingStatus  = false;\n            if (scope.currentUploadedFileCount > 0) {\n                appNotify.success(scope.currentUploadedFileCount+' '+__globals.getJSString('file_uploaded_text'), {sticky : false});\n\n            }\n            scope.getTempImagesMedia();\n            scope.currentUploadedFileCount = 0;\n\n        };\n\n\t\t/**\n          * Add new category\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.addCategory   = function(catID) {\n\n        \tthis.catID = catID;\n\n        \t__DataStore.fetch('category.fancytree.support-data', {fresh:true})\n\t\t\t\t\t.success(function(responseData) {\n\n      \t\t\tscope.categories = responseData.data.categories;\n      \t\t\n          \t\tappServices.showDialog(scope,\n                {\n                    templateUrl : __globals.getTemplateURL(\n                            'category.add-dialog'\n                        )\n                },\n                function(promiseObj) {\n\t\t\t\t\t\t\n                    // Check if category updated\n                   if (_.has(promiseObj.value, 'category_added') \n                        && promiseObj.value.category_added == true) {\n\n                        __DataStore.fetch('category.fancytree.support-data', {fresh:true}).success(function(responseData) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tscope.fancytree_categories = responseData.data.categories;\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t});\n                  \t}\n\n                });\n\n\t    \t});\n            \n        };\n\n        /**\n          * Submit prodcut add form action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.submit = function(string) {\n            //get client timeZoneDate\n            scope.productData.getClientTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        \n            if (scope.productData.out_of_stock != 3) {\n                scope.productData.launching_date = null;\n            }\n            \n            __Form.process('manage.product.add', scope)\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                \t\n                \tscope.productId = responseData.data.productId;\n                \t\n                    if ($rootScope.canAccess('manage.product.list') && $rootScope.canAccess('manage.product.option.list') && scope.productData.publish === false) {\n                      \n                        $state.go('product_edit.options', {'productID' : scope.productId});\n                    } else {\n\n                        $state.go('products', { 'mCategoryID' : categoryID });\n                    }\n\n                });    \n\n            });\n\n        };\n\n        /**\n        * Click on this btn submit product mark as ative\n        * & show publically & redirect page on manage products\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        scope.saveAndPublish = function() {\n            scope.productData.publish = true;\n            scope.submit(null);\n        };\n\n\t\t/**\n        * Click on this btn submit product mark as inative\n        * & publically not show & mark as inactive & redirect page on manage options\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        scope.saveAndAddOptions = function() {\n            scope.productData.publish = false;\n            scope.submit(null);\n        };\n\n        \n        /**\n          * Show uploaded media files\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.showUploadedMediaDialog = function() {\n\n            appServices.showDialog({ 'image_files' : scope.image_files }, {\n                templateUrl : __globals.getTemplateURL('product.manage.uploaded-media')\n            }, function(promiseObj) {\n\n                if (_.has(promiseObj.value, 'files')) {\n                    scope.image_files = promiseObj.value.files;\n                    scope.images_count = promiseObj.value.files.length;\n                } else {\n                    scope.getTempImagesMedia();\n                }\n\n            });\n        };\n\n        /**\n          * add brand dialog\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.addBrand = function() {\n        \t// show add brand dialog\n\t        appServices.showDialog(scope,\n\t        {\t\n\t            templateUrl : __globals.getTemplateURL(\n\t                    'brand.manage.add-dialog'\n\t                )\n\t        },\n\t        function(promiseObj) {\n\t        \t\n\t\t\t\t// Check if brand added\n\t            if (_.has(promiseObj.value, 'brand_added') \n\t                && promiseObj.value.brand_added === true) {\n\n\t            \tscope.getAddProductData();\n\t            }\n\n\t        });\n        }\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManageProductUploadedMediaController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.uploadedMedia', [])\n        .controller('ManageProductUploadedMediaController',   [\n            '$scope',\n            '__DataStore', \n            'appServices',\n            '$state',\n            '$rootScope',\n            ManageProductUploadedMediaController \n        ]);\n\n    /**\n      * ManageProductUploadedMediaController handle uploaded media files\n      *\n      * @inject $scope\n      * @inject __DataStore\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ManageProductUploadedMediaController($scope, __DataStore, appServices, $state, $rootScope) {\n\n        var scope       = this;\n\n        scope.image_files               = [];\n        scope.files                     = $scope.ngDialogData.image_files;\n        scope.uploadedMediaFileCount    = scope.files.length;\n        scope.any_file_selected         = false;\n\n        if (!_.isEmpty(scope.files)) {\n\n            _.forEach(scope.files, function(value, key) {\n\n                scope.image_files.push({\n                    'name'  : value.name,\n                    'path'  : value.path,\n                    'exist' : false,\n                });\n\n            });\n\n        }\n        scope.all_files_selected    = false;\n\n        /**\n          * Select or unselect all uploaded media files\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.selectAll  = function() {\n\n            // Check if all files selected \n            if (scope.all_files_selected) {\n\n                scope.any_file_selected    = true;\n                scope.unSelectedFilesCount = 0;\n                \n            } else {\n\n                scope.any_file_selected    = false;\n                scope.unSelectedFilesCount = scope.image_files.length;\n\n            }\n\n            angular.forEach(scope.image_files, function(value, index) {\n                scope.image_files[index]['exist'] = scope.all_files_selected;\n            });\n\n        };\n\n        /**\n          * Select any media image file \n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.select = function() {\n\n            scope.unSelectedFilesCount = 0;\n\n            _.forEach(scope.image_files, function(value) {\n\n                if (value.exist == false) {\n                    scope.unSelectedFilesCount++;\n                }\n\n            });\n\n            if (scope.unSelectedFilesCount == 0 && scope.uploadedMediaFileCount != 0) {\n\n                scope.all_files_selected    = true;\n                scope.any_file_selected     = true;\n\n            } else if (scope.unSelectedFilesCount > 0 \n                && scope.uploadedMediaFileCount != 0) {\n\n                scope.all_files_selected    = false;\n                scope.any_file_selected     = true;\n\n            } else {\n\n                scope.all_files_selected    = false;\n                scope.any_file_selected        = false;\n\n            }\n\n        };\n\n        /**\n          * Fetch uploaded temp images media files\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.getTempImagesMedia = function() {\n\n            __DataStore.fetch('media.uploaded.images', {fresh : true})\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n\n                    scope.files         = responseData.data.files\n                    scope.image_files   = [];\n\n                    if (!_.isEmpty(scope.files)) {\n                        //if current state is general setting\n                        if ($state.current.name == 'store_settings_edit.general') {\n                          \n                            _.forEach(scope.files, function(value, index) {\n                                \n                                scope.imagesExtention = value.name.split(\".\").pop();\n                                \n                                if (scope.imagesExtention == 'png') {\n                                    scope.image_files.push({\n                                        'name'  : value.name,\n                                        'path'  : value.path,\n                                        'exist' : false,\n                                    });\n                                } else if (scope.imagesExtention == 'ico') {\n                                    scope.image_files.push({\n                                        'name'  : value.name,\n                                        'path'  : value.path,\n                                        'exist' : false,\n                                    });\n                                }\n                            });\n\n                        } else {\n                            _.forEach(scope.files, function(value, key) {\n\n                                scope.image_files.push({\n                                    'name'  : value.name,\n                                    'path'  : value.path,\n                                    'exist' : false,\n                                });\n\n                            });\n                        }\n\n                    }/*\n\n                    $rootScope.$emit('remove.uploded.temp', {'status':true});*/\n\n                });    \n\n            });\n\n        };\n\n        /**\n          * Delete media file \n          *\n          * @param string fileName\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.delete = function(fileName) {\n\n            __DataStore.post({\n                'apiURL'    : 'media.delete',\n                'fileName'  : fileName\n            })\n            .success(function(responseData) {\n                scope.all_files_selected    = false;\n                appServices.processResponse(responseData, null, function() {\n                     \n                    //check current state \n                    if ($state.current.name == 'store_settings_edit.general') {\n                        $rootScope.$broadcast('lw-upload-image-deleted', true);\n                        scope.getTempImagesMedia();\n\n                    } else {\n                        scope.getTempImagesMedia();\n                    }\n\n                });    \n\n            });\n\n        };\n\n        /**\n          * Delete multiple uploaded teparary media Files\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.deleteMultipleFiles = function() {\n\n            var selectedUploadedFiles = [];\n\n            angular.forEach(scope.image_files, function(value, index) {\n               \n                if (value.exist) {\n                    selectedUploadedFiles.push(value.name);\n                }\n\n            });\n\n            // Check if files exist\n            if (!_.isEmpty(selectedUploadedFiles)) {\n\n                __DataStore.post('media.delete.multiple',\n                        { 'files' : selectedUploadedFiles })\n                    .success(function(responseData) {\n\n                    appServices.processResponse(responseData, null, function() {\n                        scope.getTempImagesMedia();\n                    });  \n\n                });\n\n            }\n\n        };\n       \n       /**\n          * Close current dialog\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.close = function() {\n            if ($state.current.name == 'store_settings_edit.general') {\n                $scope.closeThisDialog();\n            } else {\n                $scope.closeThisDialog({ files : scope.files });\n            }\n        }; \n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManageEditProductDetailsController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.details', [])\n        .controller('ManageEditProductDetailsController',   [\n        \t'__DataStore',\n            'appServices',\n            '$stateParams',\n            '__Form',\n            '$state',\n            '$rootScope',\n            ManageEditProductDetailsController \n        ]);\n\n    /**\n      * ManageEditProductDetailsController for update tabs\n      *\n      * @inject __DataStore\n      * @inject appServices\n      * @inject $stateParams\n      * @inject __Form\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ManageEditProductDetailsController(__DataStore, appServices, $stateParams, __Form, $state, $rootScope) {\n\n        var scope       = this,\n            productID   = $stateParams.productID;\n\n        var tabs    = {\n            'detailsTab'    : {\n                    id      : 'detailsTabList',\n            },\n            'optionsTab'    : {\n                    id      : 'optionsTabList',\n            },\n            'imagesTab'    : {\n                    id      : 'imagesTabList',\n            },\n            'specificationsTab'    : {\n                    id      : 'specificationsTabList',\n            },\n            'ratingsTab'    : {\n                    id      : 'ratingsTabList',\n            },\n            'faqTab'        : {\n                    id      : 'faqTabList',\n            },\n            'awatingUserTab': {\n                    id      : 'awatingUserTabList',\n            }\n        };\n\n        // Fired when clicking on tab    \n        $('#manageProductEditTabs a').click(function (e) {\n\n            e.preventDefault();\n\n            var $this       = $(this),\n                tabName     = $this.attr('aria-controls'),\n                selectedTab = tabs[tabName];\n\n            // Check if selectedTab exist    \n            if (!_.isEmpty(selectedTab)) {\n\n                $(this).tab('show')\n                //scope.getCategories(selectedTab.id);\n\n            }\n            \n        });\n\n        scope = __Form.setup(scope, 'update_product_status_form', 'productData');\n\n        scope.initialContentLoaded = false;\n\n        $rootScope.$on('productData', function(data, item) {\n            scope.productName = item.name;\n        });\n\n        /**\n          * Fetch uploaded temp images media files\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        __DataStore.fetch({\n            'apiURL'    : 'manage.product.fetch.name',\n            'productID' : productID\n        }).success(function(responseData) {\n                    \n            appServices.processResponse(responseData, null, function() {\n\n                scope.productName = __ngSupport.getText(\n                    __globals.getJSString('product_edit_title_text'), {\n                        '__name__'    : responseData.data.productName.name\n                    });\n\n                var requestData = responseData.data;\n\n                scope.isMultipleCategory = requestData.isMultipleCategory;\n\n                scope.categoryData = requestData.categoryData;\n\n                scope.detailsUrl = requestData.detailsUrl;\n\n                scope.initialContentLoaded = true;\n\n                scope = __Form.updateModel(scope, {'active' : responseData.data.status});\n                \n            });    \n\n        });\n\n        //active tabs\n        _.defer(function(text) {\n            if ($state.current.name == 'product_edit.details') {\n\n                var selectedTab = $('.nav li a[href=\"#detailsTab\"]');\n                    selectedTab.triggerHandler('click', true);\n\n            } else if ($state.current.name == 'product_edit.options') {\n\n                var selectedTab = $('.nav li a[href=\"#optionsTab\"]');\n                    selectedTab.triggerHandler('click', true);\n\n            } else if ($state.current.name == 'product_edit.images') {\n                \n                var selectedTab = $('.nav li a[href=\"#imagesTab\"]');\n                    selectedTab.triggerHandler('click', true);\n\n            } else if ($state.current.name == 'product_edit.specification') {\n                \n                var selectedTab = $('.nav li a[href=\"#specificationsTab\"]');\n                    selectedTab.triggerHandler('click', true);\n\n            } else if ($state.current.name == 'product_edit.ratings') {\n                \n                var selectedTab = $('.nav li a[href=\"#ratingsTab\"]');\n                    selectedTab.triggerHandler('click', true);\n\n            } else if ($state.current.name == 'product_edit.faq') {\n                \n                var selectedTab = $('.nav li a[href=\"#faqTab\"]');\n                    selectedTab.triggerHandler('click', true);\n                    \n            } else if ($state.current.name == 'product_edit.awating_user') {\n                \n                var selectedTab = $('.nav li a[href=\"#awatingUserTab\"]');\n                    selectedTab.triggerHandler('click', true);\n            }\n             \n        }, 0);\n\n        /**\n          * Submit update product status form action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.submit = function() {\n\n            __Form.process({ 'apiURL' : 'manage.product.update_status', 'productID' : productID }, scope)\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n\n                });    \n\n            });\n\n        };\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManageProductEditController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.edit', [])\n        .controller('ManageProductEditController',   [\n            '__DataStore', \n            'appServices',\n            '$stateParams',\n            ManageProductEditController\n        ]);\n\n    /**\n      * ManageProductEditController handle edit product details form\n      *\n      * @inject __DataStore\n      * @inject appServices\n      * @inject $stateParams\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ManageProductEditController(__DataStore, appServices, $stateParams) {\n\n        var scope   = this;\n\n        /**\n          * Fetch uploaded temp images media files\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        __DataStore.fetch({\n            'apiURL'    : 'manage.product.details',\n            'productID' : $stateParams.productID\n        }).success(function(responseData) {\n\n            appServices.processResponse(responseData, null, function() {\n\n                scope.product = responseData.data.productName;\n\n            });    \n\n        });\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManageProductEditDetailsController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.editDetails', [])\n        .controller('ManageProductEditDetailsController',   [\n            '__Form', \n            '$state',\n            'appServices',\n            'FileUploader',\n            '__Utils',\n            '$stateParams',\n            'appNotify',\n            '$rootScope',\n\t\t\t'__DataStore',\n            '$scope',\n            ManageProductEditDetailsController \n        ]);\n\n    /**\n      * ManageProductEditDetailsController handle edit product form\n      *\n      * @inject __Form\n      * @inject $state\n      * @inject appServices\n      * @inject FileUploader\n      * @inject __Utils\n      * @inject $stateParams\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ManageProductEditDetailsController(__Form, $state, appServices, \n        FileUploader, __Utils, $stateParams, appNotify, $rootScope, __DataStore, $scope) {\n\n        var scope       = this,\n            productID   = $stateParams.productID;\n\n        scope.productId = productID;\n        scope = __Form.setup(scope, 'form_product_edit', 'productData', {\n            secured : false\n        });\n\n        scope.imagesSelectConfig     = __globals.getSelectizeOptions({\n            valueField  : 'name',\n            labelField  : 'name',\n            render      : {\n                item: function(item, escape) {\n                    return  __Utils.template('#imageListItemTemplate',\n                    item\n                    );\n                },\n                option: function(item, escape) {\n                    return  __Utils.template('#imageListOptionTemplate',\n                    item\n                    );\n                }\n            }, \n            searchField : ['name']  \n        });\n\n        scope.relatedProductsSelectConfig = __globals.getSelectizeOptions({\n            maxItems        : 1000,\n            searchField     : ['name', 'product_id']  \n        });\n\n        scope.brandsSelectConfig = __globals.getSelectizeOptions({\n            valueField  : 'value',\n            labelField  : 'name',\n            searchField : [ 'name' ]  \n        });\n\n        scope.pageStatus = false;\n        scope.productAvailableExist = false;\n\n        scope.releaseDateConfig = {\n        \t'format' : 'YYYY-MM-DD HH:mm',\n        };\n\n        /**\n          * Fetch support data\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n          \n        scope.getProductEditDetails = function() {\n        \t__Form.fetch({\n\t            'apiURL'    : 'manage.product.edit.details.supportdata',\n\t            'productID' : productID\n\t        })\n            .success(function(responseData) {\n\t                    \n\t            appServices.processResponse(responseData, null, function() {\n\n\t            \tappServices.delayAction(function() {\n\t               \t\tvar requestData         \t= responseData.data;\n\t               \t\tvar productName = { \n\t               \t\t\tname : requestData.product.name \n\t               \t\t};\n \n                        var today = moment().format('YYYY-MM-DD HH:mm');\n\n\t                \tscope.related_products  \t= requestData.related_products;\n\t                \tscope.categories        \t= requestData.product.categories;\n\t                    scope.store_currency_symbol = requestData.store_currency_symbol;\n\t                    scope.store_currency        = requestData.store_currency;\n\t                \tscope.fancytree_categories \t= responseData.data.categories;\n\t                \tscope.activeBrands  \t\t= requestData.activeBrands;\n                        scope.out_of_stock          = requestData.product.outOfStock;\n\t                \n\t                \tscope.pageStatus = true;\n\t                \t__Form.updateModel(scope, requestData.product);\n                    \n                        if (_.isEmpty(requestData.product.__data) && _.isEmpty(scope.productData.launching_date)) {\n                            scope.productData.launching_date = today;\n                        }\n\n\t                \t$rootScope.$emit('productData', productName);\n\t           \t\t});\n\n\t                \n\t            });    \n\n\t        });\n        }\n        scope.getProductEditDetails();\n\n\n        /**\n          * Fetch uploaded temp images media files\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.images_count = 0;\n        scope.getTempImagesMedia = function() {\n\n            __Form.fetch('media.uploaded.images', {fresh : true})\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                    scope.image_files = responseData.data.files\n                    if (responseData.data.files.length > 0) {\n                    \tscope.images_count = responseData.data.files.length;\n\t\t\t\t\t};\n                });    \n\n            });\n\n        };\n\n        scope.getTempImagesMedia();\n        \n        var uploader = scope.uploader = new FileUploader({\n            url         : __Utils.apiURL('media.upload.image'),\n            autoUpload  : true,\n            headers     : {\n                'X-XSRF-TOKEN': __Utils.getXSRFToken()\n            }\n        });\n\n        // FILTERS\n        uploader.filters.push({\n            name: 'customFilter',\n            fn: function(item /*{File|FileLikeObject}*/, options) {\n                return this.queue.length < 1000;\n            }\n        });\n\n        scope.currentUploadedFileCount = 0;\n        scope.loadingStatus     \t   = false;\n\n\t\t/**\n        * uploading msg\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        uploader.onAfterAddingAll = function() {\n\n            scope.loadingStatus = true;\n            appNotify.info(__globals.getJSString('loading_text'),{sticky : true});\n\n        };\n\n        /**\n        * Uploading on process\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n\n        uploader.onBeforeUploadItem = function(item) {\n            scope.loadingStatus = true;\n        };\n\n\n        /**\n        * on success counter of uploaded image\n        *\n        * @param object fileItem\n        * @param object response\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        \n        uploader.onSuccessItem = function( fileItem, response ) {\n\n            appServices.processResponse(response, {\n                error : function() {\n                },\n                otherError : function(reactionCode) {\n                  \n                    // If reaction code is Server Side Validation Error Then \n                    if (reactionCode == 3) {\n\n                        appNotify.error(response.data.message,{sticky : false});\n\n                    }\n\n                }\n            },\n            function() {\n\n                scope.currentUploadedFileCount++\n                \n            });   \n\n        };\n\n        /**\n        * uploaded all image then call function\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        \n        uploader.onCompleteAll  = function() {\n\n           scope.loadingStatus  = false;\n            if (scope.currentUploadedFileCount > 0) {\n                appNotify.success(scope.currentUploadedFileCount+' '+__globals.getJSString('file_uploaded_text'), {sticky : false});\n\n            }\n            scope.getTempImagesMedia();\n            scope.currentUploadedFileCount = 0;\n\n        };\n\n\t\t/**\n          * Add new category\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.addCategory   = function(catID) {\n\n        \tthis.catID = catID;\n\n        \t__DataStore.fetch('category.fancytree.support-data', {fresh:true})\n\t\t\t\t\t.success(function(responseData) {\n\n      \t\t\tscope.categories = responseData.data.categories;\n      \t\t\n          \t\tappServices.showDialog(scope,\n                {\n                    templateUrl : __globals.getTemplateURL(\n                            'category.add-dialog'\n                        )\n                },\n                function(promiseObj) {\n\t\t\t\t\t\t\n                    // Check if category updated\n                   if (_.has(promiseObj.value, 'category_added') \n                        && promiseObj.value.category_added == true) {\n\n                        __DataStore.fetch('category.fancytree.support-data', {fresh:true}).success(function(responseData) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tscope.fancytree_categories = responseData.data.categories;\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t});\n                  \t}\n\n                });\n\n\t    \t});\n            \n        };\n\n\n        /**\n          * Submit product edit form submit action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.submit = function() {\n            //clientTimeZone Name\n            scope.productData.getClientTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n           \n        \n            if (scope.productData.outOfStock != 3) {\n                scope.productData.launching_date = null;\n            }\n        \n            __Form.process({\n                'apiURL'    : 'manage.product.edit',\n                'productID' : productID\n            }, scope)\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                   \n                    if (responseData.reaction == 1) {\n                       scope.getProductEditDetails();\n                    }\n                    \n                    if (responseData.reaction == 1 && scope.productData.outOfStock == 0 && scope.out_of_stock != 0) {\n                        appServices.showDialog(scope,\n                            {\n                                templateUrl : __globals.getTemplateURL(\n                                        'product.manage.send-mail-dialog'\n                                    )\n                            },\n                            function(promiseObj) {\n                                    \n                        });\n                    }\n                   // scope.productData.image = '';\n                    \n                });    \n\n            });\n\n        };\n\n        /**\n          * Show uploaded media files\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.showUploadedMediaDialog = function() {\n\n            appServices.showDialog({ 'image_files' : scope.image_files }, {\n                templateUrl : __globals.getTemplateURL('product.manage.uploaded-media')\n            }, function(promiseObj) {\n\n                if (_.has(promiseObj.value, 'files')) {\n                    scope.image_files = promiseObj.value.files;\n                    scope.images_count = promiseObj.value.files.length;\n                } else {\n                    scope.getTempImagesMedia();\n                }\n\n            });\n        };\n\n        /**\n          * add brand\n          *\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.addBrand = function() {\n        \t// show add brand dialog\n\t        appServices.showDialog(scope,\n\t        {\t\n\t            templateUrl : __globals.getTemplateURL(\n\t                    'brand.manage.add-dialog'\n\t                )\n\t        },\n\t        function(promiseObj) {\n\t        \t\n\t\t\t\t// Check if brand added\n\t            if (_.has(promiseObj.value, 'brand_added') \n\t                && promiseObj.value.brand_added === true) {\n\n\t            \tscope.getProductEditDetails();\n\t            }\n\n\t        });\n        }\n\n        /**\n          * Close dialog\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.closeDialog = function() {\n            $scope.closeThisDialog();\n        };\n\n    };\n\n})();","(function() {\n'use strict';\n   \n    /*\n     ManageProductNotifyMailController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.notifyMailCustomer', [])\n        .controller('ManageProductNotifyMailController',   [\n            '__Form', \n            '$state',\n            '__Utils',\n            '$stateParams',\n\t\t\t'__DataStore',\n            '$scope',\n            'appServices',\n            '$rootScope',\n            ManageProductNotifyMailController \n        ]);\n\n    /**\n      * ManageProductNotifyMailController handle edit product form\n      *\n      * @inject __Form\n      * @inject $state\n      * @inject appServices\n      * @inject FileUploader\n      * @inject __Utils\n      * @inject $stateParams\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ManageProductNotifyMailController(__Form, $state, __Utils, $stateParams, __DataStore, $scope, appServices, $rootScope) {\n\n        var scope       = this,\n            productID   = $stateParams.productID;\n        \n        var notifyUserId = $scope.ngDialogData.notifyUserId;\n        var mailType = $scope.ngDialogData.mailType;\n\n        scope = __Form.setup(scope, 'product_notify_mail_form', 'productNotifyMailData', {\n            secured : false\n        });\n\n        if (mailType == 1) {\n            scope.productNotifyMailData['awatingUserList'] = $scope.ngDialogData.awatingUserList;\n        } else {\n            scope.productNotifyMailData['awatingUserList'] = null;\n        }\n        \n        scope.productNotifyMailData['mailType'] = mailType;\n\n        /**\n          * Submit product edit form submit action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.submit = function() {\n    \n            __Form.process({\n                'apiURL'    : 'manage.product.awating_user.notify_mail.send',\n                'productId' : productID,\n                'notifyUserId' : notifyUserId ? notifyUserId : null\n            }, scope)\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                    // close dialog\n                    $rootScope.$broadcast('awating_user_added_or_updated', true);\n                    $scope.closeThisDialog({ send_mail_to_customer : true });\n                });    \n\n            });\n\n        };\n\n        /**\n          * Close dialog\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.closeDialog = function() {\n            $scope.closeThisDialog();\n        };\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ProductImagesController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.images', [])\n        .controller('ProductImagesController',   [\n            '$scope', \n            '__DataStore',\n            'appServices',\n            '$stateParams',\n            ProductImagesController \n        ]);\n\n    /**\n      * ProductImagesController for manage product image list\n      *\n      * @inject $scope\n      * @inject __DataStore\n      * @inject appServices\n      * @inject $stateParams\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ProductImagesController($scope, __DataStore, appServices,\n     $stateParams) {\n\n        var dtProductImagesColumnsData = [\n                {\n                    \"name\"      : \"list_order\",\n                    \"orderable\" : true,\n                    \"template\"  : \"#productImageColumnListOrderTemplate\"\n                },\n                {\n                    \"name\"      : \"thumbnail\",\n                    \"template\"  : \"#productImageThumbnailColumnTemplate\"\n                },\n                {\n                    \"name\"      : \"title\",\n                    \"orderable\" : true\n                },\n                {\n                    \"name\"      : null,\n                    \"template\"  : \"#productImageActionColumnTemplate\"\n                }\n            ],\n            scope       = this,\n            productID   = $stateParams.productID;\n\n        /**\n          * Get images  \n          *\n          * @return void\n          *---------------------------------------------------------------- */\n                        \n        scope.imagesListDataTable = __DataStore.dataTable('#productImagesList', {\n            url         : {\n                'apiURL'    : 'manage.product.image.list',\n                'productID' : productID\n            },\n            dtOptions   : {\n                \"searching\": true,\n                \"rowReorder\" : true,\n                \"paginate\"  :false,\n                // \"order\": [[ 1, \"asc\" ]]\n            },\n            columnsData : dtProductImagesColumnsData, \n            scope       : $scope\n        });\n\n        //Set Image order list in pages start\n        $('#productImagesList').on('row-reorder.dt', function (e, data, edit) {\n            var productImageListOrderData = [];\n            \n            _.forEach(data, function(item, key) {\n                \n                productImageListOrderData.push({\n                    _id          : _.trim(item.node.id.replace('rowid_', '')),\n                    newPosition  : item.newPosition,\n                    oldPosition  : item.oldPosition\n                })\n              \n            }); \n\n            //set Image order list start\n            __DataStore.post('manage.product.image.update.list.order',{ \n                'productImageListOrder' : productImageListOrderData\n            }).success(function(responseData) {\n                    \n                appServices.processResponse(\n                    responseData,\n                    {\n                        error : function() {\n                            scope.reloadDT();   // reload datatable\n                        }\n                    },\n                    function() {\n                        scope.reloadDT();\n                    }\n                ); \n\n            });\n        });\n        //Set Image order list end\n\n        /*\n         Reload current datatable\n        -------------------------------------------------------------------------- */\n        \n        scope.reloadDT = function() {\n            __DataStore.reloadDT(scope.imagesListDataTable);\n        };\n\n        /**\n          * Add new image of product\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.add   = function() {\n\n            appServices.showDialog({},\n                {\n                    templateUrl : __globals.getTemplateURL(\n                            'product.manage.Images.add-dialog'\n                        )\n                },\n                function(promiseObj) {\n\n                    // Check if image added\n                    if (_.has(promiseObj.value, 'image_added') \n                        && promiseObj.value.image_added === true) {\n                        scope.reloadDT();\n                    }\n\n                });\n\n        };\n\n        /**\n          * Edit prdouct existing image\n          *\n          * @param number imageID\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.edit   = function(imageID) {\n\n            __DataStore.fetch({\n                    'apiURL'    : 'manage.product.image.edit.supportdata',\n                    'imageID'   : imageID,\n                    'productID' : productID,\n                })\n                .success(function(responseData) {\n                \n                    appServices.processResponse(responseData, null, function() {\n\n                        appServices.showDialog({\n                            'image_id'      : imageID,\n                            'prdouct_id'    : productID,\n                            'imageData'     : responseData.data.prdouct_image\n                        },\n                        {\n                            templateUrl : __globals.getTemplateURL(\n                                    'product.manage.Images.edit-dialog'\n                                )\n                        },\n                        function(promiseObj) {\n\n                            // Check if image updated\n                            if (_.has(promiseObj.value, 'image_updated') \n                                && promiseObj.value.image_updated === true) {\n                                scope.reloadDT();\n                            }\n\n                        }\n                    );\n\n                });    \n\n            });\n\n        };\n\n        /**\n          * Delete image \n          *\n          * @param number imageID\n          * @param string imageName\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.delete = function(imageID, imageName) {\n\n            __globals.showConfirmation({\n                text                : __ngSupport.getText(\n                    __globals.getJSString(\n                        'product_image_delete_confirm_text'\n                    ), {\n                        '__title__'    : imageName\n                    }\n                ),\n                confirmButtonText   : __globals.getJSString(\n                    'delete_action_button_text'\n                )\n            }, function() {\n\n                __DataStore.post({\n                    'apiURL'    : 'manage.product.image.delete',\n                    'imageID'   : imageID,\n                    'productID' : productID,\n                })\n                .success(function(responseData) {\n                \n                    var message = responseData.data.message;\n\n                    appServices.processResponse(responseData, {\n                            error : function() {\n\n                                __globals.showConfirmation({\n                                    title   : 'Deleted!',\n                                    text    : message,\n                                    type    : 'error'\n                                });\n\n                            }\n                        },\n                        function() {\n\n                            __globals.showConfirmation({\n                                title   : 'Deleted!',\n                                text    : message,\n                                type    : 'success'\n                            });\n                            scope.reloadDT();   // reload datatable\n\n                        }\n                    );    \n\n                });\n\n            });\n\n        };\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ProductImageAddController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.addImage', [])\n        .controller('ProductImageAddController',   [\n            '$scope',\n            '__Form', \n            'appServices',\n            'FileUploader',\n            '__Utils',\n            '$stateParams',\n            'appNotify',\n            ProductImageAddController \n        ]);\n\n    /**\n      * ProductImageAddController for add product new image\n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * @inject FileUploader\n      * @inject __Utils\n      * @inject $stateParams\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ProductImageAddController($scope, __Form, appServices, \n        FileUploader, __Utils, $stateParams, appNotify) {\n\n        var scope   = this;\n\n        scope = __Form.setup(scope, 'form_product_add_image',\n            'imageData',\n            { \n                secured : false\n            }\n        );\n\n        scope.imagesSelectConfig     = __globals.getSelectizeOptions({\n            valueField  : 'name',\n            labelField  : 'name',\n            render      : {\n                item: function(item, escape) {\n                    return  __Utils.template('#imageListItemTemplate',\n                    item\n                    );\n                },\n                option: function(item, escape) {\n                    return  __Utils.template('#imageListOptionTemplate',\n                    item\n                    );\n                }\n            }, \n            searchField : ['name']  \n        });\n        \n        /**\n          * Fetch uploaded temp images media files\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.images_count = 0;\n        scope.getTempImagesMedia = function() {\n\n            __Form.fetch('media.uploaded.images', { fresh : true })\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                    scope.image_files = responseData.data.files\n                    if (responseData.data.files.length > 0) {\n                    \tscope.images_count = responseData.data.files.length;\n\t\t\t\t\t};\n                });    \n\n            });\n\n        };\n\n        scope.getTempImagesMedia();\n        \n        var uploader = scope.uploader = new FileUploader({\n            url         : __Utils.apiURL('media.upload.image'),\n            autoUpload  : true,\n            headers     : {\n                'X-XSRF-TOKEN': __Utils.getXSRFToken()\n            }\n        });\n\n        // FILTERS\n        uploader.filters.push({\n            name: 'customFilter',\n            fn: function(item /*{File|FileLikeObject}*/, options) {\n                return this.queue.length < 1000;\n            }\n        });\n\n        scope.currentUploadedFileCount = 0;\n\t\tscope.loadingStatus     \t   = false;\n\n\t\t/**\n        * uploading msg\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        uploader.onAfterAddingAll = function() {\n\n            scope.loadingStatus = true;\n            appNotify.info(__globals.getJSString('loading_text'),{sticky : true});\n\n        };\n\n        /**\n        * Uploading on process\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n\n        uploader.onBeforeUploadItem = function(item) {\n            scope.loadingStatus = true;\n        };\n\n\n        /**\n        * on success counter of uploaded image\n        *\n        * @param object fileItem\n        * @param object response\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        \n        uploader.onSuccessItem = function( fileItem, response ) {\n\n            appServices.processResponse(response, {\n                error : function() {\n                },\n                otherError : function(reactionCode) {\n                  \n                    // If reaction code is Server Side Validation Error Then \n                    if (reactionCode == 3) {\n\n                        appNotify.error(response.data.message,{sticky : false});\n\n                    }\n\n                }\n            },\n            function() {\n\n                scope.currentUploadedFileCount++\n                \n            });   \n\n        };\n\n        /**\n        * uploaded all image then call function\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        \n        uploader.onCompleteAll  = function() {\n\n           scope.loadingStatus  = false;\n            if (scope.currentUploadedFileCount > 0) {\n                appNotify.success(scope.currentUploadedFileCount+' '+__globals.getJSString('file_uploaded_text'), {sticky : false});\n\n            }\n            scope.getTempImagesMedia();\n            scope.currentUploadedFileCount = 0;\n\n        };\n\n        /**\n          * Submit image form action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.submit = function() {\n\n            __Form.process({\n                'apiURL'    : 'manage.product.image.add',\n                'productID' : $stateParams.productID\n            }, scope)\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                    $scope.closeThisDialog({ 'image_added' : true });\n                });    \n\n            });\n\n        };\n\n        /**\n          * Show uploaded media files\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.showUploadedMediaDialog = function() {\n\n            appServices.showDialog({ 'image_files' : scope.image_files }, {\n                templateUrl : __globals.getTemplateURL(\n                    'product.manage.uploaded-media'\n                )\n            }, function(promiseObj) {\n\n                if (_.has(promiseObj.value, 'files')) {\n                    scope.image_files \t= promiseObj.value.files;\n                    scope.images_count \t= promiseObj.value.files.length;\n                } else {\n                    scope.getTempImagesMedia();\n                }\n\n            });\n\n        };\n\n        /**\n          * Cancel current dialog\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.cancel = function() {\n            $scope.closeThisDialog();\n        };\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ProductImageEditController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.editImage', [])\n        .controller('ProductImageEditController',   [\n            '$scope',\n            '__Form', \n            'appServices',\n            ProductImageEditController \n        ]);\n\n    /**\n      * ProductImageEditController for edit prdouct image\n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ProductImageEditController($scope, __Form, appServices) {\n\n        var scope       = this,\n            dialogData  = $scope.ngDialogData;\n\n        scope = __Form.setup(scope, 'form_product_edit_image',\n            'imageData',\n            { \n                secured : false\n            }\n        );\n\n        scope = __Form.updateModel(scope, dialogData.imageData);\n\n        /**\n          * Submit prdouct image edit form\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.submit = function() {\n\n            __Form.process({\n                'apiURL'        : 'manage.product.image.edit',\n                'productID'     : dialogData.prdouct_id,\n                'imageID'       : dialogData.image_id\n            }, scope)\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                    $scope.closeThisDialog({ 'image_updated' : true });\n                });    \n\n            });\n\n        };\n\n        /**\n          * Cancel current dialog\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.cancel = function() {\n            $scope.closeThisDialog();\n        };\n        \n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ProductOptionsController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.options', []) \n        .service('ImageDataService',[\n            '$q', \n            '__DataStore', \n            '__Form',\n            'appServices',\n            function ImageDataService($q, __DataStore,__Form, appServices) {\n\n                /*\n                Get Images \n                -----------------------------------------------------------------*/\n                this.getImages = function(productID) {\n    \n                    //create a differed object          \n                    var defferedObject = $q.defer();   \n       \n                    __DataStore.fetch({\n                            'apiURL'    : 'manage.product.image.read.data_list',\n                            'productID' : productID\n                        }).success(function(responseData) {\n                                \n                        appServices.processResponse(responseData, null, function(reactionCode) {\n    \n                            //this method calls when the require        \n                            //work has completed successfully        \n                            //and results are returned to client        \n                            defferedObject.resolve(responseData.data);  \n    \n                        }); \n    \n                    });       \n    \n                   //return promise to caller          \n                   return defferedObject.promise; \n                };\n            }\n        ])\n        .controller('ProductOptionsController',   [\n            '$scope', \n            '__DataStore',\n            'appServices',\n            '$stateParams',\n            'ImageDataService',\n            ProductOptionsController \n        ]);\n\n    /**\n      * ProductOptionsController for manage product options\n      *\n      * @inject $scope\n      * @inject __DataStore\n      * @inject appServices\n      * @inject $stateParams\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ProductOptionsController($scope, __DataStore, appServices,\n     $stateParams, ImageDataService) {\n\n        var dtProductOptionsColumnsData = [\n                {\n                    \"name\"          : \"name\",\n                     \"orderable\"    : true\n                },\n                {\n                    \"name\"          : \"type\",\n                    \"orderable\"     : true,\n                    \"template\"      : \"#typeColumnTemplate\"\n                },\n                {\n                    \"name\"      : null,\n                    \"template\"  : \"#productOptionValuesColumnTemplate\"\n                },\n                {\n                    \"name\"      : null,\n                    \"template\"  : \"#productOptionActionColumnTemplate\"\n                }\n            ],\n            scope       = this,\n            productID   = $stateParams.productID;\n\n        /**\n          * Get products  \n          *\n          * @return void\n          *---------------------------------------------------------------- */\n                        \n        scope.optionListDataTable = __DataStore.dataTable('#productOptionList', {\n            url         : {\n                'apiURL'    : 'manage.product.option.list',\n                'productID' : productID\n            },\n            dtOptions   : {\n                \"searching\": true,\n                \"order\": [[ 0, \"asc\" ]]\n            },\n            columnsData : dtProductOptionsColumnsData, \n            scope       : $scope\n        });\n\n        /*\n         Reload current datatable\n        -------------------------------------------------------------------------- */\n        \n        scope.reloadDT = function() {\n            __DataStore.reloadDT(scope.optionListDataTable);\n        };\n\n        /**\n          * Add product new option\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.selectAddOption   = function(type) {\n\n            appServices.showDialog({\n                'type' : type\n            },\n            {\n                templateUrl : __globals.getTemplateURL(\n                    'product.manage.options.add-dialog'\n                ),\n                controller : 'ProductOptionAddController as addOptionCtrl',\n                resolve: {\n                    GetImages: function() {\n                        return ImageDataService.getImages(productID);\n                    }\n                }\n            },\n            function(promiseObj) {\n\n                // Check if option added\n                if (_.has(promiseObj.value, 'option_added') \n                    && promiseObj.value.option_added === true) {\n                    scope.reloadDT();\n                }\n\n            });\n\n        };\n\n        /**\n          * Edit prdouct existing option\n          *\n          * @param number optionID\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.edit   = function(optionID) {\n\n            __DataStore.fetch({\n                    'apiURL'        : 'manage.product.option.edit.supportdata',\n                    'optionID'      : optionID,\n                    'productID'     : productID,\n                })\n                .success(function(responseData) {\n                \n                    appServices.processResponse(responseData, null, function() {\n\n                        appServices.showDialog({\n                            'option_id'      : optionID,\n                            'prdouct_id'     : productID,\n                            'optionData'     : responseData.data.product_option\n                        },\n                        {\n                            templateUrl : __globals.getTemplateURL(\n                                    'product.manage.options.edit-dialog'\n                                )\n                        },\n                        function(promiseObj) {\n\n                            // Check if option updated\n                            if (_.has(promiseObj.value, 'option_updated') \n                                && promiseObj.value.option_updated === true) {\n                                scope.reloadDT();\n                            }\n\n                        }\n                    );\n\n                });    \n\n            });\n\n        };\n\n        /**\n          * Show product option values dialog\n          *\n          * @param number optionID\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.values   = function(optionID, optionName) {\n\n            __DataStore.fetch({\n                    'apiURL'        : 'manage.product.option.value.list',\n                    'productID'     : productID,\n                    'optionID'      : optionID\n                 }, {\n                    fresh : true\n                 })\n                .success(function(responseData) {\n                \n                    appServices.processResponse(responseData, null, function() {\n                        \n                        appServices.showDialog({\n                            'option_id'         : optionID,\n                            'prdouct_id'        : productID,\n                            'option_name'       : optionName,\n                            'option_type'       : responseData.data.optionType,\n                            'option_values'     : responseData.data.option_values,\n                            'productImages'     : responseData.data.images,\n                            'isOptionValueImagesUsed': responseData.data.isOptionValueImagesUsed\n                        },\n                        {\n                            templateUrl : __globals.getTemplateURL(\n                                    'product.manage.options.values.list-dialog'\n                                )\n                        },\n                        function(promiseObj) {\n\n                        }\n                    );\n\n                });    \n\n            });\n\n        };\n\n        /**\n          * Add option values\n          *\n          * @param number optionID\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.addValues = function(optionID, optionName) {\n\n            appServices.showDialog({\n                'option_id'         : optionID,\n                'option_name'       : optionName,\n                'prdouct_id'        : productID\n            },\n            {\n                templateUrl : __globals.getTemplateURL(\n                        'product.manage.options.values.add-dialog'\n                    )\n            },\n            function(promiseObj) {\n\n            });\n\n        };\n        \n\n        /**\n          * Delete option \n          *\n          * @param number optionID\n          * @param string optionName\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.delete = function(optionID, optionName) {\n\n            __globals.showConfirmation({\n                text                : __ngSupport.getText(\n                    __globals.getJSString('product_option_delete_confirm_text'), {\n                        '__name__'    : optionName\n                    }\n                ),\n                confirmButtonText   : __globals.getJSString('delete_action_button_text')\n            }, function() {\n\n                __DataStore.post({\n                    'apiURL'        : 'manage.product.option.delete',\n                    'optionID'      : optionID,\n                    'productID'     : productID,\n                })\n                .success(function(responseData) {\n                \n                    var message = responseData.data.message;\n\n                    appServices.processResponse(responseData, {\n                            error : function() {\n\n                                __globals.showConfirmation({\n                                    title   : 'Deleted!',\n                                    text    : message,\n                                    type    : 'error'\n                                });\n\n                            }\n                        },\n                        function() {\n\n                            __globals.showConfirmation({\n                                title   : 'Deleted!',\n                                text    : message,\n                                type    : 'success'\n                            });\n                            scope.reloadDT();   // reload datatable\n\n                        }\n                    );    \n\n                });\n\n            });\n\n        };\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ProductOptionAddController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.addOption', [])\n        .controller('ProductOptionAddController',   [\n            '$scope',\n            '__Form', \n            'appServices',\n            '$stateParams',\n            'FileUploader',\n            '__Utils',\n            'appNotify',\n            'GetImages',\n            ProductOptionAddController \n        ]);\n\n    /**\n      * ProductOptionAddController for add product option\n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * @inject $stateParams\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ProductOptionAddController($scope, __Form, appServices, $stateParams, FileUploader, __Utils, appNotify, GetImages) {\n\n        var scope       = this;\n        scope.addOptionType = $scope.ngDialogData.type;\n        scope.productID = $stateParams.productID;\n        scope = __Form.setup(scope, 'form_product_add_option',\n            'optionData',\n            { \n                secured : false\n            }\n        );\n        \n        scope.productImages = GetImages.images;\n        scope.isOptionValueImagesUsed = GetImages.isOptionValueImagesUsed;\n            \n        scope.imagesSelectConfig     = __globals.getSelectizeOptions({\n            valueField  : 'name',\n            labelField  : 'name',\n            render      : {\n                item: function(item, escape) {\n                    return  __Utils.template('#imageListItemTemplate',\n                    item\n                    );\n                },\n                option: function(item, escape) {\n\n                    return  __Utils.template('#imageListItemImageTemplate', item);\n                }\n            },\n            searchField : ['name']  \n        });\n\n\n        scope.productImagesSelectConfig     = __globals.getSelectizeOptions({\n            valueField      : 'id',\n            labelField      : 'title',\n            searchField     : ['title'],\n            maxItems\t\t: 100,\n            plugins\t\t\t: ['remove_button'],\n            onDropdownOpen : function ($dropdown) {\n                this.renderCache = {};\n            },\n            onDropdownClose : function ($dropdown) {\n                this.renderCache = {};  // clear the html template cache\n            },\n            render      : {\n                item: function(item, escape) {\n                   \n                    return  __Utils.template('#productImageItemTemplate', {\n                        'item' : item,\n                        'itemId' : item.id,\n                        'selectedIds' :  __globals.filterArrayValue(_.flatten(_.pluck(scope.optionData.values, 'slider_images')))\n                    });\n                },\n                option: function(item, escape) {\n\n                    var selectedIds =  __globals.filterArrayValue(_.flatten(_.pluck(scope.optionData.values, 'slider_images')));\n\n                    if (_.includes(selectedIds, item.id)) {\n                        return '<div class=\"lw-selectize-item lw-disabled-selectize-option\"><span class=\"lw-selectize-item-thumb\"> <img src=\"'+item.thumbnail_url+'\"/> '+escape(item.title) + '- <small> Already Selected</small> </span></div>';\n                    }\n                   \n                    return '<div class=\"lw-selectize-item\"><span class=\"lw-selectize-item-thumb\"> <img src=\"'+item.thumbnail_url+'\"/> '+escape(item.title) + '</span></div>';\n                }\n            }\n        });\n\n\n        /**\n          * Fetch uploaded temp images media files\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.images_count = 0;\n        scope.getTempImagesMedia = function() {\n\n            __Form.fetch('media.uploaded.images', { fresh : true })\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                    scope.image_files = responseData.data.files\n                 \n                    // scope.optionData.image = scope.image_files;\n                    // scope.optionData.values.push({\n                    //     name        : '',\n                    //     addon_price : '',\n                    //     image       : scope.image_files\n                    // });\n                   \n                    if (responseData.data.files.length > 0) {\n                        scope.images_count = responseData.data.files.length;\n                    };\n                });    \n\n            });\n\n        };\n\n        scope.getTempImagesMedia();\n\n        if (scope.addOptionType == 2) {\n            scope.optionData.values  = [\n                {\n                    'name'          : '',\n                    'addon_price'   : '',\n                    'image'         : '',\n                    'slider_images' : []\n                }\n            ];\n        } else {\n            scope.optionData.values  = [\n                {\n                    'name'          : '',\n                    'addon_price'   : '',\n                    'slider_images' : []\n                }\n            ];\n        }\n        \n\n        /**\n          * Add new value in option value\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.addNewValue = function() {\n            if (scope.addOptionType == 2) {\n                scope.optionData.values.push({\n                    name        : '',\n                    addon_price : '',\n                    image       : '',\n                    slider_images : []\n                });\n            } else {\n                scope.optionData.values.push({\n                    name        : '',\n                    addon_price : '',\n                    slider_images : []\n                });\n            }\n\n        };\n\n        /**\n          * Remove current option value row\n          *\n          * @param number index\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.remove = function(index) {\n\n            if (!_.isEmpty(scope.optionData.values)\n             && scope.optionData.values.length > 1) {\n\n                _.remove(scope.optionData.values, function(value, key) {\n                    return index == key;\n                });\n\n            }\n            \n        };\n\n        /**\n          * Check if option value already taken\n          *\n          * @param valueNameFieldIndex\n          * @param valueNameFieldValue\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.checkUnique = function(valueNameFieldIndex, valueNameFieldValue) {\n\n            // Check if option values length greater \n            if (scope.optionData.values.length > 1) {\n                _.forEach(scope.optionData.values,\n\n                    function(optionValue, keyIndex) {\n\n                    var optionValueName         = optionValue.name,\n                        optionValueNameField    = 'values.'+keyIndex+'.name';\n                    if (!_.isEmpty(optionValueName)) {\n\n                        _.find(scope.optionData.values,\n                             function(value, key) {\n\n                             \tif (!_.isEmpty(optionValueName)) {\n                             \t\tvar newOptionValue = optionValueName.toLowerCase();\n                             \t} else {\n                             \t\tvar newOptionValue = optionValueName;\n                             \t}\n\n                             \tif (!_.isEmpty(value.name)) {\n                             \t\tvar valueNmae = value.name.toLowerCase();\n                             \t} else {\n                             \t\tvar valueNmae = value.name;\n                             \t}\n\n\n                            if (valueNmae == newOptionValue \n                                && keyIndex != key) {\n\n                                scope\n                                .form_product_add_option[optionValueNameField]\n                                    .$setValidity('unique', false);\n\n                            } else {\n\n                                scope\n                                .form_product_add_option[optionValueNameField]\n                                    .$setValidity('unique', true);\n                            }\n\n                        });\n\n                    } else {\n\n                        scope\n                            .form_product_add_option[optionValueNameField]\n                             .$setValidity('unique', true);\n\n                    }\n\n\n              \n                });\n\n            } else {\n\n                var valueField = 'values.'+valueNameFieldIndex+'.name';\n                scope.form_product_add_option[valueField]\n                        .$setValidity('unique', true);\n            }\n            \n        };\n\n        var uploader = scope.uploader = new FileUploader({\n            url         : __Utils.apiURL('media.upload.process'),\n            autoUpload  : true,\n            headers     : {\n                'X-XSRF-TOKEN': __Utils.getXSRFToken()\n            }\n        });\n\n        // FILTERS\n        uploader.filters.push({\n            name: 'customFilter',\n            fn: function(item /*{File|FileLikeObject}*/, options) {\n                return this.queue.length < 1000;\n            }\n        });\n\n        scope.currentUploadedFileCount = 0;\n        scope.loadingStatus            = false;\n\n        /**\n        * uploading msg\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        uploader.onAfterAddingAll = function() {\n\n            scope.loadingStatus = true;\n            appNotify.info(__globals.getJSString('loading_text'),{sticky : true});\n\n        };\n\n        /**\n        * Uploading on process\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n\n        uploader.onBeforeUploadItem = function(item) {\n            scope.loadingStatus = true;\n        };\n\n\n        /**\n        * on success counter of uploaded image\n        *\n        * @param object fileItem\n        * @param object response\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        \n        uploader.onSuccessItem = function( fileItem, response ) {  \n            //scope.thumbnailURL = response.data.thumbnailURL;\n            scope.optionData.values[scope.newImageIndex].thumbnailURL = response.data.thumbnailURL;\n            scope.imageFile = response.data.fileName;\n            scope.optionData.values[scope.newImageIndex].image = scope.imageFile;\n            scope.newImageIndex = null;\n      \n            appServices.processResponse(response, { \n                error : function() {\n                },\n                otherError : function(reactionCode) {\n                  \n                    // If reaction code is Server Side Validation Error Then \n                    if (reactionCode == 3) {\n\n                        appNotify.error(response.data.message,{sticky : false});\n\n                    }\n\n                }\n            },\n            function() {\n\n                scope.currentUploadedFileCount++\n                \n            });   \n\n        };\n\n        scope.newImageIndex = null;\n        scope.addImages = function(index, data) {\n\n            scope.newImageIndex = index;\n\n        };\n       \n        /**\n        * uploaded all image then call function\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        \n        uploader.onCompleteAll  = function() {\n\n           scope.loadingStatus  = false;\n            if (scope.currentUploadedFileCount > 0) {\n                appNotify.success(scope.currentUploadedFileCount+' '+__globals.getJSString('file_uploaded_text'), {sticky : false});\n\n            }\n            scope.getTempImagesMedia();\n            scope.currentUploadedFileCount = 0;\n\n        };\n        \n        /**\n          * Submit product add option form action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.submit = function() {\n            scope.optionData.type = scope.addOptionType;\n       \n            __Form.process({\n                'apiURL'        : 'manage.product.option.add',\n                'productID'     : $stateParams.productID\n            }, scope)\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                    $scope.closeThisDialog({ 'option_added' : true });\n                });    \n\n            });\n\n        };\n\n        /**\n          * Show uploaded media files\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.showUploadedMediaDialog = function() {\n\n            appServices.showDialog({ 'image_files' : scope.image_files }, {\n                templateUrl : __globals.getTemplateURL(\n                    'product.manage.uploaded-media'\n                )\n            }, function(promiseObj) {\n\n                if (_.has(promiseObj.value, 'files')) {\n                    scope.image_files   = promiseObj.value.files;\n                    scope.images_count  = promiseObj.value.files.length;\n                } else {\n                    scope.getTempImagesMedia();\n                }\n\n            });\n\n        };\n\n        /**\n          * Cancel current dialog\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.cancel = function() {\n            $scope.closeThisDialog();\n        };\n        \n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ProductOptionEditController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.editOption', [])\n        .controller('ProductOptionEditController',   [\n            '$scope',\n            '__Form', \n            'appServices',\n            '$stateParams',\n            ProductOptionEditController \n        ]);\n\n    /**\n      * ProductOptionEditController for edit prdouct option\n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * @inject $stateParams\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ProductOptionEditController($scope, __Form, appServices, $stateParams) {\n\n        var scope       = this,\n            dialogData  = $scope.ngDialogData;\n\n        scope.optionID = dialogData.option_id;\n        scope = __Form.setup(scope, 'form_product_edit_option',\n            'optionData',\n            { \n                secured : false\n            }\n        );\n\n        scope = __Form.updateModel(scope, dialogData.optionData);\n\n        /**\n          * Submit prdouct edit option form action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.submit = function() {\n\n            __Form.process({\n                'apiURL'        : 'manage.product.option.edit',\n                'productID'     : dialogData.prdouct_id,\n                'optionID'      : dialogData.option_id\n            }, scope)\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                    $scope.closeThisDialog({ 'option_updated' : true });\n                });    \n\n            });\n\n        };\n\n        /**\n          * Cancel current dialog\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.cancel = function() {\n            $scope.closeThisDialog();\n        };\n        \n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ProductOptionValuesController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.optionValues', [])\n        .controller('ProductOptionValuesController',   [\n            '$scope',\n            '__Form',\n            '__DataStore',\n            'appServices',\n            'FileUploader',\n            '__Utils',\n            'appNotify',\n            ProductOptionValuesController \n        ]);\n\n    /**\n      * ProductOptionValuesController for manage product option values\n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject __DataStore\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ProductOptionValuesController($scope, __Form, __DataStore,  appServices, FileUploader, __Utils, appNotify) {\n\n        var scope       = this,\n            dialogData  = $scope.ngDialogData,\n            productID   = dialogData.prdouct_id,\n            optionID    = dialogData.option_id;\n            scope.optionLableID = dialogData.prdouct_id;\n            scope.optionType = dialogData.option_type;\n            scope.productImages = dialogData.productImages;\n            scope.productID = productID;\n        scope.isOptionValueImagesUsed = dialogData.isOptionValueImagesUsed;\n        scope = __Form.setup(scope, 'form_product_edit_option_values',\n            'optionData',\n            { \n                secured : false\n            }\n        );\n\n        scope.notification_message = __ngSupport.getText(\n            __globals.getJSString('product_option_value_add_form_notification'),\n             {\n                '__option_name__'    : dialogData.option_name\n             }\n        );\n\n        \n        scope.imagesSelectConfig     = __globals.getSelectizeOptions({\n            valueField  : 'name',\n            labelField  : 'name',\n            render      : {\n                item: function(item, escape) {\n                    return  __Utils.template('#imageListItemTemplate',\n                    item\n                    );\n                },\n                option: function(item, escape) {\n                    return  __Utils.template('#imageListOptionTemplate',\n                    item\n                    );\n                }\n            }, \n            searchField : ['name']  \n        });\n        \n        var existingImagesIds = __globals.filterArrayValue(_.flatten(_.pluck(dialogData.option_values, 'slider_images')));\n      \n        scope.productImagesSelectConfig     = __globals.getSelectizeOptions({\n            valueField      : 'id',\n            labelField      : 'title',\n            searchField     : ['title'],\n            maxItems\t\t: 100,\n            plugins\t\t\t: ['remove_button'],\n            onDelete : function(values) {\n                \n                if (!_.isEmpty(_.intersection(existingImagesIds, __globals.filterArrayValue(values)))) {\n                    __DataStore.post({\n                        'apiURL'    : 'manage.product.image.read.process_unset',\n                        'productID' : productID,\n                        'imageId'   : values\n                    }).success(function(responseData) {\n\n                        appServices.processResponse(responseData, null,function(data) {\n                            \n                        });   \n\n                    });   \n                }\n            },\n            onDropdownOpen : function ($dropdown) {\n                this.renderCache = {};\n            },\n            onDropdownClose : function ($dropdown) {\n                this.renderCache = {};  // clear the html template cache\n            },\n            render      : {\n                item: function(item, escape) {\n                   \n                    return  __Utils.template('#productImageItemTemplate', {\n                        'item' : item,\n                        'itemId' : item.id,\n                        'selectedIds' :  __globals.filterArrayValue(_.flatten(_.pluck(scope.optionData.values, 'slider_images')))\n                    });\n                },\n                option: function(item, escape) {\n\n                    var selectedIds =  __globals.filterArrayValue(_.flatten(_.pluck(scope.optionData.values, 'slider_images')));\n\n                    if (_.includes(selectedIds, item.id)) {\n                        return '<div class=\"lw-selectize-item lw-disabled-selectize-option\"><span class=\"lw-selectize-item-thumb\"> <img src=\"'+item.thumbnail_url+'\"/> '+escape(item.title) + '- <small> Already Selected</small> </span></div>';\n                    }\n                   \n                    return '<div class=\"lw-selectize-item\"><span class=\"lw-selectize-item-thumb\"> <img src=\"'+item.thumbnail_url+'\"/> '+escape(item.title) + '</span></div>';\n                }\n            }\n        });\n\n        /**\n          * Fetch uploaded temp images media files\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.images_count = 0;\n        scope.getTempImagesMedia = function() {\n\n            __Form.fetch('media.uploaded.images', { fresh : true })\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                    scope.image_files = responseData.data.files\n\n                    if (responseData.data.files.length > 0) {\n                        scope.images_count = responseData.data.files.length;\n                    };\n                });    \n\n            });\n\n        };\n\n        scope.getTempImagesMedia();\n        \n        scope.optionData.values = [];\n        scope.optionData.optionID = optionID;   \n        scope = __Form.updateModel(scope, { values : dialogData.option_values });\n\n        /**\n          * Add new value in options value\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.addNewValue = function() {\n            scope.optionData.values.push({\n                name        : '',\n                addon_price : '',\n                image       : '',\n                slider_images : []\n\n            });\n        };\n\n        /**\n          * Remove current option value row\n          *\n          * @param number index\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.remove = function(index) {\n\n            if (!_.isEmpty(scope.optionData.values)\n             && scope.optionData.values.length > 1) {\n\n                _.remove(scope.optionData.values, function(value, key) {\n                    return index == key;\n                });\n\n            }\n            \n        };\n\n        /**\n          * Check if option value already taken\n          *\n          * @param valueNameFieldIndex\n          * @param valueNameFieldValue\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.checkUnique = function(valueNameFieldIndex, valueNameFieldValue) {\n\n            // Check if option values length greater \n            if (scope.optionData.values.length > 1) {\n                _.forEach(scope.optionData.values,\n\n                    function(optionValue, keyIndex) {\n\n                    var optionValueName         = optionValue.name,\n                        optionValueNameField    = 'values.'+keyIndex+'.name';\n                    if (!_.isEmpty(optionValueName)) {\n\n                        _.find(scope.optionData.values,\n                             function(value, key) {\n\n                                if (!_.isEmpty(optionValueName)) {\n                                    var newOptionValue = optionValueName.toLowerCase();\n                                } else {\n                                    var newOptionValue = optionValueName;\n                                }\n\n                                if (!_.isEmpty(value.name)) {\n                                    var valueNmae = value.name.toLowerCase();\n                                } else {\n                                    var valueNmae = value.name;\n                                }\n\n\n                            if (valueNmae == newOptionValue \n                                && keyIndex != key) {\n\n                                scope\n                                .form_product_add_option[optionValueNameField]\n                                    .$setValidity('unique', false);\n\n                            } else {\n\n                                scope\n                                .form_product_add_option[optionValueNameField]\n                                    .$setValidity('unique', true);\n                            }\n\n                        });\n\n                    } else {\n\n                        scope\n                            .form_product_add_option[optionValueNameField]\n                             .$setValidity('unique', true);\n\n                    }\n\n\n              \n                });\n\n            } else {\n\n                var valueField = 'values.'+valueNameFieldIndex+'.name';\n                scope.form_product_add_option[valueField]\n                        .$setValidity('unique', true);\n            }\n            \n        };\n\n        var uploader = scope.uploader = new FileUploader({\n            url         : __Utils.apiURL('media.upload.process'),\n            autoUpload  : true,\n            headers     : {\n                'X-XSRF-TOKEN': __Utils.getXSRFToken()\n            }\n        });\n\n        // FILTERS\n        uploader.filters.push({\n            name: 'customFilter',\n            fn: function(item /*{File|FileLikeObject}*/, options) {\n                return this.queue.length < 1000;\n            }\n        });\n\n        scope.currentUploadedFileCount = 0;\n        scope.loadingStatus            = false;\n\n        /**\n        * uploading msg\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        uploader.onAfterAddingAll = function() {\n\n            scope.loadingStatus = true;\n            appNotify.info(__globals.getJSString('loading_text'),{sticky : true});\n\n        };\n\n        /**\n        * Uploading on process\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n\n        uploader.onBeforeUploadItem = function(item) {\n            scope.loadingStatus = true;\n        };\n\n\n        /**\n        * on success counter of uploaded image\n        *\n        * @param object fileItem\n        * @param object response\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        \n        uploader.onSuccessItem = function( fileItem, response ) {\n            // if (!_.isEmpty(response.data.thumbnailURL)) {\n            //     scope.thumbnailURL = response.data.thumbnailURL;\n            // }\n            scope.optionData.values[scope.newImageIndex].thumbnailURL = response.data.thumbnailURL;\n            scope.imageFile = response.data.fileName;\n            scope.optionData.values[scope.newImageIndex].image = scope.imageFile;\n            scope.newImageIndex = null;\n        \n            appServices.processResponse(response, {\n                error : function() {\n                },\n                otherError : function(reactionCode) {\n                  \n                    // If reaction code is Server Side Validation Error Then \n                    if (reactionCode == 3) {\n\n                        appNotify.error(response.data.message,{sticky : false});\n\n                    }\n\n                }\n            },\n            function() {\n\n                scope.currentUploadedFileCount++\n                \n            });   \n\n        };\n\n        scope.newImageIndex = null;\n        scope.addImages = function(index, data) {\n\n            scope.newImageIndex = index;\n\n        };\n\n        /**\n        * uploaded all image then call function\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        \n        uploader.onCompleteAll  = function() {\n\n           scope.loadingStatus  = false;\n            if (scope.currentUploadedFileCount > 0) {\n                appNotify.success(scope.currentUploadedFileCount+' '+__globals.getJSString('file_uploaded_text'), {sticky : false});\n\n            }\n            scope.getTempImagesMedia();\n            scope.currentUploadedFileCount = 0;\n\n        };\n\n\n        /**\n          * Fetch product option values \n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.fetchOptionValues = function() {\n\n            __Form.fetch({\n                    'apiURL'        : 'manage.product.option.value.list',\n                    'productID'     : productID,\n                    'optionID'      : optionID, \n                })\n                .success(function(responseData) {\n                \n                    appServices.processResponse(responseData, null, function() {\n\n                        scope = __Form.updateModel(scope, {\n                            values : responseData.data.option_values\n                        });\n\n                    });\n\n                });\n        };\n\n        /**\n          * Remove current option value row\n          *\n          * @param number index\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.remove = function(index) {\n\n            if (!_.isEmpty(scope.optionData.values)\n             && scope.optionData.values.length > 1) {\n\n                _.remove(scope.optionData.values, function(value, key) {\n                    return index == key;\n                });\n\n            }\n            \n        };\n        \n\n        /**\n          * Delete option value\n          *\n          * @param number optionValueID\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.delete = function(optionValueID, optionType) {\n    \n         __DataStore.post({\n                'apiURL'        : 'manage.product.option.value.delete',\n                'optionID'      : optionID,\n                'productID'     : productID,\n                'optionValueID' : optionValueID,\n                'optionType'    : optionType\n            })\n            .success(function(responseData) {\n\n                appServices.processResponse(responseData, null, function() {\n                    /*scope.fetchOptionValues();*/\n                    _.remove(scope.optionData.values, function(value) {\n                      return value.id == optionValueID;\n                    });\n\n                });    \n\n            });\n        \n        };\n\n        /**\n          * Check if option value already taken\n          *\n          * @param valueNameFieldIndex\n          * @param valueNameFieldValue\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.checkUnique = function(valueNameFieldIndex, valueNameFieldValue) {\n\n            // Check if option values length greater \n            if (scope.optionData.values.length > 1) {\n\n                _.forEach(scope.optionData.values,\n                    function(optionValue, keyIndex) {\n\n                    var optionValueName         = optionValue.name,\n                        optionValueNameField    = 'values.'+keyIndex+'.name';\n\n                    if (!_.isEmpty(optionValueName)) {\n\n                        _.find(scope.optionData.values,\n                             function(value, key) {\n\n                            if (!_.isEmpty(optionValueName)) {\n                         \t\tvar newOptionValue = optionValueName.toLowerCase();\n                         \t} else {\n                         \t\tvar newOptionValue = optionValueName;\n                         \t}\n\n                         \tif (!_.isEmpty(value.name)) {\n                         \t\tvar valueNmae = value.name.toLowerCase();\n                         \t} else {\n                         \t\tvar valueNmae = value.name;\n                         \t}\n                         \t\n                            if (valueNmae == newOptionValue \n                                && keyIndex != key) {\n\n                                scope\n                                .form_product_edit_option_values[optionValueNameField]\n                                    .$setValidity('unique', false);\n\n                            } else {\n\n                                scope\n                                .form_product_edit_option_values[optionValueNameField]\n                                    .$setValidity('unique', true);\n                            }\n\n                        });\n\n                    } else {\n                        scope\n                            .form_product_edit_option_values[optionValueNameField]\n                             .$setValidity('unique', true);\n                    }\n\n                });\n\n            } else {\n\n                var valueField = 'values.'+valueNameFieldIndex+'.name';\n                scope.form_product_edit_option_values[valueField]\n                        .$setValidity('unique', true);\n            }\n            \n        };\n\n        /**\n          * Submit prdouct option edit values form action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.submit = function() {\n            scope.optionData.type = scope.optionType;\n            \n            __Form.process({\n                'apiURL'        : 'manage.product.option.value.edit',\n                'productID'     : productID,\n                'optionID'      : optionID\n            }, scope)\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                    $scope.closeThisDialog();\n                });    \n\n            });\n\n        };\n\n        /**\n          * Show uploaded media files\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.showUploadedMediaDialog = function() {\n\n            appServices.showDialog({ 'image_files' : scope.image_files }, {\n                templateUrl : __globals.getTemplateURL(\n                    'product.manage.uploaded-media'\n                )\n            }, function(promiseObj) {\n\n                if (_.has(promiseObj.value, 'files')) {\n                    scope.image_files   = promiseObj.value.files;\n                    scope.images_count  = promiseObj.value.files.length;\n                } else {\n                    scope.getTempImagesMedia();\n                }\n\n            });\n\n        };\n\n        /**\n          * Cancel current dialog\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.cancel = function() {\n            $scope.closeThisDialog();\n        };\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ProductOptionValuesAddController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.addOptionValues', [])\n        .controller('ProductOptionValuesAddController',   [\n            '$scope',\n            '__Form', \n            'appServices',\n            ProductOptionValuesAddController \n        ]);\n\n    /**\n      * ProductOptionValuesAddController for add prdouct option values\n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ProductOptionValuesAddController($scope, __Form, appServices) {\n\n        var scope       = this,\n            dialogData  = $scope.ngDialogData;\n\n        scope = __Form.setup(scope, 'form_product_add_option',\n            'optionData',\n            { \n                secured : false\n            }\n        );\n        scope.optionData.values  = [\n            {\n                'name'          : '',\n                'addon_price'   : ''\n            }\n        ];\n\n        scope.notification_message = __ngSupport.getText(\n            __globals.getJSString('product_option_value_add_form_notification'),\n             {\n                '__option_name__'    : dialogData.option_name\n             }\n        );\n\n        /**\n          * Add new value in options value\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.addNewValue = function() {\n            scope.optionData.values.push({\n                name        : '',\n                addon_price : ''\n            });\n        };\n\n        /**\n          * Remove current option value row\n          *\n          * @param number index\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.remove = function(index) {\n\n            if (!_.isEmpty(scope.optionData.values)\n             && scope.optionData.values.length > 1) {\n\n                _.remove(scope.optionData.values, function(value, key) {\n                    return index == key;\n                });\n\n            }\n            \n        };\n\n        /**\n          * Check if option value already taken\n          *\n          * @param valueNameFieldIndex\n          * @param valueNameFieldValue\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.checkUnique = function(valueNameFieldIndex, valueNameFieldValue) {\n\n            // Check if option values length greater \n            if (scope.optionData.values.length > 1) {\n\n                _.forEach(scope.optionData.values,\n                    function(optionValue, keyIndex) {\n\n                    var optionValueName         = optionValue.name,\n                        optionValueNameField    = 'values.'+keyIndex+'.name';\n                    if (!_.isEmpty(optionValueName)) {\n\n                        _.find(scope.optionData.values,\n                             function(value, key) {\n\n                            if (!_.isEmpty(optionValueName)) {\n                         \t\tvar newOptionValue = optionValueName.toLowerCase();\n                         \t} else {\n                         \t\tvar newOptionValue = optionValueName;\n                         \t}\n\n                         \tif (!_.isEmpty(value.name)) {\n                         \t\tvar valueNmae = value.name.toLowerCase();\n                         \t} else {\n                         \t\tvar valueNmae = value.name;\n                         \t}\n                            \n                            if (valueNmae == newOptionValue \n                                && keyIndex != key) {\n\n                                scope\n                                .form_product_add_option[optionValueNameField]\n                                    .$setValidity('unique', false);\n\n                            } else {\n\n                                scope\n                                .form_product_add_option[optionValueNameField]\n                                    .$setValidity('unique', true);\n                            }\n\n                        });\n\n                    } else {\n\n                        scope\n                            .form_product_add_option[optionValueNameField]\n                             .$setValidity('unique', true);\n\n                    }\n\n\n              \n                });\n\n            } else {\n\n                var valueField = 'values.'+valueNameFieldIndex+'.name';\n                scope.form_product_add_option[valueField]\n                        .$setValidity('unique', true);\n            }\n            \n        };\n        \n        \n        /**\n          * Submit prdouct add option form action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.submit = function() {\n            \n            __Form.process({\n                'apiURL'        : 'manage.product.option.value.add',\n                'productID'     : dialogData.prdouct_id,\n                'optionID'      : dialogData.option_id\n            }, scope)\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                    $scope.closeThisDialog();\n                });    \n\n            });\n\n        };\n\n        /**\n          * Cancel current dialog\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.cancel = function() {\n            $scope.closeThisDialog();\n        };\n        \n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ProductSpecificationController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.specification', [])\n        .controller('ProductSpecificationController',   [\n            '$scope', \n            '__DataStore',\n            'appServices',\n            '$stateParams',\n            '__Form',\n            ProductSpecificationController \n        ]);\n\n    /**\n      * ProductSpecificationController for manage product options\n      *\n      * @inject $scope\n      * @inject __DataStore\n      * @inject appServices\n      * @inject $stateParams\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ProductSpecificationController($scope, __DataStore, appServices, $stateParams, __Form) {\n\n        var scope       = this,\n            productID   = $stateParams.productID;\n\n        scope.initialPageContentLoaded = false;\n\n        scope = __Form.setup(scope, 'form_specification_values_add', 'specificationData');\n\n        scope.assign_specification_select_config = __globals.getSelectizeOptions({\n            valueField  : '_id',\n            labelField  : 'title',\n            searchField : [ 'title' ]\n        });\n\n        scope.specification_select_config = __globals.getSelectizeOptions({\n                                                valueField  : 'label',\n                                                labelField  : 'label',\n                                                searchField : [ 'label' ],\n                                                plugins: ['restore_on_backspace', 'remove_button'],\n                                                maxItems : 1000,\n                                                delimiter: ',',\n                                                persist: true,\n                                                create: function(input) {\n                                                    return {\n                                                        _id : input,\n                                                        label: input\n                                                    }\n                                                }\n                                            });\n   \n\n        /**\n          * Get List of specification\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.getSpecificationList = function() {\n            __DataStore.fetch({\n                'apiURL'    : 'manage.product.specification.list',\n                'productID' : productID\n            }).success(function(responseData) {\n                appServices.processResponse(responseData, null, function() {\n                    var requestData = responseData.data;\n                \n                    scope.specification_presets__id = requestData.presetId;\n                    scope.isSpecificationExist = requestData.isSpecificationExist;\n                    scope.specificationData.specifications = requestData.specifications;\n                    scope.presetTitle = requestData.presetTitle;\n                    scope.specificationList = requestData.specificationList;\n                    scope.otherSpecifications = requestData.otherSpecifications;\n                    scope.oldSpecification = requestData.oldSpecification;\n                      \n                    scope.initialPageContentLoaded = true;\n                });\n            });\n        }\n\n        scope.getSpecificationList();\n\n        /**\n          * Add Category specification\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.addSpecification = function(presetType, specification) {\n          \n           __Form.process({\n                'apiURL': 'manage.product.specification.add',\n                'productID' : productID,\n                'presetType': presetType\n           }, scope).success(function(responseData) {\n                appServices.processResponse(responseData, null, function() {\n                    scope.getSpecificationList();\n                });\n           });\n        }\n\n        // Change Specification Preset\n        scope.changeSpecificationPreset = function(presetId) {\n            if (!_.isUndefined(presetId) || !_.isEmpty(presetId)) {\n                var updateData = {\n                    presetId: presetId,\n                    isDelete: (presetId == 'delete') ? true : false\n                }\n                __DataStore.post({\n                    'apiURL': 'manage.product.specification.change_preset',\n                    'productID' : productID,\n               }, updateData).success(function(responseData) {\n                    appServices.processResponse(responseData, null, function() {\n                        scope.getSpecificationList();\n                    });\n               });\n           }\n        }\n\n        /**\n          * Add product new specification\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.add   = function() {\n            appServices.showDialog(\n            {\n                'otherSpecifications': scope.otherSpecifications\n            },\n            {\n                templateUrl : __globals.getTemplateURL(\n                    'product.manage.specification.add-dialog'\n                )\n            },\n            function(promiseObj) {\n                // Check if option added\n                if (_.has(promiseObj.value, 'specification_added') \n                    && promiseObj.value.specification_added === true) {\n                    scope.getSpecificationList();\n                }\n            });\n        };\n\n        /**\n          * Edit prdouct existing specification\n          *\n          * @param number specificationID\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.edit   = function(specificationID) {\n        \t\n            __DataStore.fetch({\n                    'apiURL'          : 'manage.product.specification.edit',\n                    'productID'       : productID,\n                    'specificationID' : specificationID,\n                })\n                .success(function(responseData) {\n                \n                    appServices.processResponse(responseData, null, function() {\n                    \n                        appServices.showDialog({\n\n                            'specificationValues'     : responseData.data.secificationValues,\n                            'specificationCollection' : responseData.data.specificationCollection,\n                            'assignSpecificationData' : responseData.data.assignSpecificationData\n                        },\n                        {\n                            templateUrl : __globals.getTemplateURL(\n                                    'product.manage.specification.edit-dialog'\n                                )\n                        },\n                        function(promiseObj) {\n\n                            // Check if option updated\n                            if (_.has(promiseObj.value, 'specification_updated') \n                                && promiseObj.value.specification_updated === true) {\n                                scope.getSpecificationList();\n                            }\n\n                        }\n                    );\n\n                });    \n\n            });\n\n        };\n\n        /**\n          * Delete product specification \n          *\n          * @param number specificationID\n          * @param string specificationName\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.delete = function(specificationID, specificationName) {\n\n            __globals.showConfirmation({\n                text                : __ngSupport.getText(\n                    __globals.getJSString('product_specification_delete_confirm_text'), {\n                        '__name__'    : specificationName\n                    }\n                ),\n                confirmButtonText   : __globals.getJSString('delete_action_button_text')\n            }, function() {\n\n                __DataStore.post({\n                    'apiURL'        \t: 'manage.product.specification.delete',\n                    'specificationID'   : specificationID,\n                    'productID'     \t: productID,\n                })\n                .success(function(responseData) {\n                \n                    var message = responseData.data.message;\n\n                    appServices.processResponse(responseData, {\n                            error : function() {\n\n                                __globals.showConfirmation({\n                                    title   : 'Deleted!',\n                                    text    : message,\n                                    type    : 'error'\n                                });\n\n                            }\n                        },\n                        function() {\n\n                            __globals.showConfirmation({\n                                title   : 'Deleted!',\n                                text    : message,\n                                type    : 'success'\n                            });\n                            scope.getSpecificationList();\n                        }\n                    );    \n\n                });\n\n            });\n\n        };\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ProductSpecificationAddController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.addSpecification', [])\n        .controller('ProductSpecificationAddController',   [\n            '$scope',\n            '__Form', \n            'appServices',\n            '$stateParams',\n            '__DataStore',\n            ProductSpecificationAddController \n        ]);\n\n    /**\n      * ProductSpecificationAddController for add product option\n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * @inject $stateParams\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ProductSpecificationAddController($scope, __Form, appServices, $stateParams, __DataStore) {\n\n        var scope       = this;\n\n        scope = __Form.setup(scope, 'form_product_add_specification',\n            'specificationData',\n            { \n                secured : false\n            }\n        );\n\n        scope.specification_label_select_config = __globals.getSelectizeOptions({\n            valueField  : 'id',\n            labelField  : 'label',\n            searchField : [ 'label' ],\n\t\t    create: function(input) {\n\t\t        return {\n\t\t            id: input,\n\t\t            label: input\n\t\t        }\n\t\t    }\n        });\n\n        scope.specification_value_select_config = __globals.getSelectizeOptions({\n            valueField  : 'label',\n            labelField  : 'label',\n            searchField : [ 'label' ],\n            plugins: ['restore_on_backspace', 'remove_button'],\n            maxItems : 1000,\n            delimiter: ',',\n            persist: true,\n            create: function(input) {\n                return {\n                    label : String(input),\n                    label: input\n                }\n            }\n        });\n\n        scope.specificationCollection = $scope.ngDialogData.otherSpecifications;\n        scope.specValues = [];\n\n        //selected spec values\n        scope.getSelectedSpecification = function(specId) {\n            var specificationId = parseInt(specId);\n           \n            if (!_.isNaN(specificationId)) {\n               \n                _.forEach(scope.specificationCollection, function(value, key) {\n               \n                    if (value.id == specId) {\n                        scope.specValues = value.specValues;\n                    }\n                });\n            }\n            \n        };\n     \n        /**\n          * Submit product add specification form action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.submit = function() {\n            \n            __Form.process({\n                'apiURL'        : 'manage.product.specification.add',\n                'productID'     : $stateParams.productID,\n                'presetType'    : 2\n            }, scope)\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                    $scope.closeThisDialog({ 'specification_added' : true });\n                });    \n\n            });\n\n        };\n        \n        /**\n          * Cancel current dialog\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.cancel = function() {\n            $scope.closeThisDialog();\n        };\n        \n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ProductFaqsAddController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.addFaq', [])\n        .controller('ProductFaqsAddController',   [\n            '$scope',\n            '__Form', \n            'appServices',\n            '$stateParams',\n            ProductFaqsAddController \n        ]);\n\n    /**\n      * ProductFaqsAddController for add product option\n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * @inject $stateParams\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ProductFaqsAddController($scope, __Form, appServices, $stateParams) {\n\n        var scope       = this;\n\n        scope = __Form.setup(scope, 'product_faq_add_form', 'addFaqData');\n        \n       \n        /**\n          * Submit product add specification form action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.submit = function() {\n         \n            __Form.process({\n                'apiURL'        : 'manage.product.faq.add',\n                'productId'     : $stateParams.productID\n            }, scope)\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                    $scope.closeThisDialog({ 'faq_added' : true });\n                });    \n\n            });\n\n        };\n\n        /**\n          * Cancel current dialog\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.cancel = function() {\n            $scope.closeThisDialog();\n        };\n        \n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ProductFaqsEditontroller\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.editFaq', [])\n        .controller('ProductFaqsEditontroller',   [\n            '$scope',\n            '__Form', \n            'appServices',\n            '$stateParams',\n            ProductFaqsEditontroller \n        ]);\n\n    /**\n      * ProductFaqsEditontroller for add product option\n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * @inject $stateParams\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ProductFaqsEditontroller($scope, __Form, appServices, $stateParams) {\n\n        var scope       = this,\n            dialogData  = $scope.ngDialogData;\n\n        scope = __Form.setup(scope, 'product_faq_edit_form', 'EditFaqData');\n        \n        scope   = __Form.updateModel(scope, dialogData.faqData);\n\n        /**\n          * Submit product edit faq form action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.submit = function() {\n            __Form.process({\n                'apiURL'        : 'manage.product.faq.update',\n                'productId'     : $stateParams.productID,\n                'faqID'         : scope.EditFaqData._id\n            }, scope)\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                    $scope.closeThisDialog({ 'faq_updated' : true });\n                });    \n\n            });\n\n        };\n\n        /**\n          * Cancel current dialog\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.cancel = function() {\n            $scope.closeThisDialog();\n        };\n        \n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ProductSpecificationEditController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.editSpecification', [])\n        .controller('ProductSpecificationEditController',   [\n            '$scope',\n            '__Form', \n            'appServices',\n            '$stateParams',\n            ProductSpecificationEditController \n        ]);\n\n    /**\n      * ProductSpecificationEditController for edit prdouct option\n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * @inject $stateParams\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ProductSpecificationEditController($scope, __Form, appServices, $stateParams) {\n\n        var scope       = this,\n            dialogData  = $scope.ngDialogData;\n            //specificationCollection\n        \tscope \t= __Form.setup(scope, 'form_specification_edit', 'specificationData');\n\t\t\tscope   = __Form.updateModel(scope, dialogData.specificationValues);\n\t\t\n\t\t\t$stateParams\n\n\t\t\tscope.specification_name_select_config = __globals.getSelectizeOptions({\n            valueField  : 'name',\n            labelField  : 'name',\n            searchField : [ 'name' ],\n\n\t\t    create: function(input) {\n\t\t        return {\n\t\t             _id: input,\n\t\t            name: input\n\t\t        }\n\t\t    }\n        });\n\n        scope.specification_value_select_config = __globals.getSelectizeOptions({\n            valueField  : 'value',\n            labelField  : 'value',\n            searchField : [ 'value' ],\n\n\t\t    create: function(input) {\n\t\t        return {\n\t\t            value: input\n\t\t        }\n\t\t    }\n        });\n      \n        /**\n          * Submit prdouct edit specification form action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.submit = function() {\n\n            __Form.process({\n                'apiURL'        \t   : 'manage.product.specification.update',\n                'productID'\t\t\t   : $stateParams.productID,\n                'specificationID'      : scope.specificationData._id\n            }, scope)\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                    $scope.closeThisDialog({ 'specification_updated' : true });\n                });    \n\n            });\n\n        };\n\n        /**\n          * Cancel current dialog\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.cancel = function() {\n            $scope.closeThisDialog();\n        };\n        \n    };\n\n})();","/*!\n*  Component  : Product\n*  File       : ProductRatingListController.js  \n*  Engine     : Product \n------------------------------------------------------------------- */\n\n(function() {\n'use strict';\n    \n    /*\n     ProductListController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.productRatingList', [])\n        .controller('ProductRatingListController',     [\n            '$scope', \n            '__DataStore', \n            'appServices',\n            '$state',\n            '__Utils',\n            '$rootScope',\n            ProductRatingListController \n         ]);\n\n\n     /**\n      * ProductRatingListController for manage product list\n      *\n      * @inject $scope\n      * @inject __Form\n      * \n      * @return void\n      *-------------------------------------------------------- */\n    function ProductRatingListController($scope, __DataStore, appServices, $state, __Utils, $rootScope) {\n\n        var scope   = this;\n        var dtColumnsData = [\n            {\n                \"name\"      : \"productName\",\n                \"orderable\" : true\n            },\n            {\n                \"name\"      : \"formatRating\",\n                \"orderable\" : true\n            },\n            {\n                \"name\"      : \"createdAt\",\n                \"orderable\" : true,\n                \"template\"  : \"#creationDateColumnTemplate\"\n            }\n        ],\n        scope   = this;\n\n        /**\n        * Request to server\n        *\n        * @return  void\n        *---------------------------------------------------------- */\n\n        scope.productRatingDataTable = __DataStore.dataTable('#lwProductRatingList', {\n            url         : 'manage.product.rating.read.list', \n            dtOptions   : {\n                \"searching\": true\n            },\n            columnsData : dtColumnsData, \n            scope       : $scope\n        });\n\n        /*\n        Reload current datatable\n        ------------------------------------------------------------ */\n        scope.reloadDT = function() {\n            __DataStore.reloadDT(scope.productRatingDataTable);\n        };\n        \n        // when add new record \n        $scope.$on('product_rating_added_or_updated', function (data) {\n            \n            if (data) {\n                scope.reloadDT();\n            }\n\n        });\n            \n    };\n\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t ProductListController\n\t-------------------------------------------------------------------------- */\n\t\n\tangular\n        .module('ManageApp.productList', [])\n        .controller('ProductListController', \t[\n            '$scope', \n            '__DataStore', \n            'appServices',\n            '$state',\n            '__Utils',\n            '$rootScope',\n            ProductListController \n\t \t])\n\t \t.controller('ProductDetailDialogController',   [\n            '$scope',\n            ProductDetailDialogController \n        ]);\n\n\t/**\n\t * CategoryController for admin.\n\t *\n\t * @inject __DataStore\n\t * @inject $scope\n\t * @inject $state\n\t * \n\t * @return void\n\t *-------------------------------------------------------- */\n\n\tfunction ProductListController($scope, __DataStore, appServices, $state, __Utils, $rootScope) {\n\n\t \tvar scope   \t\t\t= this,\n\t\t \tcatID \t\t\t\t= _.isEmpty($state.params.mCategoryID)\n\t\t\t \t\t\t\t \t\t? null \n\t\t\t \t\t\t\t \t\t: $state.params.mCategoryID,\n\t\t \tcurrentStateName \t= $state.current.name;\n\n\t\t// Get current state name\n\t \tscope.currentStateName \t\t\t= currentStateName;\n\n\t \tscope.pageContentLoaded \t\t= false;\n\t \tscope.parentCategoryExist \t\t= false;\n\n\t \t// Get category ID\n\t\tscope.categoryID = catID;\n\n\n\t    var dtProductsColumnsData = [\n                {\n                    \"name\"      : \"thumbnail\",\n                    \"template\"  : \"#productThumbnailColumnTemplate\"\n                },\n                {\n                    \"name\"      : \"name\",\n                    \"orderable\" : true,\n                    \"template\"\t: \"#nameColumnTemplate\"\n                },\n                {\n                    \"name\"      : \"featured\",\n                    \"orderable\" : true,\n                    \"template\"\t: \"#featuredProductColumnTemplate\"\n                },\n                {\n                    \"name\"      : \"out_of_stock\",\n                    \"orderable\" : true,\n                    \"template\"\t: \"#outOfStockColumnTemplate\"\n                },\n                {\n                    \"name\"      : \"status\",\n                    \"orderable\" : true,\n                    \"template\"  : \"#productStatusColumnTemplate\"\n                },\n                {\n                    \"name\"      : \"creation_date\",\n                    \"orderable\" : true,\n                    \"template\"\t: \"#creationDateColumnTemplate\"\n                },\n                {\n                    \"name\"      : \"categories_id\",\n                    \"template\"  : \"#productCategoriesColumnTemplate\"\n                },\n                {\n                    \"name\"      : \"brand\",\n                    \"template\"  : \"#productBrandColumnTemplate\"\n                },\n                {\n                    \"name\"      : null,\n                    \"template\"  : \"#productActionColumnTemplate\"\n                }\n            ],\n\t            // tabs    = {\n\t            //     'manageProducts'    : {\n\t            //            id      : 'productsTabList',\n\t            //            route   : 'products'\n\t            //     }\n\t            // },\n            scope   = this,\n            url;\n         \n        // get category and brand\n        if (!_.isEmpty(catID)) {\n\n            url = {\n                'apiURL'        : 'manage.category.product.list',\n                'categoryID'    : catID\n            };\n\n        }  else if (!_.isEmpty($state.params.brandID)) {\n\t\t\t\t\n            url = {\n              'apiURL'     : 'manage.brand.product.list',\n               'brandId'   : $state.params.brandID\n            };\n\n\n\t    } else {\n\n            url = 'manage.product.list';\n\n        }\n\n        scope.category \t\t\t= {};\n        scope.categoryStatus \t= false;\n        scope.pageStatus \t\t= false;\n        scope.brandStatus\t\t= false;\n\n         // Fired when clicking on tab    \n        // $('#manageProductTab a').click(function (e) {\n\n        //     e.preventDefault();\n\n        //     var $this       = $(this),\n        //         tabName     = $this.attr('aria-controls'),\n        //         selectedTab = tabs[tabName];\n\n        //     // Check if selectedTab exist    \n        //     if (!_.isEmpty(selectedTab)) {\n\n        //         $(this).tab('show')\n        //         //scope.getProducts(selectedTab.id);\n\n        //     }\n            \n        // });\n\n        if ($rootScope.canAccess('manage.product.list') || $rootScope.canAccess('manage.brand.product.list') || $rootScope.canAccess('manage.category.product.list')) {\n\n            var selectedTab = $('.nav li a[href=\"#manageProducts\"]');\n\n            selectedTab.triggerHandler('click', true);\n        }\n        \n\n        /**\n          * Get products  \n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.getProducts  = function() {\n\n        \t// destroy instance of datatable\n\t    \tif (scope.productsListDataTable) {\n\t            scope.productsListDataTable.destroy();\n\t        }\n\n\t        scope.productsListDataTable = __DataStore.dataTable('#productsTabList', {\n\t            url         : url,\n\t            dtOptions   : {\n\t                \"searching\"    : true,\n\t                \"order\"        : [[ 1, \"asc\" ]]\n\t            },\n\t            columnsData : dtProductsColumnsData, \n\t            scope       : $scope\n\n\t        },null, function(responseData) {\n\t        \n\t        \tscope.category \t = responseData._options.category;\n\t        \tscope.parentData = responseData._options.parentData;\n                \n\t        \t//scope.isParentCategory  = _.isNull(scope.category.parent_id) ? false : true;\n\t        \t\n\t        \t// Check if category exist\n\t        \tif (_.isEmpty(scope.category)) {\n\t        \t\tscope.categoryStatus \t= false;\n\t        \t} else {\n\t        \t\tscope.categoryStatus \t= true;\n\t        \t}\n\n\t        \t// Check if Brand Exist\n\t        \tscope.brand = responseData._options.brand;\n\n\t        \tif (_.isEmpty(scope.brand)) {\n\t        \t\tscope.brandStatus = false;\n\t        \t} else {\n\t        \t\tscope.brandStatus = true;\n\t        \t}\n\n\t        \tscope.pageStatus = true;\n\n\t        });\n\t       \n\t    };\n\n\t\t_.defer(function() {\n\n\t\t\tscope.getProducts();\n\n\t\t});\n\n\t    /**\n          * Go to categories URL\n          *\n          * @param $event\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n     //    scope.goToCategories = function ($event) {\n\t    //     $event.preventDefault();\n\t    //     $state.go('categories', {'mCategoryID' : catID});\n\t    // };\n\n\t    /**\n          * Go to products URL \n          *\n          * @param $event\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n     //    scope.goToProducts = function ($event) {\n\t    //     $event.preventDefault();\n\t    //     $state.go('products', {'mCategoryID' : catID});\n\t    // };\n\n\t    /*\n\t     * Reload current datatable\n\t     *\n\t     *------------------------------------------------------------------ */\n        \n        scope.reloadDT = function() {\n            __DataStore.reloadDT(scope.productsListDataTable);\n        };\n\n        /**\n\t      * Get detail dialog.\n\t      *\n\t      * @return void\n\t      *---------------------------------------------------------------- */\n\t    scope.detailDialog = function (productID) {\n\n\t    \t__DataStore.fetch({\n\t        \t'apiURL'\t: 'manage.product.detailSupportData',\n\t        \t'productID'\t: productID\n\t        })\n    \t   .success(function(responseData) {\n\n    \t   \t\tvar requestData = responseData.data;\n\n\t\t    \tappServices.showDialog(requestData,\n\t\t        {\t\n\t\t            templateUrl : __globals.getTemplateURL(\n\t\t                    'product.manage.detail-dialog'\n\t\t                )\n\t\t        },\n\t\t        function(promiseObj) {\n\n\t\t        });\n\t       });\n\t    }\n\n\t    /**\n          * Add new category\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.add   = function(catID) {\n\n        \tthis.catID = catID;\n\n        \t__DataStore.fetch('category.fancytree.support-data')\n\t\t\t\t\t.success(function(responseData) {\n\n          \t\t\tscope.categories = responseData.data.categories;\n          \t\t\n\t          \t\tappServices.showDialog(scope,\n\t                {\n\t                    templateUrl : __globals.getTemplateURL(\n\t                            'category.add-dialog'\n\t                        )\n\t                },\n\t                function(promiseObj) {\n\n\t                    // Check if category updated\n\t                    if (_.has(promiseObj.value, 'category_added') \n\t                        && promiseObj.value.category_added === true) {\n\t                        scope.reloadDT();\n\t                    }\n\n\t                });\n\t    \t});\n            \n\n        };\n\n        /**\n          * Delete product \n          *\n          * @param number productID\n          * @param string productName\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.productDelete = function(productID, productName) {\n\n            __globals.showConfirmation({\n                text                : __ngSupport.getText(\n                    __globals.getJSString('product_delete_confirm_text'), {\n                        '__name__'    : unescape(productName)\n                    }\n                ),\n                confirmButtonText   : __globals.getJSString('delete_action_button_text')\n            }, function() {\n\n                __DataStore.post({\n                    'apiURL'    : 'manage.product.delete',\n                    'productID' : productID,\n                })\n                .success(function(responseData) {\n                \n                    var message = responseData.data.message;\n\n                    appServices.processResponse(responseData, {\n                            error : function() {\n\n                                __globals.showConfirmation({\n                                    title   : __globals.getJSString('confirm_error_title'),\n                                    text    : message,\n                                    type    : 'error'\n                                });\n\n                            }\n                        },\n                        function() {\n\n                            __globals.showConfirmation({\n                                title   : __globals.getJSString('confirm_error_title'),\n                                text    : message,\n                                type    : 'success'\n                            });\n                            scope.reloadDT();   // reload datatable\n\n                        }\n                    );    \n\n                });\n\n            });\n\n        };\n\n    };\n\n    /**\n      * ProductDetailDialogController for manage product list\n      *\n      * @inject $scope\n      * @inject __Form\n      * \n      * @return void\n      *-------------------------------------------------------- */\n    function ProductDetailDialogController($scope) {\n\n        var scope   = this;\n       \n        scope.ngDialogData  \t= $scope.ngDialogData;\n\t    scope.productData \t\t= scope.ngDialogData;\n\t    scope.currencySymbol\t= scope.ngDialogData.currencySymbol;\n\t/**\n\t  * Close dialog\n\t  *\n\t  * @return void\n\t  *---------------------------------------------------------------- */\n\t\tscope.closeDialog = function() {\n\t  \t\t$scope.closeThisDialog();\n\t  \t};\n\t            \n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ProductSeoMetaController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.seoMeta', [])\n        .controller('ProductSeoMetaController',   [\n            '$scope', \n            '__DataStore',\n            'appServices',\n            '$stateParams',\n            '__Form',\n            ProductSeoMetaController \n        ]);\n\n    /**\n      * ProductSeoMetaController for manage product options\n      *\n      * @inject $scope\n      * @inject __DataStore\n      * @inject appServices\n      * @inject $stateParams\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ProductSeoMetaController($scope, __DataStore, appServices, $stateParams, __Form) {\n\n        var scope       = this,\n            productID   = $stateParams.productID;\n\n        scope.initialPageContentLoaded = false;\n\n        scope = __Form.setup(scope, 'form_seo_meta', 'seoMeta');\n\n     \n        /**\n          * Get List of specification\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.fetchSeoMeta = function() {\n            __DataStore.fetch({\n                'apiURL'    : 'manage.product.seo_meta.read',\n                'productID' : productID\n            }).success(function(responseData) {\n                appServices.processResponse(responseData, null, function() {\n                    var requestData = responseData.data;\n\n                    __Form.updateModel(scope, requestData.seo_meta);\n                    \n                    scope.initialPageContentLoaded = true;\n                });\n            });\n        }\n\n        scope.fetchSeoMeta();\n\n        /**\n          * Add Category specification\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.submit = function() {\n          \n           __Form.process({\n                'apiURL': 'manage.product.seo_meta.write',\n                'productID' : productID,\n           }, scope).success(function(responseData) {\n                appServices.processResponse(responseData, null, function() {\n                    scope.fetchSeoMeta();\n                });\n           });\n        }\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManageProductRatingsListController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.ratings', [])\n        .controller('ManageProductRatingsListController',   [\n            '$scope',\n            '__DataStore',\n            'appServices',\n            '$stateParams',\n            ManageProductRatingsListController \n        ]);\n\n    /**\n      * ManageProductRatingsListController handle add product form\n      *\n      * @inject __Form\n      * @inject $state\n      * @inject appServices\n      * @inject FileUploader\n      * @inject __Utils\n      * @inject $stateParams\n      * @inject appNotify\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ManageProductRatingsListController($scope, __DataStore, appServices, $stateParams) {\n\n\t\t\n\t\tvar dtItemCommentColumnsData = [\n            {\n                \"name\"      : \"fname\",\n                \"orderable\" : true,\n                \"template\"  : \"#itemFullNameTemplate\"\n            },\n            {\n                \"name\"      : \"formatRating\",\n                \"orderable\" : false\n            },\n            {\n                \"name\"      : \"review\",\n                \"orderable\" : true\n            },\n            {\n                \"name\"      : \"rated_on\",\n                \"template\"  : \"#itemRatedOnTemplate\"\n            },\n            {\n                \"name\"      : null,\n                \"template\"  : \"#itemRatingsColumnActionTemplate\"\n            }\n        ],\n        scope  = this;\n        scope.contentLoaded = false;\n        scope.ratingListDataTable = __DataStore.dataTable('#lwItemRatingsTable', {\n            url     : {\n                'apiURL'    : 'manage.product.ratings.read.list',\n                'productId' : $stateParams.productID\n            },\n            columnsData     : dtItemCommentColumnsData, \n            dtOptions   : {\n                \"searching\" : true\n            },\n            scope : $scope\n        }, null, function(ratingData) {\n            \n            scope.totalRatingAvg = ratingData._options.totalRatingAvg;\n\n            scope.contentLoaded = true;\n        });\n\n        /*\n         Reload current datatable\n        -------------------------------------------------------------------------- */\n        \n        scope.reloadDT = function() {\n            __DataStore.reloadDT(scope.ratingListDataTable);\n        };\n\n        /**\n          * delete rating request\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.delete = function (ratingId, title) {\n\n            __globals.showConfirmation({\n                html                : __globals.getJSString('delete_rating'),\n                confirmButtonText   : __globals.getJSString('delete_action_button_text')\n            },\n            function() {\n\n                __DataStore.post({\n                    'apiURL'    : 'manage.product.rating.write.delete',\n                    'productId' : $stateParams.productID,\n                    'ratingId'  : ratingId\n                })\n                .success(function(responseData) {\n                \n                    var message = responseData.data.message;\n                   \n                    appServices.processResponse(responseData, {\n                        \n                        error : function(data) {\n                            __globals.showConfirmation({\n                                title   : __globals.getJSString('confirm_error_title'),\n                                text    : message,\n                                type    : 'error'\n                            });\n\n                        }\n\n                    },\n                    function(data) {\n                            \n                        __globals.showConfirmation({\n                            title   : __globals.getJSString('confirm_error_title'),\n                            text    : message,\n                            type    : 'success'\n                        });\n\n                        scope.reloadDT();\n\n                    });    \n\n                });\n\n            });\n        };\n        \n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManageProductFaqsListController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.faqs', [])\n        .controller('ManageProductFaqsListController',   [\n            '$scope',\n            '__DataStore',\n            'appServices',\n            '$stateParams',\n            ManageProductFaqsListController \n        ])\n        .controller('FaqDetailController',   [\n            '$scope',\n            '__DataStore',\n            'appServices',\n            '$stateParams',\n            FaqDetailController \n        ])\n\n    /**\n      * ManageProductFaqsListController handle add product form\n      *\n      * @inject __Form\n      * @inject $state\n      * @inject appServices\n      * @inject FileUploader\n      * @inject __Utils\n      * @inject $stateParams\n      * @inject appNotify\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ManageProductFaqsListController($scope, __DataStore, appServices, $stateParams) {\n\n\t\t\n\t\tvar dtItemFaqColumnsData = [\n            {\n                \"name\"      : \"question\",\n                \"orderable\" : true,\n                \"template\"  : \"#questionColumnActionTemplate\"\n            },\n            {\n                \"name\"      : \"created_at\",\n                \"orderable\" : true\n            },\n            {\n                \"name\"      : null,\n                \"template\"  : \"#itemfaqsColumnActionTemplate\"\n            }\n        ],\n        scope  = this;\n\n        scope.faqListDataTable = __DataStore.dataTable('#lwItemFaqsTable', {\n            url     : {\n                'apiURL'    : 'manage.product.faq.read.list',\n                'productId' : $stateParams.productID\n            },\n            columnsData     : dtItemFaqColumnsData, \n            dtOptions   : {\n                \"searching\" : true\n            },\n            scope : $scope\n        }, null, function(ratingData) {\n            \n        });\n\n        /*\n         Reload current datatable\n        -------------------------------------------------------------------------- */\n        \n        scope.reloadDT = function() {\n            __DataStore.reloadDT(scope.faqListDataTable);\n        };\n\n        //show Detail Dialog\n        scope.showDetailDialog = function(faqId) {\n            __DataStore.fetch({\n                'apiURL' : 'manage.product.faq.detail.supportData',\n                'productId' : $stateParams.productID,\n                'faqID'  : faqId\n            })\n           .success(function(responseData) {\n               var requestData = responseData.data;\n\n                appServices.showDialog({\n                    'faqDetailData' : requestData\n                }, {\n                    templateUrl : __globals.getTemplateURL(\n                            'product.manage.faq.detail-dialog'\n                        )\n                }, function(promiseObj) {\n                    //Check if option updated\n                    if (_.has(promiseObj.value, 'faq_updated') \n                        && promiseObj.value.faq_updated === true) {\n                        scope.reloadDT();\n                    }\n                    //$state.go('specificationsPreset');\n\n                }); \n            });   \n             \n        };\n\n        /**\n          * Add product new Faqs\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.addFaqs   = function() {\n\n            appServices.showDialog({},\n                {\n                    templateUrl : __globals.getTemplateURL(\n                        'product.manage.faq.add-dialog'\n                    )\n                },\n                function(promiseObj) {\n\n                // Check if option added\n                if (_.has(promiseObj.value, 'faq_added') \n                    && promiseObj.value.faq_added === true) {\n                    scope.reloadDT();\n                }\n\n            });\n\n        };\n\n        /**\n          * Edit prdouct existing specification\n          *\n          * @param number specificationID\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.edit   = function(faqID) {\n            \n            __DataStore.fetch({\n                    'apiURL'          : 'manage.product.faq.editData',\n                    'productId'       : $stateParams.productID,\n                    'faqID'           : faqID,\n                })\n                .success(function(responseData) {\n                \n                    appServices.processResponse(responseData, null, function() {\n                    \n                        appServices.showDialog({\n                            'faqData' : responseData.data.faqData\n                        },\n                        {\n                            templateUrl : __globals.getTemplateURL(\n                                    'product.manage.faq.edit-dialog'\n                                )\n                        },\n                        function(promiseObj) {\n\n                            // Check if option updated\n                            if (_.has(promiseObj.value, 'faq_updated') \n                                && promiseObj.value.faq_updated === true) {\n                                scope.reloadDT();\n                            }\n\n                        }\n                    );\n\n                });    \n\n            });\n\n        };\n\n\n        /**\n          * delete rating request\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.delete = function (faqID, title) {\n\n            __globals.showConfirmation({\n                html                : __globals.getJSString('delete_faq'),\n                confirmButtonText   : __globals.getJSString('delete_action_button_text')\n            },\n            function() {\n\n                __DataStore.post({\n                    'apiURL'    : 'manage.product.faq.delete',\n                    'productId' : $stateParams.productID,\n                    'faqID'     : faqID\n                })\n                .success(function(responseData) {\n                \n                    var message = responseData.data.message;\n                   \n                    appServices.processResponse(responseData, {\n                        \n                        error : function(data) {\n                            __globals.showConfirmation({\n                                title   : __globals.getJSString('confirm_error_title'),\n                                text    : message,\n                                type    : 'error'\n                            });\n\n                        }\n\n                    },\n                    function(data) {\n                            \n                        __globals.showConfirmation({\n                            title   : __globals.getJSString('confirm_error_title'),\n                            text    : message,\n                            type    : 'success'\n                        });\n\n                        scope.reloadDT();\n\n                    });    \n\n                });\n\n            });\n        };\n\n    };\n\n    /**\n      * ManageProductFaqsListController handle add product form\n      *\n      * @inject __Form\n      * @inject $state\n      * @inject appServices\n      * @inject FileUploader\n      * @inject __Utils\n      * @inject $stateParams\n      * @inject appNotify\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function FaqDetailController($scope, __DataStore, appServices, $stateParams) {\n        var scope   = this;\n            scope.ngDialogData   = $scope.ngDialogData;\n            scope.faqDetailData     = scope.ngDialogData.faqDetailData.faqDetailData;\n       \n         /**\n         * Close dialog\n         *\n         * @return void\n         *---------------------------------------------------------------- */\n            scope.closeDialog = function() {\n                $scope.closeThisDialog();\n            };\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ProductAwatingUserListController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageProductApp.awatingUser', [])\n        .controller('ProductAwatingUserListController',   [\n            '$scope',\n            '__DataStore',\n            'appServices',\n            '$stateParams',\n            ProductAwatingUserListController \n        ])\n\n    /**\n      * ProductAwatingUserListController handle add product form\n      *\n      * @inject __Form\n      * @inject $state\n      * @inject appServices\n      * @inject FileUploader\n      * @inject __Utils\n      * @inject $stateParams\n      * @inject appNotify\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ProductAwatingUserListController($scope, __DataStore, appServices, $stateParams) {\n\n        var scope = this;\n        scope.isShowDeleteBtn = false;\n        scope.selectedRows = [];\n\n        scope.getAwatingUserList = function() {\n\n            __DataStore.fetch({\n                'apiURL'    : 'manage.product.awating_user.read.list',\n                'productId' : $stateParams.productID\n            }).success(function(responseData) {\n\n                appServices.processResponse(responseData, null, function(reactionCode) {\n                   \n                    var requestData = responseData.data;\n                    scope.awatingUserList = requestData.awatingUserData;\n                    scope.productOutOfStock = requestData.productOutOfStock;\n                });\n\n            });\n        };\n        scope.getAwatingUserList();\n\n        scope.checkIsSelected = function() {\n                \n            scope.anySelected = false;\n\n            _.defer(function() {\n                _.forEach(scope.awatingUserList, function(takValue) {\n\n                    if (takValue.isSelected) {\n                        scope.anySelected = true;\n                    }\n                });\n\n                scope.isShowDeleteBtn = scope.anySelected;\n            })\n          \n        }\n\n        scope.sendNotificationMailDialog = function(type, notifyUserId) {\n           \n            appServices.showDialog({\n                'awatingUserList' : scope.awatingUserList,\n                'mailType' : type,\n                'notifyUserId' : notifyUserId\n            },\n            {\n                templateUrl : __globals.getTemplateURL('product.manage.awating-user.customer-mail-dialog')\n            },\n            function(promiseObj) {\n                        \n            });\n        }\n \n        /*\n         Delete selected User\n        -----------------------------------------------------------------------*/\n        scope.deleteAllAwatingUser = function() {\n\n            var $lwUserDeleteSelectedConfirmTextMsg = $('#lwUserDeleteSelectedConfirmTextMsg');\n\n            __globals.showConfirmation({\n                html              : $lwUserDeleteSelectedConfirmTextMsg.attr('data-message'),\n                confirmButtonText : $lwUserDeleteSelectedConfirmTextMsg.attr('data-delete-button-text')\n            },\n            function() {\n                \n            __DataStore.post({\n                'apiURL'    : 'manage.product.awating_user.delete.multipleUser',\n                'productId' : $stateParams.productID\n            }, scope).success(function(responseData) {\n                \n                var message = responseData.data.message;\n                   \n                    appServices.processResponse(responseData, {\n                        \n                        error : function(data) {\n                            __globals.showConfirmation({\n                                title   : $lwUserDeleteSelectedConfirmTextMsg.attr('data-success-text'),\n                                text    : message,\n                                type    : 'error'\n                            });\n\n                        }\n                    },\n                    function(data) {\n                            \n                        __globals.showConfirmation({\n                            title   : $lwUserDeleteSelectedConfirmTextMsg.attr('data-success-text'),\n                            text    : message,\n                            type    : 'success'\n                        });\n                        scope.getAwatingUserList();\n                        scope.isShowDeleteBtn = false;\n                    }); \n               })       \n            })\n        }\n\n        /**\n          * delete blog request\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.deleteAwatingUser = function (notifyUserId) {\n\n            var $lwUserDeleteConfirmTextMsg = $('#lwUserDeleteConfirmTextMsg');\n\n            __globals.showConfirmation({\n                html              : __globals.getReplacedString(\n                                        $lwUserDeleteConfirmTextMsg),\n                confirmButtonText : $lwUserDeleteConfirmTextMsg.attr('data-delete-button-text')\n            },\n            function() {\n\n                __DataStore.post({\n                    'apiURL'       : 'manage.product.awating_user.delete',\n                    'productId'    : $stateParams.productID,\n                    'notifyUserId' : notifyUserId\n                })\n                .success(function(responseData) {\n                \n                    var message = responseData.data.message;\n                   \n                    appServices.processResponse(responseData, {\n                        \n                        error : function(data) {\n                            __globals.showConfirmation({\n                                title   : $lwUserDeleteConfirmTextMsg.attr('data-success-text'),\n                                text    : message,\n                                type    : 'error'\n                            });\n\n                        }\n\n                    },\n                    function(data) {\n                            \n                        __globals.showConfirmation({\n                            title   : $lwUserDeleteConfirmTextMsg.attr('data-success-text'),\n                            text    : message,\n                            type    : 'success'\n                        });\n                        scope.getAwatingUserList();\n                        scope.isShowDeleteBtn = false;\n                    });    \n\n                });\n\n            });\n        };\n\n        // when add new record \n        $scope.$on('awating_user_added_or_updated', function(data) {\n\n            if (data) {\n                scope.getAwatingUserList();\n            }\n\n        });\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManageOrderDetailsController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.orderDetails', [])\n\n        /**\n          * ManageOrderDetailsController - Handle order details view scope\n          *\n          * @inject __DataStore\n          * @inject $stateParams\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('ManageOrderDetailsController', [\n            '__DataStore',\n            '$stateParams',\n            'appServices',\n            function (__DataStore, $stateParams, appServices) {\n\n               var scope   = this,\n                   orderId = $stateParams.orderId;\n               \n                scope.discountStatus = false;\n\n                scope.initialContendLoaded = false;\n\n                __DataStore.fetch({\n                    'apiURL'    : 'manage.order.details.dialog',\n                    'orderID'   :  orderId\n                })\n                .success(function(responseData) {\n                \n                    appServices.processResponse(responseData, null, function() {\n                        \n                        var orderDetails = responseData.data.orderDetails.data;\n\n                        scope.billingAddress    = orderDetails.address.billingAddress;\n                        scope.shippingAddress   = orderDetails.address.shippingAddress;\n                        scope.sameAddress       = orderDetails.address.sameAddress;\n\n                        scope.user              = orderDetails.user;\n                        scope.order             = orderDetails.order;\n                        scope.orderProducts     = orderDetails.orderProducts;\n                        scope.coupon            = orderDetails.coupon;\n                        scope.taxes             = orderDetails.taxes;\n                        scope.shipping          = orderDetails.shipping;\n\n                    });\n\n                    scope.initialContendLoaded = true;\n\n                });\n\n                /**\n                  * Contact user dialog\n                  * \n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.contactUserDialog = function () {\n\n                    __DataStore.fetch({\n                        'apiURL' : 'manage.order.get.user.details',\n                        'orderID': orderId\n                    })\n                    .success(function(responseData) {\n\n                        scope.userData = responseData.data;\n                        \n                        appServices.processResponse(responseData, null, function () {\n\n                            appServices.showDialog(responseData.data,\n                            {\n                                templateUrl : __globals.getTemplateURL(\n                                    'order.manage.contact-user'\n                                )\n                            },\n                            function(promiseObj) {\n\n                            });\n                        });\n                    });\n                };\n\n            }\n\n        ]);\n\n})();","(function() {\n'use strict';\n    \n    /*\n      ManagePagesApp Module\n      -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManagePagesApp.list', [])\n        .controller('ManagePagesListController',   [\n            '$scope', \n            '__DataStore',\n            'appServices',\n            '$rootScope',\n            '$state',\n            ManagePagesListController \n        ]);\n\n    /**\n      * ManagePagesListController - show all pages list\n      *\n      * @inject $scope\n      * @inject __DataStore\n      * @inject appServices\n      * @inject $state\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ManagePagesListController($scope, __DataStore, appServices, $rootScope, $state) {\n\n\n        var dtPageColumnsData = [\n            {\n                \"name\"      : \"title\",\n                \"orderable\" : true,\n                \"template\"  : \"#pagesColumnTitleTemplate\"\n            },\n            {\n                \"name\"      : \"list_order\",\n                \"orderable\" : true,\n                \"template\"  : \"#pagesColumnListOrderTemplate\"\n            },\n            {\n                \"name\"      : \"type\",\n                \"orderable\" : true,\n                \"template\"  : \"#pagesColumnTypeTemplate\"\n            },\n            {\n                \"name\"      : \"created_at\",\n                \"orderable\" : true,\n                \"template\"  : \"#pagesColumnTimeTemplate\"\n            },\n            {\n                \"name\"      : \"updated_at\",\n                \"orderable\" : true,\n                \"template\"  : \"#pagesColumnUpdatedTimeTemplate\"\n            },\n            {\n                \"name\"      : \"add_to_menu\",\n                \"template\"  : \"#pagesColumnAddToMenuTemplate\"\n            },\n            {\n                \"name\"      : \"status\",\n                \"orderable\" : true,\n                \"template\"  : \"#pagesColumnActiveTemplate\"\n            },\n            {\n                \"name\"      : null,\n                \"template\"  : \"#pagesColumnActionTemplate\"\n            }\n        ],\n\n        scope               = this;\n        scope.parentPageID  = $state.params.parentPageID;\n        scope.parent        = false;\n\n        var reorderOptions = {\n            \"searching\" : true,\n            \"order\"     : [[1, 'asc']],\n            \"paginate\"  :false,\n        };\n\n        if ($rootScope.canAccess('manage.page.update.list.order')) {\n            reorderOptions = {\n                \"searching\" : true,\n                \"order\"     : [[1, 'asc']],\n                \"paginate\"  :false,\n                'rowReorder'  : true,\n                'rowReorder'  : { 'selector': \"td:nth-child(2)\" }\n            };\n        }\n\n\n        scope.pagesListDataTable = __DataStore.dataTable('#lwPagesTable', {\n            url             : {\n              'apiURL'          : 'manage.pages.fetch.datatable.source',\n              'parentPageID?'   :  (scope.parentPageID) \n                                    ? scope.parentPageID \n                                    : null\n            },\n            columnsData     : dtPageColumnsData, \n            dtOptions   : reorderOptions,\n            scope : $scope\n        });\n\n        //Set order list in pages start\n        $('#lwPagesTable').on('row-reorder.dt', function (e, data, edit) {\n            var pageListOrderData = [];\n            \n            _.forEach(data, function(item, key) {\n                \n                pageListOrderData.push({\n                    _id          : _.trim(item.node.id.replace('rowid_', '')),\n                    newPosition  : item.newPosition,\n                    oldPosition  : item.oldPosition\n                })\n              \n            }); \n\n            //set order list of Pages start\n            __DataStore.post('manage.page.update.list.order',{ \n                'pages_list_order' : pageListOrderData\n            }).success(function(responseData) {\n                    \n                appServices.processResponse(\n                    responseData,\n                    {\n                        error : function() {\n                            scope.reloadDT();   // reload datatable\n                        }\n                    },\n                    function() {\n                        scope.reloadDT();\n                    }\n                ); \n\n            });\n        });\n        //Set order list in pages end\n        \n        // Check if parent page id exist\n\t\tif (scope.parentPageID) {\n\n            __DataStore.fetch({\n                'apiURL'    \t: 'manage.pages.get.parent.page',\n                'parentPageID'  : scope.parentPageID\n              })\n                .success(function(responseData) {\n\n                    scope.parentPage    = responseData.data;\n                \n                    scope.parent        = true;\n                    scope.parentPageID  = scope.parentPageID;\n\n                });\n        }\n\n        /*\n         Reload current datatable\n        -------------------------------------------------------------------------- */\n        \n        scope.reloadDT = function() {\n            __DataStore.reloadDT(scope.pagesListDataTable);\n        };\n\n        /**\n          * Delete page \n          *\n          * @param number pageID\n          * @param string pageName\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.delete = function(pageID, pageName) {\n\n            __globals.showConfirmation({\n                text                : __ngSupport.getText(\n                    __globals.getJSString('page_delete_confirm_text'), {\n                        '__name__'     : unescape(pageName)\n                    }\n                ),\n                confirmButtonText   : __globals.getJSString('delete_action_button_text')\n            }, function() {\n\n                __DataStore.post({\n                    'apiURL' : 'manage.pages.delete',\n                    'pageID' : pageID,\n                })\n                .success(function(responseData) {\n                \n                    var message = responseData.data.message;\n                   \n                    appServices.processResponse(responseData, {\n                            error : function(data) {\n                                __globals.showConfirmation({\n                                    title   : __globals.getJSString('confirm_error_title'),\n                                    text    : message,\n                                    type    : 'error'\n                                });\n\n                            }\n                        },\n                        function(data) {\n\n                            __globals.showConfirmation({\n                                title   : __globals.getJSString('confirm_error_title'),\n                                text    : message,\n                                type    : 'success'\n                            });\n                            scope.reloadDT();   // reload datatable\n\n                        }\n                    );    \n\n                });\n\n            });\n\n        };\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n      ManagePagesAddDialogController Module\n      -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManagePagesApp.add.dialog', [])\n        .controller('ManagePagesAddDialogController',   [\n        \t'$scope',\n        \t'$state',\n            'appServices',\n            '__DataStore',\n            ManagePagesAddDialogController \n        ]);\n\n    /**\n      * ManagePagesAddDialogController - for show add dialog form\n      *\n      * @inject $scope\n      * @inject $state\n      * @inject appServices\n      * @inject __DataStore\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ManagePagesAddDialogController($scope, $state, appServices, __DataStore) {\n\n        var scope   = this;\n  \n        __DataStore.fetch('manage.pages.get.page_type')\n            .success(function(responseData) {\n\n            \tscope.page = responseData.data;\n\n            \tappServices.showDialog(scope,\n                {\t\n                    templateUrl : __globals.getTemplateURL('pages.manage.add')\n                },\n                function(promiseObj) {\n                \t\n                    // Check if page added\n                    if (_.has(promiseObj.value, 'page_added') \n                        && promiseObj.value.page_added === true) {\n                    \t$scope.$parent.managePagesListCtrl.reloadDT();\n                    }\n\n                    $state.go('pages');\n\n                });\n     \t});\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n      ManagePagesAddController Module\n      -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManagePagesApp.add', [])\n        .controller('ManagePagesAddController',   [\n        \t'$scope',\n            '__Form', \n            '$state',\n            'appServices',\n            ManagePagesAddController \n        ]);\n\n    /**\n      * ManagePagesAddController - handle add page dialog scope\n      * \n      * @inject $scope\n      * @inject __Form\n      * @inject $state\n      * @inject appServices\n      * @inject __Utils\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ManagePagesAddController($scope,__Form, $state, appServices) {\n\n        var scope   = this;\n\n        scope = __Form.setup(scope, 'manage_pages_add', 'pageData');\n\n        scope.pagesSelectConfig     = __globals.getSelectizeOptions({\n            valueField  : 'value',\n            labelField  : 'text',\n            searchField : ['text']  \n        });\n        \n        // Check if ngDialogData exist\n        if ($scope.ngDialogData) {\n        \t\n        \tvar page = $scope.ngDialogData.page;\n\n        \tscope.pageType  \t= page.type;\n        \tscope.pageLink  \t= page.link;\n        \tscope.pages  \t\t= page.fancytree_data;\n\n        }\n\n        scope.pageData.add_to_menu  = true;\n        scope.pageData.hide_sidebar = false;\n      \tscope.pageData.active       = true;\n      \tscope.pageData.type         = '1';\n      \tscope.pageData.open_as      = '_blank';\n      \tscope.descriptionRequired   = true;\n      \tscope.externalLinkRequired  = false;\n      \tscope.openAsRequired        = false;\n        \n        scope.pageTypeChanged = function() {\n\t    \t\n\t        var pageType = scope.pageData.type;\n\n\t        if (pageType == 1) {\n\t          // page.\n\t          scope.descriptionRequired  = true;\n\t          scope.externalLinkRequired = false;\n\t          scope.openAsRequired       = false;\n\n\t        } else if (pageType == 2) {\n\t          // link.\n\t          scope.descriptionRequired  = false;\n\t          scope.externalLinkRequired = true;\n\t          scope.openAsRequired       = true;\n\n          }\n\n\t    };\n\n        /**\n          * Submit add page form\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.submit = function() {\n        \t \n            __Form.process('manage.pages.add', scope)\n                .success(function(responseData) {\n\n                appServices.processResponse(responseData, null, function() {\n                    $scope.closeThisDialog( { page_added : true } );\n                });    \n\n            });\n\n        };\n\n        /**\n\t  \t  * Close dialog\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\t  \t \n        scope.close = function() {\n  \t  \t\t$scope.closeThisDialog();\n  \t  \t};\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n      ManagePagesEditDialogController Module\n      -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManagePagesApp.edit.dialog', [])\n        .controller('ManagePagesEditDialogController',   [\n        \t'$scope',\n        \t'$state',\n            'appServices',\n            '__DataStore',\n            ManagePagesEditDialogController \n        ]);\n\n    /**\n      * ManagePagesEditDialogController - show edit page dialog\n      *\n      * @inject $scope\n      * @inject $state\n      * @inject appServices\n      * @inject __DataStore\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ManagePagesEditDialogController($scope, $state, appServices, __DataStore) {\n\n        var scope   = this;\n\n        __DataStore.fetch({\n\t        \t'apiURL'  : 'manage.pages.get.details',\n\t        \t'pageID'  : $state.params.pageID\n\t        })\n        \t.success(function(responseData) {\n\n\t\t\tappServices.processResponse(responseData,null, function(reactionCode) {\n\t\t\t\t\n\t\t\t\tappServices.showDialog(responseData.data,\n                {\n                    templateUrl : __globals.getTemplateURL('pages.manage.edit')\n                },\n                function(promiseObj) {\n\n                    // Check if page updated\n                    if (_.has(promiseObj.value, 'page_updated') \n                        && promiseObj.value.page_updated === true) {\n                    \t\n                    \t$scope.$parent.managePagesListCtrl.reloadDT();\n                    }\n                    \n                    $state.go('pages');\n                    \n                });\n\t\t\t});\n            \t\n     \t});\n\n    };\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t  ManagePagesEditController Module\n\t  -------------------------------------------------------------------------- */\n\t\n\tangular\n        .module('ManagePagesApp.edit', [])\n        .controller('ManagePagesEditController', \t[\n            '$scope', \n            '__Form', \n            'appServices',\n            '$state',\n            ManagePagesEditController \n\t \t]);\n\n\t/**\n\t  * ManagePagesEditController - handle scope of edit page dialog\n\t  *\n\t  * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * @inject $state\n\t  * \n\t  * @return void\n\t  *-------------------------------------------------------- */\n\n\tfunction ManagePagesEditController($scope, __Form, appServices, $state) {\n\n\t \tvar scope = this;\n\n\t\tscope.updateURL = {\n\t\t\t'apiURL' :'manage.pages.update',\n\t\t\t'pageID' : $state.params.pageID\n\t\t};\n\n\t\tscope \t= __Form.setup(scope, 'form_page_edit', 'pageData');\n\t\t\n\t\tscope   = __Form.updateModel(scope, $scope.ngDialogData.pageDetails);\n\t\t\n\t\tscope.pagesSelectConfig     = __globals.getSelectizeOptions({\n            valueField  : 'value',\n            labelField  : 'text',\n            searchField : ['text']  \n        });\n\n        scope.ngDialogData = $scope.ngDialogData;\n\n        scope.type = scope.ngDialogData.pageDetails.type;\n\n        if (scope.type != 3) {\n\n            scope.pageType \t= scope.ngDialogData.configItems.pageType;\n            scope.pageLink \t= scope.ngDialogData.configItems.pageLinks;\n           \n    \t\tscope.getPageType = function() {\n\n    \t    \tif (scope.ngDialogData) {\n\n            \t\tscope.pages  = scope.ngDialogData.pageDetails.fancytree_data;\n    \t        \tvar pageType = scope.ngDialogData.pageDetails.type;\n\n    \t\t        if ( pageType == 1 ) {\n    \t\t            // Internal page.\n    \t\t            scope.descriptionRequired  = true;\n    \t\t            scope.externalLinkRequired = false;\n    \t\t            scope.openAsRequired       = false;\n\n    \t\t        } else if ( pageType == 2) {\n    \t\t            // External link.\n    \t\t            scope.descriptionRequired  = false;\n    \t\t            scope.externalLinkRequired = true;\n    \t\t            scope.openAsRequired       = true; \n\n    \t\t        } \n    \t        } \n    \t    };\n\n            scope.getPageType();\n\n        }\n\t    \n\n\t\t/*\n\t \t Submit edit form action\n\t \t-------------------------------------------------------------------------- */\n\t \t\n\t \tscope.update = function() {\n\n\t \t\t// post form data\n\t \t\t__Form.process(scope.updateURL, scope )\n\t \t\t\t\t\t\t.success( function( responseData ) {\n\t\t      \t\t\n\t\t\t\tappServices.processResponse(responseData, null, function(reactionCode) {\n\n\t                $scope.closeThisDialog({ page_updated : true });\n\n\t            });\n\n\t\t    });\n\n\t  \t};\n\n\t  \t/**\n\t  \t  * Close dialog\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\n  \t  \tscope.cancel = function() {\n  \t  \t\t$scope.closeThisDialog();\n  \t  \t};\n\n\t};\n\n})();","(function() {\n'use strict';\n    \n    /*\n     PageDetailsController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManagePagesApp.page.details', [])\n        .controller('PageDetailsController',   [\n        \t'$state',\n            'appServices',\n            '__DataStore',\n            PageDetailsController \n        ]);\n\n    /**\n      * PageDetailsController handle add pages form\n      * @inject $scope\n      * @inject $state\n      * @inject appServices\n      * @inject __DataStore\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function PageDetailsController($state, appServices, __DataStore) {\n    \t\n        var scope   = this;\n        \t\t\n      \t/**\n      \t* get pages info\n      \t* \n      \t* @return void\n      \t*-------------------------------------------------------- */\n\n        scope.getPageInfo = function() {\n\n        \t__DataStore.fetch({\t\n        \t\t\t'apiURL' :'manage.display.page.details',\n        \t\t\t'pageID' : $state.params.pageID\n        \t\t}, scope)\n            \t.success(function(responseData) {\n\n            \tappServices.processResponse(responseData, null, function() {\n\n            \t \tscope.pageDetails = responseData.data;\n            \t});    \n\n     \t\t});\n        };\n        scope.getPageInfo();\n        \n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     EditStoreSettingsController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('manageApp.storeSettingsEdit', [])\n        .controller('EditStoreSettingsController',   [\n        \t'$state',\n            '$scope',\n            EditStoreSettingsController \n        ]);\n\n    /**\n      * EditStoreSettingsController for update store settings\n      *\n      * @inject __Form\n      * @inject appServices\n      * @inject $state\n      * @inject FileUploader\n      * @inject __Utils\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function EditStoreSettingsController($state, $scope) {\n\n    \tvar scope   = this;\n\n        $scope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\n            \n            _.defer(function(){\n                var stateName = toState.name;\n            \n                // if current route is general then open general panel\n                if (stateName == 'store_settings_edit.general') {\n\n                    scope.generalPanelClass = 'panel-collapse collapse in';\n                    scope.generalPanelStatus = true;\n\n                } else {\n\n                    scope.generalPanelClass = 'panel-collapse collapse';\n                }\n\n                // if current route is currency then open general panel\n                if (stateName == 'store_settings_edit.currency') {\n\n                    scope.currencylPanelClass = 'panel-collapse collapse in';\n                    scope.currencyPanelStatus = true;\n\n                } else {\n\n                    scope.currencylPanelClass = 'panel-collapse collapse';\n                }\n\n                // if current route is order then open general panel\n                if (stateName == 'store_settings_edit.order') {\n\n                    scope.orderPanelClass = 'panel-collapse collapse in';\n                    scope.orderPanelStatus = true;\n\n                } else {\n\n                    scope.orderPanelClass = 'panel-collapse collapse';\n                } \n\n                // if current route is products then open general panel\n                if (stateName == 'store_settings_edit.product') {\n\n                    scope.productsPanelClass = 'panel-collapse collapse in';\n                    scope.productPanelStatus = true;\n\n                } else {\n\n                    scope.productsPanelClass = 'panel-collapse collapse';\n                }\n\n                // if current route is placement then open general panel\n                if (stateName == 'store_settings_edit.placement') {\n\n                    scope.placementPanelClass = 'panel-collapse collapse in';\n                    scope.placementPanelStatus = true;\n\n                } else {\n\n                    scope.placementPanelClass = 'panel-collapse collapse';\n                }\n\n                // if current route is contact then open general panel\n                if (stateName == 'store_settings_edit.contact') {\n\n                    scope.contactPanelClass = 'panel-collapse collapse in';\n                    scope.contactPanelStatus = true;\n\n                } else {\n\n                    scope.contactPanelClass = 'panel-collapse collapse';\n                }\n\n                // if current route is terms and condition then open general panel\n                if (stateName == 'store_settings_edit.term_condition') {\n\n                    scope.termsConditionsPanelClass = 'panel-collapse collapse in';\n                    scope.termsConditionPanelStatus = true;\n\n                } else {\n\n                    scope.termsConditionsPanelClass = 'panel-collapse collapse'; \n                } \n\n                // if current route is privacy policy then open general panel\n                if (stateName == 'store_settings_edit.privacy_policy') {\n\n                    scope.privacyPolicyPanelClass = 'panel-collapse collapse in';\n                    scope.privacyPolicyPanelStatus = true;\n\n                } else {\n\n                    scope.privacyPolicyPanelClass = 'panel-collapse collapse';\n                }\n\n                // if current route is social then open general panel\n                if (stateName == 'store_settings_edit.social')  {\n\n                    scope.socialPanelClass = 'panel-collapse collapse in';\n                    scope.socialPanelStatus = true;\n\n                } else {\n\n                    scope.socialPanelClass = 'panel-collapse collapse';\n                }\n\n\t\t\t\t// if current route is social then open general panel\n                if (stateName == 'store_settings_edit.social_authentication_setup')  {\n\n                    scope.socialLoginPanelClass = 'panel-collapse collapse in';\n                    scope.socialLoginPanelStatus = true;\n\n                } else {\n\n                    scope.socialLoginPanelClass = 'panel-collapse collapse';\n                }\n\n                // if current route is social then open language panel\n                if (stateName == 'store_settings_edit.language')  {\n\n                    scope.languagePanelClass = 'panel-collapse collapse in';\n                    scope.languagePanelStatus = true;\n\n                } else {\n\n                    scope.languagePanelClass = 'panel-collapse collapse';\n                }\n\n                // if current route is css style then open item tab\n                if (stateName == 'store_settings_edit.css-style') {\n\n                    scope.cssStylePanelClass    = 'panel-collapse collapse in';\n                    scope.cssStylePanelStatus   = true;\n\n                } else {\n\n                    scope.cssStylePanelClass  = 'panel-collapse collapse';\n                }\n\n            });\n\n        });\n\n    \tscope.getPage = function (pageType) {\n\n    \t\tif (pageType) {\n\n                _.defer(function(){\n\n    \t\t\tswitch(pageType) {\n\n    \t\t\t\tcase 1: // general\n\n    \t\t\t\t\t$state.go('store_settings_edit.general');\n    \t\t\t\t\tscope.generalPanelStatus = true;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 2: // currency\n\n    \t\t\t\t\t$state.go('store_settings_edit.currency');\n    \t\t\t\t\tscope.currencyPanelStatus = true;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 3: // order\n\n    \t\t\t\t\t$state.go('store_settings_edit.order');\n    \t\t\t\t\tscope.orderPanelStatus = true;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 4: // products\n\n    \t\t\t\t\t$state.go('store_settings_edit.product');\n    \t\t\t\t\tscope.productPanelStatus = true;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 5: // Placement\n\n    \t\t\t\t\t$state.go('store_settings_edit.placement');\n    \t\t\t\t\tscope.placementPanelStatus = true;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 6: // Contact\n\n    \t\t\t\t\t$state.go('store_settings_edit.contact');\n    \t\t\t\t\tscope.contactPanelStatus = true;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 7: // Terms and Conditions\n\n    \t\t\t\t\t$state.go('store_settings_edit.term_condition');\n    \t\t\t\t\tscope.termsConditionPanelStatus = true;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 8: // Privacy Policy\n\n    \t\t\t\t\t$state.go('store_settings_edit.privacy_policy');\n    \t\t\t\t\tscope.privacyPolicyPanelStatus = true;\n\n    \t\t\t\t\tbreak;\n\n    \t\t\t\tcase 9: // Social\n\n    \t\t\t\t\t$state.go('store_settings_edit.social');\n    \t\t\t\t\tscope.socialPanelStatus = true;\n\n    \t\t\t\t\tbreak;\n\n                    case 10: // css style\n\n                        $state.go('store_settings_edit.css-style');\n                        scope.cssStylePanelStatus = true;\n\n                        break;\n\n\t\t\t\t\tcase 11: // Social Authentication\n\n                        $state.go('store_settings_edit.social_authentication_setup');\n                        scope.socialLoginPanelStatus = true;\n\n                        break;\n\n    \t\t\t}\n\n            });\n    \t\t}\n    \t}\n\n    \t// if current route is general then open general panel\n        if ($state.current.name == 'store_settings_edit.general') {\n\n        \tscope.generalPanelClass = 'panel-collapse collapse in';\n        \tscope.generalPanelStatus = true;\n\n        } else {\n\n        \tscope.generalPanelClass = 'panel-collapse collapse';\n        }\n\n        // if current route is currency then open general panel\n        if ($state.current.name == 'store_settings_edit.currency') {\n\n        \tscope.currencylPanelClass = 'panel-collapse collapse in';\n        \tscope.currencyPanelStatus = true;\n\n        } else {\n\n        \tscope.currencylPanelClass = 'panel-collapse collapse';\n        }\n\n        // if current route is order then open general panel\n        if ($state.current.name == 'store_settings_edit.order') {\n\n        \tscope.orderPanelClass = 'panel-collapse collapse in';\n        \tscope.orderPanelStatus = true;\n\n        } else {\n\n        \tscope.orderPanelClass = 'panel-collapse collapse';\n        } \n\n        // if current route is products then open general panel\n        if ($state.current.name == 'store_settings_edit.product') {\n\n        \tscope.productsPanelClass = 'panel-collapse collapse in';\n        \tscope.productPanelStatus = true;\n\n        } else {\n\n        \tscope.productsPanelClass = 'panel-collapse collapse';\n        }\n\n        // if current route is placement then open general panel\n        if ($state.current.name == 'store_settings_edit.placement') {\n\n        \tscope.placementPanelClass = 'panel-collapse collapse in';\n        \tscope.placementPanelStatus = true;\n\n        } else {\n\n        \tscope.placementPanelClass = 'panel-collapse collapse';\n        }\n\n        // if current route is contact then open general panel\n        if ($state.current.name == 'store_settings_edit.contact') {\n\n        \tscope.contactPanelClass = 'panel-collapse collapse in';\n        \tscope.contactPanelStatus = true;\n\n        } else {\n\n        \tscope.contactPanelClass = 'panel-collapse collapse';\n        }\n\n        // if current route is terms and condition then open general panel\n        if ($state.current.name == 'store_settings_edit.term_condition') {\n\n        \tscope.termsConditionsPanelClass = 'panel-collapse collapse in';\n        \tscope.termsConditionPanelStatus = true;\n\n        } else {\n\n        \tscope.termsConditionsPanelClass = 'panel-collapse collapse'; \n        } \n\n        // if current route is privacy policy then open general panel\n        if ($state.current.name == 'store_settings_edit.privacy_policy') {\n\n        \tscope.privacyPolicyPanelClass = 'panel-collapse collapse in';\n        \tscope.privacyPolicyPanelStatus = true;\n\n        } else {\n\n        \tscope.privacyPolicyPanelClass = 'panel-collapse collapse';\n        }\n\n        // if current route is social then open general panel\n        if ($state.current.name == 'store_settings_edit.social')  {\n\n        \tscope.socialPanelClass = 'panel-collapse collapse in';\n        \tscope.socialPanelStatus = true;\n\n        } else {\n\n        \tscope.socialPanelClass = 'panel-collapse collapse';\n        }\n\n\t\t if ($state.current.name  == 'store_settings_edit.social_authentication_setup')  {\n\n            scope.socialLoginPanelClass = 'panel-collapse collapse in';\n            scope.socialLoginPanelStatus = true;\n\n        } else {\n\n            scope.socialLoginPanelClass = 'panel-collapse collapse';\n        }\n\n        // if current route is social then open language panel\n        if ($state.current.name == 'store_settings_edit.language')  {\n\n        \tscope.languagePanelClass = 'panel-collapse collapse in';\n        \tscope.languagePanelStatus = true;\n\n        } else {\n\n        \tscope.languagePanelClass = 'panel-collapse collapse';\n        }\n\n        // if current route is css-style then open css-style\n        if ($state.current.name == 'store_settings_edit.css-style') {\n\n            scope.cssStylePanelClass    = 'panel-collapse collapse in';\n            scope.cssStylePanelStatus = true;\n\n        } else {\n\n            scope.cssStylePanelClass  = 'panel-collapse collapse';\n        }\n        \n       \n            \n\n    };\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t  general setting Related Controllers\n\t  ---------------------------------------------------------------------- */\n\t\n\tangular\n        .module('manageApp.GeneralSettings', \t\t[])\n\n        /**\n         * GeneralController for update request\n         *\n         * @inject $scope\n         * @inject __DataStore\n         * @inject appServices\n\t\t *\n         * @return void\n         *-------------------------------------------------------- */\n        .controller('GeneralController', [\n            '$scope',\n            '$state',\n            'appServices',\n         function GeneralController($scope, $state, appServices) {\n\n            var scope  = this;\n \n\t\t\tappServices.showDialog({}, {\n\t\t\t\ttemplateUrl : __globals.getTemplateURL('store.general')\n\t\t\t}, function(promiseObj) {\n\n\t\t\t\t$state.go('store_settings_edit');\n\n\t\t\t});\n        }\n        ])\n\n         /**\n\t      * GeneralSettingsController for update store settings\n\t      *\n\t      * @inject __Form\n\t      * @inject appServices\n\t      * @inject $state\n\t      * @inject FileUploader\n\t      * @inject __Utils\n\t      * \n\t      * @return void\n\t      *-------------------------------------------------------- */\n\n\t\t.controller('GeneralSettingsController', [\n\t\t\t'__Form', \n            '$scope',\n            'appServices',\n            '$state',\n            'FileUploader',\n            '__Utils',\n            'appNotify',\n            '$rootScope',\n            function (__Form, $scope, appServices, $state,\n     \t\t\tFileUploader, __Utils, appNotify, $rootScope) {\n\n                var scope   = this;\n \t\t\t\tscope.pageStatus = false;\n                scope.icoFiles = [];\n\t\t        scope = __Form.setup(scope, 'form_general_settings', 'editData', {\n\t\t        \tsecured : true,\n\t\t        \tmodelUpdateWatcher:false,\n                    unsecuredFields : ['store_name']\n\t\t        });\n\n\t\t        scope.logo_images_select_config = __globals.getSelectizeOptions({\n\t\t            valueField  : 'name',\n\t\t            labelField  : 'name',\n\t\t            render      : {\n\t\t                item: function(item, escape) {\n\t\t                    return  __Utils.template('#imageListItemTemplate',\n\t\t                    item\n\t\t                    );\n\t\t                },\n\t\t                option: function(item, escape) {\n\t\t                    return  __Utils.template('#imageListOptionTemplate',\n\t\t                    item\n\t\t                    );\n\t\t                }\n\t\t            }, \n\t\t            searchField : ['name']\n\t\t        });\n\n\t\t        scope.timezone_select_config = __globals.getSelectizeOptions({\n\t\t            valueField  : 'value',\n\t\t            labelField  : 'text',\n\t\t            searchField : [ 'text' ]  \n\t\t        });\n\t\t        \t\t\t      \n\t\t\t\tvar prev_bg_color  = '';\n\n\t\t        /**\n\t\t          * Fetch support data\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\n\t\t        __Form.fetch({\n\t\t        \t\t'apiURL'   :'store.settings.edit.supportdata',\n\t\t        \t\t'formType' : 1\n\t\t        \t}).success(function(responseData) {\n\t\t            \n\t\t            var requestData = responseData.data;\n\t            \tprev_bg_color = requestData.store_settings.logo_background_color;\n                    scope.themeColors = requestData.store_settings.theme_colors;\n\t\t            scope.homePageList    = requestData.store_settings.home_page_setting;\n\t\t            scope.timezoneData \t  = requestData.store_settings.timezone_list;\n                    scope.languages       = requestData.store_settings.locale_list;\n\n\t\t            appServices.processResponse(responseData, null, function() {\n\n\t\t                if (!_.isEmpty(requestData.store_settings)) {\n\t\t                \t\n\t\t                    __Form.updateModel(scope, requestData.store_settings);\n\t\t                    scope.editData.logo_background_color = prev_bg_color;\n\t\t                }\n\t\t                \n  \t\t\t\t\t\tscope.pageStatus = true;\n                        \n\t\t            });    \n\n\t\t        });\n\n                scope.selectThemeColor = function(colorCode) {\n                    scope.editData.logo_background_color = colorCode;\n                    $('#lwchangeHeaderColor').css('background', \"#\"+colorCode);\n                }\n\n                scope.imageChange = function(type) {\n                    if (scope.editData.invoice_image == scope.editData.logo_image) {\n                        if (type == 1) {\n                            scope.editData.logo_image = '';\n                        } else if (type == 2) {\n                            scope.editData.invoice_image = '';\n                        } \n                    }\n                };\n\n\t\t        /**\n\t\t          * Fetch uploaded temp images media files\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\t\t        scope.images_count = 0;\n                scope.faviconFilesCount = 0;\n\t\t        scope.getTempImagesMedia = function() {\n\n\t\t            __Form.fetch('media.uploaded.images', {fresh : true})\n\t\t                .success(function(responseData) {\n\t\t                    \n\t\t                appServices.processResponse(responseData, null, function() {\n\t\t                  \n\t\t                    scope.logoImages = responseData.data.files;\n\n\t\t                    var selectizeImages = [],\n                            icoSelectizeImages = [];\n\n\t\t                    _.forEach(scope.logoImages, function(value, index) {\n\t\t                    \t\n\t\t                    \tscope.imagesExtention = value.name.split(\".\").pop();\n\t\t\t\t            \t\n\t\t\t\t            \tif (scope.imagesExtention == 'png') {\n\n\t\t\t\t            \t\tselectizeImages.push(value);\n\t\t\t\t            \t} else if (scope.imagesExtention == 'ico') {\n\n                                    icoSelectizeImages.push(value);\n                                }\n\t\t\t\t            });\n\n\t\t\t\t            scope.logo_images = selectizeImages;\n                            scope.icoFiles = icoSelectizeImages;\n  \n\t\t                    if (scope.logo_images.length > 0 || scope.icoFiles.length > 0) {\n\t\t                    \tscope.images_count = scope.logo_images.length;\n                                scope.faviconFilesCount = scope.icoFiles.length;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tscope.images_count = 0;\n                                scope.faviconFilesCount = 0;\n\t\t\t\t\t\t\t};\n                         \n\t\t                });    \n\t\t                \n\t\t            });\n\n\t\t        };\n\n\t\t        scope.getTempImagesMedia();\n\n                $rootScope.$on('lw-upload-image-deleted', function(event, data) {\n                    if (data) {\n                        scope.getTempImagesMedia();\n                    }\n                });\n\t\t        \n\t\t        var uploader = scope.uploader = new FileUploader({\n\t\t            url         : __Utils.apiURL('media.upload.image'),\n\t\t            autoUpload  : true,\n\t\t            headers     : {\n\t\t                'X-XSRF-TOKEN': __Utils.getXSRFToken()\n\t\t            }\n\t\t        });\n\n\t\t        // FILTERS\n\t\t        uploader.filters.push({\n\t\t            name: 'customFilter',\n\t\t            fn: function(item /*{File|FileLikeObject}*/, options) {\n\n\t\t            \tif (item.type == 'image/png' || item.type == 'image/x-icon') {\n\t\t                \treturn this.queue.length < 1000;\n\t\t            \t} \n\t\t            }\n\t\t        });\n\n\n\t\t        scope.currentUploadedFileCount = 0;\n\t\t        scope.loadingStatus     \t   = false;\n\n\t\t\t\t/**\n                * uploading msg\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n                uploader.onAfterAddingAll = function() {\n\n                    scope.loadingStatus = true;\n                    appNotify.info(__globals.getJSString('loading_text'),{sticky : true});\n\n                };\n\n                /**\n                * Uploading on process\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n\n                uploader.onBeforeUploadItem = function(item) {\n                    scope.loadingStatus = true;\n                };\n\n\t\t        /**\n\t\t        * on success counter of uploaded image\n\t\t        *\n\t\t        * @param object fileItem\n\t\t        * @param object response\n\t\t        *\n\t\t        * @return void\n\t\t        *---------------------------------------------------------------- */\n\t\t        \n\t\t        uploader.onSuccessItem = function( fileItem, response ) {\n\n\t\t\t\t\tappServices.processResponse(response, null, function() {\n\t\t            \tscope.currentUploadedFileCount++\n\t\t            }); \n\n\t\t        };\n\n\t\t        /**\n                * on success counter of uploaded image\n                *\n                * @param object fileItem\n                * @param object response\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n                \n                uploader.onSuccessItem = function( fileItem, response ) {\n\n                    appServices.processResponse(response, null, function() {\n\n                        if (fileItem._file.name.split('.').pop() === 'png' || fileItem._file.name.split('.').pop() === 'ico') {\n                            scope.currentUploadedFileCount++\n                        }\n                        \n                    }); \n\n                };\n\n                /**\n                * uploaded all image then call function\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n                \n                uploader.onCompleteAll  = function() {\n\n                    scope.loadingStatus  = false;\n                    \n                    if (scope.currentUploadedFileCount === 0) {\n                        appNotify.warn(__globals.getJSString('logo_empty_file_uploaded_text'),{sticky : false});\n                    }\n\n                    if (scope.currentUploadedFileCount > 0) {\n                        appNotify.success(scope.currentUploadedFileCount+' '+__globals.getJSString('file_uploaded_text'),{sticky : false});\n                    }\n\n                    scope.getTempImagesMedia();\n                    scope.currentUploadedFileCount = 0;\n                };\n\t\t        \n\t\t        /**\n\t\t          * Submit store settings edit form\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\t\t\n\t\t        scope.submit = function() {\n\n\t\t            __Form.process({\t\n\t\t        \t\t'apiURL'   :'store.settings.edit',\n\t\t        \t\t'formType' :1\n\t\t        \t}, scope)\n\t\t                .success(function(responseData) {\n\t\t                \t\n\t\t                appServices.processResponse(responseData, null, \n\t\t                    function() {\n\t\t                    \n                            if (responseData.data.showRealodButton == true) {\n    \t\t                  \t__globals.showConfirmation({\n    \t\t\t\t                title               : responseData.data.message,\n    \t\t\t\t                text                : responseData.data.textMessage,\n    \t\t\t\t                type                : \"success\",\n    \t\t                        showCancelButton    : true,\n    \t\t                        confirmButtonClass  : \"btn-success\",\n    \t\t                        confirmButtonText   : __globals.getJSString('reload_text'),\n    \t\t\t\t\t\t\t\tconfirmButtonColor :  \"#337ab7\",\n    \t\t                        closeOnConfirm      : false\n    \t\t\t\t            }, function() {\n\n    \t\t\t\t               location.reload();\n\n    \t\t\t\t            });\n                            }\n\t\t                });    \n\n\t\t            });\n\n\t\t        };\n\n\t\t        /**\n\t\t          * Show uploaded media files\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\t\t        \n\t\t        scope.showUploadedMediaDialog = function() {\n\t\t            appServices.showDialog({ 'image_files' : _.merge(scope.logo_images, scope.icoFiles) }, {\n\t\t                templateUrl : __globals.getTemplateURL('product.manage.uploaded-media')\n\t\t            }, function(promiseObj) {\n\n\t\t            \tif (_.has(promiseObj.value, 'files')) {\n\t\t                    scope.logo_images = promiseObj.value.files;\n\t\t                    scope.images_count = promiseObj.value.files.length;\n\n\t\t                } else if(promiseObj.value == '$closeButton') {\n\n\t\t                    scope.getTempImagesMedia();\n\t\t                }\n\n\t\t            });\n\t\t        };\n\n\t        /**\n              * Close dialog\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n\n            scope.closeDialog = function() {\n\n            \tif (scope.editData.logo_background_color != prev_bg_color) {\n            \t\t$('#lwchangeHeaderColor').css('background', \"#\"+prev_bg_color);\n            \t}\n\n                $scope.closeThisDialog();\n            };\n\t\t}]);\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t  currency & setting Related Controllers\n\t  ---------------------------------------------------------------------- */\n\t\n\tangular\n        .module('manageApp.CurrencySettings', \t\t[])\n\n        /**\n         * CurrencyController for update request\n         *\n         * @inject $scope\n         * @inject __DataStore\n         * @inject appServices\n\t\t *\n         * @return void\n         *-------------------------------------------------------- */\n        .controller('CurrencyController', [\n            '$scope',\n            '$state',\n            'appServices',\n         function CurrencyController($scope, $state, appServices) {\n\n            var scope  = this;\n \n\t\t\tappServices.showDialog({}, {\n\t\t\t\ttemplateUrl : __globals.getTemplateURL('store.currency')\n\t\t\t}, function(promiseObj) {\n\t\t\t\t$state.go('store_settings_edit');\n\t\t\t});\n        }\n        ])\n\n         /**\n\t      * CurrencySettingsController for update store settings\n\t      *\n\t      * @inject __Form\n\t      * @inject appServices\n\t      * @inject $state\n\t      * @inject FileUploader\n\t      * @inject __Utils\n\t      * \n\t      * @return void\n\t      *-------------------------------------------------------- */\n\n\t\t.controller('CurrencySettingsController', [\n\t\t\t'__Form', \n            'appServices',\n            '$scope',\n            function (__Form, appServices, $scope) {\n\n                var scope = this;\n\n            scope.isZeroDecimalCurrency = false;\n            scope.currencyExist = false;\n            \n            //manage currency tab on click\n            scope.manageCurrecnyTab = function(event) {\n                event.preventDefault();\n            };\n            \n            /**\n              * Generate key value\n              * \n              * @param bool responseKeyValue\n              * \n              * @return void\n              *---------------------------------------------------------------- */\n            \n            scope.generateCurrenciesArray = function(currencies, responseKeyValue) {\n                \n                if (!responseKeyValue) {\n                    return currencies;\n                }\n\n                var currenciesArray = [];\n\n                _.forEach(currencies, function(value, key) {\n                    \n                    currenciesArray.push({\n                        'currency_code'     : key,\n                        'currency_name'     : value.name   \n                    });\n\n                });\n\n                currenciesArray.push({\n                    'currency_code'  : 'other',\n                    'currency_name'  :  __globals.getJSString('other')\n                });\n\n                return currenciesArray;\n             \n            };\n\n            /**\n              *  Check the the currency match with zero decimal\n              *\n              * @param array zeroDecimalCurrecies\n              * @param string selectedCurrencyValue \n              * \n              * @return void\n              *---------------------------------------------------------------- */\n            \n            scope.checkIsZeroDecimalCurrency = function(zeroDecimalCurrecies, selectedCurrencyValue) {\n      \n                var isMatch = _.filter(zeroDecimalCurrecies, function(value, key) {\n                    \n                        return  (key === selectedCurrencyValue);\n                    });\n\n                scope.isZeroDecimalCurrency = Boolean(isMatch.length);\n                \n            };\n\n            /**\n              * Check if current currency is Paypal supported or not\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n            scope.checkIsPaypalSupported = function (currencyValue) {\n\n                var isPaypalSupported = _.filter(scope.options, function(value, key) {\n                    \n                    return  (key == currencyValue);\n                });\n\n                scope.isPaypalSupport = Boolean(isPaypalSupported.length);\n            };\n\n            /**\n              * format currency symbol and currency value\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n            scope.formatCurrency = function (currencySymbol, currency) {\n\n                _.defer(function() {\n\n                    var $lwCurrencyFormat = $('#lwCurrencyFormat');\n\n                    var string = $lwCurrencyFormat.attr('data-format');\n\n                    scope.currency_format_preview  =  string.split('{__currencySymbol__}').join(currencySymbol)\n                                                            .split('{__amount__}').join(100)\n                                                            .split('{__currencyCode__}').join(currency);\n                });\n            };\n\n            scope.pageStatus = false;\n\n            scope  = __Form.setup(scope, 'edit_currency_configuration', 'editData', {\n                secured : true,\n                unsecuredFields : [\n                    'currency_symbol'\n                ]\n            });\n\n            scope.currencies_select_config = __globals.getSelectizeOptions({\n                valueField  : 'currency_code',\n                labelField  : 'currency_name',\n                searchField : [ 'currency_code', 'currency_name' ]  \n            });\n\n            scope.multi_currencies_select_config = __globals.getSelectizeOptions({\n                valueField  : 'currency_code',\n                labelField  : 'currency_name',\n                searchField : [ 'currency_code', 'currency_name' ],\n                plugins     : ['remove_button'],\n                maxItems    : 1000,\n                delimiter   : ','\n            });\n\n            scope.is_support_paypal = true;\n\n\n            __Form.fetch({\n                    'apiURL'   :'store.settings.edit.supportdata',\n                    'formType' : 2\n                }).success(function(responseData) {\n                \n                appServices.processResponse(responseData, null, function() {\n\n                        var requestData     = responseData.data,\n                            currenciesData  = requestData.store_settings.currencies;\n\n                        scope.options     = currenciesData.options;\n                        scope.currencies  = currenciesData.details;\n                        scope.zeroDecimal = currenciesData.zero_decimal;\n                        scope.autoRefreshList  = requestData.store_settings.autoRefreshList;\n                        scope.paymentOptionList = requestData.paymentOptionList;\n\n                        _.defer(function() {\n                            scope.currencies_options  \n                                = scope.generateCurrenciesArray(currenciesData.details, true);\n\n                            scope.multi_curency_list = scope.prepareMultiCurrencies(scope.currencies_options);\n\n                            scope.currentSelectCurrency(scope.editData.currency, scope.editData.paymentOptionList, scope.currencies_options);\n                        });\n                                \n                        if (!_.isEmpty(requestData.store_settings)) {\n\n                            scope.checkIsZeroDecimalCurrency(scope.zeroDecimal, requestData.store_settings.currency_value);\n\n                            scope.checkIsPaypalSupported(requestData.store_settings.currency);\n\n                            scope.default_currency_format = requestData.store_settings.default_currency_format;\n\n                            scope = __Form.updateModel(scope, requestData.store_settings);\n\n                            _.forEach(scope.currencies, function(currencyObj, key) {\n\n                                if (key == scope.editData.currency_value) {\n                                    scope.currencySymbol = currencyObj.symbol;\n                                }\n                            });\n\n                            if (requestData.store_settings.currency == 'other') {\n                                scope.currencySymbol = requestData.store_settings.currency_symbol;\n                            }\n                            \n                            scope.formatCurrency(scope.currencySymbol, scope.editData.currency_value);\n\n                        }\n\n                        scope.pageStatus = true;\n\n                        /*_.defer(function() {\n                            scope.currencies_options  \n                                = scope.generateCurrenciesArray(currenciesData.details, true);\n                        });*/                    \n                });    \n\n            });\n\n            /*\n             selected Currency For show alert message\n            -------------------------------------------------------------------------- */        \n            scope.currentSelectCurrency = function(selectCurrency, paymentOption, currenyValues) {\n                scope.currencyExist = false;   \n                scope.currenyLabel = '';\n\n                _.map(currenyValues, function(value, key) { \n                    if (selectCurrency == value.currency_code) {\n                        scope.currenyLabel = value.currency_name;\n                    }\n                });\n\n                if (_.includes(paymentOption, '16') || _.includes(paymentOption, '18') || _.includes(paymentOption, '11')) {\n                    if (selectCurrency != 'INR') {\n                        scope.currencyExist = true;\n                    }\n                }\n\n                if(_.includes(paymentOption, '1') || _.includes(paymentOption, '14') || _.includes(paymentOption, '20')) {\n                    if (selectCurrency == 'INR') {\n                        scope.currencyExist = true;\n                    }\n                }  \n\n                if(selectCurrency != 'TRY' && _.includes(paymentOption, '14')) {\n                    scope.currencyExist = true;\n                }\n\n                if (selectCurrency != 'NGN' && _.includes(paymentOption, '20')) {\n                    scope.currencyExist = true;\n                }\n\n            }\n\n            /*\n             information\n            -------------------------------------------------------------------------- */\n            scope.prepareMultiCurrencies = function(currenciesOptions) {\n                var multiCurrencies = [];// _.dropRight(currenciesOptions);\n                \n                _.forEach(currenciesOptions, function(item) {\n                    if (item.currency_code != 'TWD' && item.currency_code != 'other') {\n                        multiCurrencies.push(item);\n                    }\n                });\n\n                return multiCurrencies;\n            }\n\n            \n            /**\n              * Use default format for currency\n              *\n              * @param string defaultCurrencyFormat\n              * \n              * @return string\n              *---------------------------------------------------------------- */\n            scope.useDefaultFormat = function(defaultCurrencyFormat, currency_symbol, currency_value) {\n\n                scope.editData.currency_format = defaultCurrencyFormat;\n\n                var lwSymbol = $('#lwSymbol'),\n                    currency_symbol = lwSymbol.html(lwSymbol.attr('data')).text();\n                    \n                var string = scope.editData.currency_format;\n                \n                scope.currency_format_preview  =  string.split('{__currencySymbol__}').join(currency_symbol)\n                                                    .split('{__amount__}').join(100)\n                                                    .split('{__currencyCode__}').join(currency_value);\n            };\n\n\n            /**\n              * Use default format for currency\n              *\n              * @param string defaultCurrencyFormat\n              * \n              * @return string\n              *---------------------------------------------------------------- */\n            scope.updateCurrencyPreview = function(currency_symbol, currency_value, isSymbol) {\n                \n                if (isSymbol == true) {\n                    var lwSymbol = $('#lwSymbol'),\n                    currency_symbol = lwSymbol.html(lwSymbol.attr('data')).text();\n                }\n\n                if (_.isUndefined(currency_symbol)) {\n                    currency_symbol = '';\n                }\n\n                if (_.isUndefined(currency_value)) {\n                    currency_value = '';\n                }\n\n                var $lwCurrencyFormat = $('#lwCurrencyFormat');\n\n                var string = $lwCurrencyFormat.attr('data-format');\n\n                scope.currency_format_preview  =  string.split('{__currencySymbol__}').join(currency_symbol)\n                                                        .split('{__amount__}').join(100)\n                                                        .split('{__currencyCode__}').join(currency_value);\n                \n            };\n\n            /**\n              * Submit currency Data\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n            \n            scope.submit = function() {\n\n                __Form.process({\n                    'apiURL'   :'store.settings.edit',\n                    'formType' : 2\n                }, scope)\n                    .success(function(responseData) {\n\n                    appServices.processResponse(responseData, null, function() {\n                        \n                        if (responseData.data.showRealodButton == true) {\n                            __globals.showConfirmation({\n                                title               : responseData.data.message,\n                                text                : responseData.data.textMessage,\n                                type                : \"success\",\n                                showCancelButton    : true,\n                                confirmButtonClass  : \"btn-success\",\n                                confirmButtonText   : __globals.getJSString('reload_text'),\n                                confirmButtonColor :  \"#337ab7\"\n                            }, function() {\n\n                               location.reload();\n\n                            });\n                        }\n                    });    \n\n                });\n            };    \n\n\n            /**\n              * currency change\n              *\n              * @param selectedCurrency\n              * @return void\n              *---------------------------------------------------------------- */\n            scope.currencyChange = function(selectedCurrency, paymentOption, currencyOptionList) {\n\n              scope.currentSelectCurrency(selectedCurrency, paymentOption,currencyOptionList);\n\n                scope.checkIsZeroDecimalCurrency(scope.zeroDecimal, selectedCurrency);\n\n                if (!_.isEmpty(selectedCurrency) && selectedCurrency != 'other') {\n\n                    _.forEach(scope.currencies, function(currencyObj, key) {\n                        \n                        if (key == selectedCurrency) {\n                            scope.editData.currency_value   = selectedCurrency;\n                            scope.editData.currency_symbol  = currencyObj.ASCII;\n                            scope.currencySymbol            = currencyObj.symbol;\n                        }\n\n                    });\n\n                    scope.is_support_paypal = true;\n\n                } else {\n\n                    scope.editData.currency_value   = '';\n                    scope.editData.currency_symbol  = '';\n\n                }\n\n                scope.updateCurrencyPreview(scope.currencySymbol, scope.editData.currency_value);\n\n                scope.checkIsPaypalSupported(scope.editData.currency_value);\n\n            };\n\n            /**\n              * currency value change\n              *\n              * @param currencyValue\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n            scope.currencyValueChange = function(currencyValue) {\n                \n                scope.checkIsZeroDecimalCurrency(scope.zeroDecimal, currencyValue);\n\n                if (!_.isEmpty(currencyValue) && currencyValue != 'other') {\n\n                    var currency = {};\n                    _.forEach(scope.currencies, function(currencyObj, key) {\n\n                        if (key == currencyValue) {\n                            currency = currencyObj;\n                        }\n\n                    });\n\n                    if (_.isEmpty(currency)) {\n                        //scope.is_support_paypal = false;\n                        scope.editData.currency  = 'other';\n                    } else {\n                        //scope.is_support_paypal     = true;\n                        scope.editData.currency     = currencyValue;\n                        scope.editData.currency_symbol  = currency.ASCII;\n                        scope.currencySymbol           = currency.symbol;\n                    }\n\n                } else if (!_.isEmpty(currencyValue)) {\n\n                    //scope.is_support_paypal     = false;\n                    scope.editData.currency     = 'other';\n\n                } else {\n\n                    //scope.is_support_paypal  = true;\n                    scope.editData.currency  = '';\n\n                }\n\n                scope.checkIsPaypalSupported(currencyValue);\n\n                if (_.isUndefined(scope.editData.currency_value)) {\n                    scope.currencySymbol = '';\n                }\n\n                scope.updateCurrencyPreview(scope.currencySymbol, scope.editData.currency_value);\n            };\n\n            /**\n              * Close dialog\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n            scope.closeDialog = function() {\n                $scope.closeThisDialog();\n            }\n\n\t\t}]);\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t  order setting Related Controllers\n\t  ---------------------------------------------------------------------- */\n\t\n\tangular\n        .module('manageApp.OrderSettings',[])\n\n        /**\n         * OrderController for update request\n         *\n         * @inject $scope\n         * @inject __DataStore\n         * @inject appServices\n\t\t *\n         * @return void\n         *-------------------------------------------------------- */\n        .controller('OrderController', [\n            '$scope',\n            '$state',\n            'appServices',\n         function OrderController($scope, $state, appServices) {\n\n            var scope  = this;\n \n\t\t\tappServices.showDialog({}, {\n\t\t\t\ttemplateUrl : __globals.getTemplateURL('store.order')\n\t\t\t}, function(promiseObj) {\n\t\t\t\t$state.go('store_settings_edit');\n\t\t\t});\n        }\n        ])\n\n         /**\n\t      * OrderSettingsController for update store settings\n\t      *\n\t      * @inject __Form\n\t      * @inject appServices\n\t      * @inject $state\n\t      * @inject FileUploader\n\t      * @inject __Utils\n\t      * \n\t      * @return void\n\t      *-------------------------------------------------------- */\n\n\t\t.controller('OrderSettingsController', [\n\t\t\t'__Form', \n            'appServices',\n            '$scope',\n            '$state',\n            function (__Form, appServices, $scope, $state) {\n\n                var scope   = this;\n\n                scope = __Form.setup(scope, 'form_order_and_currency_settings', 'editData', {\n\t\t            secured : true,\n\t\t        \tmodelUpdateWatcher:false,\n\t\t            unsecuredFields : [\n\t\t\t\t\t\t               'payment_check_text', \n\t\t\t\t\t\t               'payment_bank_text', \n\t\t\t\t\t\t               'payment_cod_text',\n\t\t\t\t\t\t               'payment_other_text'\n\t\t\t\t\t\t            ],\n\t\t        });\n\n\t\t        scope.pageStatus = false;\n\n                scope.cancellation_statuses_config = __globals.getSelectizeOptions({\n                    maxItems        : 1000,\n                    searchField     : ['name', 'product_id'],\n                    plugins         : ['remove_button']\n                });\n\n\t\t        /**\n\t\t          * Fetch support data\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\n\t\t        __Form.fetch({\t\n\t\t        \t\t'apiURL'   :'store.settings.edit.supportdata',\n\t\t        \t\t'formType' : 3\n\t\t        \t}).success(function(responseData) {\n\t\t            \n\t\t            var requestData    = responseData.data;\n\t\t          \n\t\t            appServices.processResponse(responseData, null, function() {\n\t\t            \n\t\t\t\t\t\tif (!_.isEmpty(requestData.store_settings)) {\n\t\t                    __Form.updateModel(scope, requestData.store_settings);\n\t\t                }\n                       \n                        scope.order_statuses = __globals.generateKeyValueItems(requestData.store_settings.order_statuses);\n\n\t\t                scope.pageStatus = true;\n\n\t\t            });    \n\n\t\t        });\n\n                /**\n                  * Add stripe key \n                  *---------------------------------------------------------------- */\n                scope.addStripeKeys = function(stripeKeysFor) {\n\n                    if (stripeKeysFor == 1) {\n                        scope.editData.isLiveStripeKeysExist = false;\n                    } else {\n                        scope.editData.isTestingStripeKeysExist = false;\n                    }\n                };\n\n                 /**\n                  * Add Razorpay key \n                  *---------------------------------------------------------------- */\n                scope.addRazorpayKeys = function(razorPayKeysFor) {\n\n                    if (razorPayKeysFor == 1) {\n                        scope.editData.isLiveRazorPayKeysExist = false;\n                    } else {\n                        scope.editData.isTestingRazorPayKeysExist = false;\n                    }\n                };\n\n                /**\n                  * Add stripe key \n                  *---------------------------------------------------------------- */\n                scope.addIyzipayKeys = function(stripeKeysFor) {\n\n                    if (stripeKeysFor == 1) {\n                        scope.editData.isLiveIyzipayKeyExist = false;\n                    } else {\n                        scope.editData.isTestingIyzipayKeyExist = false;\n                    }\n                };\n\t\t        \n\t\t        /**\n\t\t          * Submit store settings edit form\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\t\t        \n\t\t        scope.submit = function() {\n\n\t\t            __Form.process({\t\n\t\t        \t\t'apiURL'   :'store.settings.edit',\n\t\t        \t\t'formType' :3\n\t\t        \t}, scope)\n\t\t                .success(function(responseData) {\n\t\t                \t\n\t\t                appServices.processResponse(responseData, null, \n\t\t                    function() {\n\t\t                    \t\n\t\t\t\t\t\t\tscope.editData.logo_image = '';\n\t\t\t\t\t\t\t\n                            if (responseData.data.showRealodButton == true) {\n    \t\t                    __globals.showConfirmation({\n    \t\t\t\t                title               : responseData.data.message,\n    \t\t\t\t                text                : responseData.data.textMessage,\n    \t\t\t\t                type                : \"success\",\n    \t\t                        showCancelButton    : true,\n    \t\t                        confirmButtonClass  : \"btn-success\",\n    \t\t                        confirmButtonText   : __globals.getJSString('reload_text'),\n    \t\t\t\t\t\t\t\tconfirmButtonColor :  \"#337ab7\",\n    \t\t                        closeOnConfirm      : false\n    \t\t\t\t            }, function() {\n\n    \t\t\t\t               location.reload();\n\n    \t\t\t\t            });\n                            }\n                            \n                            if ($state.current.name == 'taxes') {\n                                $scope.closeThisDialog();\n                            }\n\n\t\t                });    \n\n\t\t            });\n\n\t\t        };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n\t\t}]);\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t  order setting Related Controllers\n\t  ---------------------------------------------------------------------- */\n\t\n\tangular\n        .module('manageApp.PaymentSettings',[])\n\n        /**\n         * PaymentController for update request\n         *\n         * @inject $scope\n         * @inject __DataStore\n         * @inject appServices\n\t\t *\n         * @return void\n         *-------------------------------------------------------- */\n        .controller('PaymentController', [\n            '$scope',\n            '$state',\n            'appServices',\n         function PaymentController($scope, $state, appServices) {\n\n            var scope  = this;\n \n\t\t\tappServices.showDialog({}, {\n\t\t\t\ttemplateUrl : __globals.getTemplateURL('store.payment')\n\t\t\t}, function(promiseObj) {\n\t\t\t\t$state.go('store_settings_edit');\n\t\t\t});\n        }\n        ])\n\n         /**\n\t      * PaymentSettingsController for update store settings\n\t      *\n\t      * @inject __Form\n\t      * @inject appServices\n\t      * @inject $state\n\t      * @inject FileUploader\n\t      * @inject __Utils\n\t      * \n\t      * @return void\n\t      *-------------------------------------------------------- */\n\n\t\t.controller('PaymentSettingsController', [\n\t\t\t'__Form', \n            'appServices',\n            '$scope',\n            '$state',\n            function (__Form, appServices, $scope, $state) {\n\n                var scope   = this;\n\n                scope = __Form.setup(scope, 'form_payment_and_currency_settings', 'editData', {\n\t\t            secured : true,\n\t\t        \tmodelUpdateWatcher:false,\n\t\t            unsecuredFields : [\n\t\t\t\t\t\t               'payment_check_text', \n\t\t\t\t\t\t               'payment_bank_text', \n\t\t\t\t\t\t               'payment_cod_text',\n\t\t\t\t\t\t               'payment_other_text'\n\t\t\t\t\t\t            ],\n\t\t        });\n\n\t\t        scope.pageStatus = false;\n                scope.enable_paypal = false;\n                scope.enable_stripe = false;\n                scope.enable_paytm = false;\n                scope.enable_razorpay = false;\n                scope.enable_paystack = false;\n                scope.enable_iyzico = false;\n                scope.enable_instamojo = false;\n                scope.enable_cod = false;\n                scope.enable_check = false;\n                scope.enable_bank = false;\n                scope.enable_other = false;\n\n                scope.paymentOptionConfig = __globals.getSelectizeOptions({\n                    maxItems        : 1000,\n                    searchField     : ['name'],\n                    plugins         : ['remove_button'],\n                });\n\n                /**\n                  * Show Payment Tab\n                  *---------------------------------------------------------------- */\n                scope.showPaymentPageTab = function(event) {\n                    event.preventDefault();\n                }\n\n\t\t        /**\n\t\t          * Fetch support data\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\n\t\t        __Form.fetch({\t\n\t\t        \t\t'apiURL'   :'store.settings.edit.supportdata',\n\t\t        \t\t'formType' : 13\n\t\t        \t}).success(function(responseData) {\n\t\t            \n\t\t            var requestData    = responseData.data;\n\t\t           \n\t\t            appServices.processResponse(responseData, null, function() {\n\t\t            \n\t\t\t\t\t\tif (!_.isEmpty(requestData.store_settings)) {\n\t\t                    __Form.updateModel(scope, requestData.store_settings);\n\t\t                }\n                        __pr(requestData);\n                        var selectedPaymentOptions = scope.editData.select_payment_option;\n                        scope.enable_paypal = _.includes(selectedPaymentOptions, 1);\n                        scope.enable_stripe = _.includes(selectedPaymentOptions, 6);\n                        scope.enable_paytm = _.includes(selectedPaymentOptions, 16);\n                        scope.enable_razorpay = _.includes(selectedPaymentOptions, 11);\n                        scope.enable_paystack = _.includes(selectedPaymentOptions, 20);\n                        scope.enable_iyzico = _.includes(selectedPaymentOptions, 14);\n                        scope.enable_instamojo = _.includes(selectedPaymentOptions, 18);\n                        scope.enable_cod = _.includes(selectedPaymentOptions, 4);\n                        scope.enable_check = _.includes(selectedPaymentOptions, 2);\n                        scope.enable_bank = _.includes(selectedPaymentOptions, 3);\n                        scope.enable_other = _.includes(selectedPaymentOptions, 5);\n\n                        scope.paymentOptions = __globals.generateKeyValueItems(requestData.store_settings.paymentOptions);\n                        \n\t\t                scope.pageStatus = true;\n\n\t\t            });    \n\n\t\t        });\n\n                /**\n                  * Change Payment Setting\n                  *---------------------------------------------------------------- */\n                scope.changePaymentSetting = function(value, method) {\n                    if (_.isEmpty(scope.editData.select_payment_option)) {\n                        scope.editData.select_payment_option = [];\n                    }\n\n                    if (value) {\n                        if (!_.includes(scope.editData.select_payment_option, method)) {\n                            scope.editData.select_payment_option.push(method);\n                        }\n                    } else if (!value) {\n                        if (_.includes(scope.editData.select_payment_option, method)) {\n                            _.remove(scope.editData.select_payment_option, function(item) {\n                                return item == method;\n                            });\n                        }\n                    }\n                }\n                \n                /**\n                  * Select Payment Option\n                  *---------------------------------------------------------------- */\n                scope.selectPaymentOptions = function(paymentOption) {   \n                    scope.optionId = paymentOption;\n                }\n\n                /**\n                  * Add stripe key \n                  *---------------------------------------------------------------- */\n                scope.addStripeKeys = function(stripeKeysFor) {\n\n                    if (stripeKeysFor == 1) {\n                        scope.editData.isLiveStripeKeysExist = false;\n                    } else {\n                        scope.editData.isTestingStripeKeysExist = false;\n                    }\n                };\n\n                 /**\n                  * Add Razorpay key \n                  *---------------------------------------------------------------- */\n                scope.addRazorpayKeys = function(razorPayKeysFor) {\n\n                    if (razorPayKeysFor == 1) {\n                        scope.editData.isLiveRazorPayKeysExist = false;\n                    } else {\n                        scope.editData.isTestingRazorPayKeysExist = false;\n                    }\n                };\n\n                /**\n                  * Add Iyzipay Key \n                  *---------------------------------------------------------------- */\n                scope.addIyzipayKeys = function(iyzipayKeysFor) {\n\n                    if (iyzipayKeysFor == 1) {\n                        scope.editData.isLiveIyzipayKeysExist = false;\n                    } else {\n                        scope.editData.isTestingIyzipayKeysExist = false;\n                    }\n                };\n\n                /**\n                  * Add Paytm Key \n                  *---------------------------------------------------------------- */\n                scope.addPaytmKeys = function(paytmKeysFor) {\n\n                    if (paytmKeysFor == 1) {\n                        scope.editData.isLivePaytmKeysExist = false;\n                    } else {\n                        scope.editData.isTestingPaytmKeysExist = false;\n                    }\n                };\n\n                /**\n                  * Add Instamojo Key \n                  *---------------------------------------------------------------- */\n                scope.addInstamojoKeys = function(instamojoKeysFor) {\n\n                    if (instamojoKeysFor == 1) {\n                        scope.editData.isLiveInstamojoKeysExist = false;\n                    } else {\n                        scope.editData.isTestingInstamojoKeysExist = false;\n                    }\n                };\n\n                /**\n                  * Add Paystack Key \n                  *---------------------------------------------------------------- */\n                scope.addPayStackKeys = function(payStackKeysFor) {\n\n                    if (payStackKeysFor == 1) {\n                        scope.editData.isLivePayStackKeysExist = false;\n                    } else {\n                        scope.editData.isTestingPayStackKeysExist = false;\n                    }\n                };\n\n                \n                /**\n                  * Add Instamojo Key \n                  *---------------------------------------------------------------- */\n                 scope.addPaypalKeys = function(isLivePaypalKeysExist) {\n\n                    if (isLivePaypalKeysExist == 1) {\n                        scope.editData.isLivePaypalKeysExist = false;\n                    } else {\n                        scope.editData.isTestingPaypalKeysExist = false;\n                    }\n                };\n\t\t        \n\t\t        /**\n\t\t          * Submit store settings edit form\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\t\t        \n\t\t        scope.submit = function() {\n\n\t\t            __Form.process({\t\n\t\t        \t\t'apiURL'   :'store.settings.edit',\n\t\t        \t\t'formType' :13\n\t\t        \t}, scope)\n\t\t                .success(function(responseData) {\n\t\t                \t\n\t\t                appServices.processResponse(responseData, null, \n\t\t                    function() {\n\t\t                    \t\n\t\t\t\t\t\t\tscope.editData.logo_image = '';\n\t\t\t\t\t\t\t\n                            if (responseData.data.showRealodButton == true) {\n    \t\t                    __globals.showConfirmation({\n    \t\t\t\t                title               : responseData.data.message,\n    \t\t\t\t                text                : responseData.data.textMessage,\n    \t\t\t\t                type                : \"success\",\n    \t\t                        showCancelButton    : true,\n    \t\t                        confirmButtonClass  : \"btn-success\",\n    \t\t                        confirmButtonText   : __globals.getJSString('reload_text'),\n    \t\t\t\t\t\t\t\tconfirmButtonColor :  \"#337ab7\",\n    \t\t                        closeOnConfirm      : false\n    \t\t\t\t            }, function() {\n\n    \t\t\t\t               location.reload();\n\n    \t\t\t\t            });\n                            }\n                            \n                            if ($state.current.name == 'taxes') {\n                                $scope.closeThisDialog();\n                            }\n\n\t\t                });    \n\n\t\t            });\n\n\t\t        };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n\t\t}]);\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t  general setting Related Controllers\n\t  ---------------------------------------------------------------------- */\n\t\n\tangular\n        .module('manageApp.PlacementSettings', \t\t[])\n\n        /**\n\t\t * PlacementsController for update request\n\t\t *\n\t\t * @inject $scope\n\t\t * @inject __DataStore\n\t\t * @inject appServices\n\t\t *\n\t\t * @return void\n\t\t *-------------------------------------------------------- */\n\t\t.controller('PlacementsController', [\n\t\t    '$scope',\n\t\t    '$state',\n\t\t    'appServices',\n\t\t function PlacementsController($scope, $state, appServices) {\n\n\t\t    var scope  = this;\n\n\t\t\tappServices.showDialog({}, {\n\t\t\t\ttemplateUrl : __globals.getTemplateURL('store.placement')\n\t\t\t}, function(promiseObj) {\n\t\t\t\t$state.go('store_settings_edit');\n\t\t\t});\n\t\t}\n\t\t])\n\n         /**\n\t      * PlacementSettingsController for update store settings\n\t      *\n\t      * @inject __Form\n\t      * @inject appServices\n\t      * @inject $state\n\t      * @inject FileUploader\n\t      * @inject __Utils\n\t      * \n\t      * @return void\n\t      *-------------------------------------------------------- */\n\n\t\t.controller('PlacementSettingsController', [\n\t\t\t'__Form',\n\t\t\t'$scope',\n            'appServices',\n            function (__Form, $scope, appServices) {\n\n                var scope   = this;\n  \t\t\t\tscope.pageStatus = false;\n\t\t        scope = __Form.setup(scope, 'form_placement_settings', 'editData', {\n\t\t            secured : true,\n\t\t        \tmodelUpdateWatcher:false,\n                    unsecuredFields : ['addtional_page_end_content', 'global_notification', 'append_email_message'],\n\t\t        });\n\n\t\t        scope.categories_menu_placement_select_config = __globals.getSelectizeOptions({\n\t\t            valueField  : 'value',\n\t\t            labelField  : 'name',\n\t\t            searchField : [ 'name' ]  \n\t\t        });\n\n\t\t        scope.brand_menu_placement_select_config = __globals.getSelectizeOptions({\n\t\t            valueField  : 'value',\n\t\t            labelField  : 'name',\n\t\t            searchField : [ 'name' ]  \n\t\t        });\n\n\t\t        /**\n\t\t          * Fetch support data\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\n\t\t        __Form.fetch({\t\n\t\t        \t\t'apiURL'   :'store.settings.edit.supportdata',\n\t\t        \t\t'formType' : 5\n\t\t        \t}).success(function(responseData) {\n\t\t            \n\t\t            var requestData = responseData.data;\n\t\t            \n\t\t            scope.menu_placement = requestData.store_settings.menu_placement;\n\t\t            appServices.processResponse(responseData, null, function() {\n\n\t\t                if (!_.isEmpty(requestData.store_settings)) {\n\t\t                    __Form.updateModel(scope, requestData.store_settings); \n\t\t                }  \n\t\t                scope.pageStatus = true;\n\n\t\t            });    \n\n\t\t        });\n\n\t\t        /**\n\t\t          * Submit store settings edit form\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\t\t        \n\t\t        scope.submit = function() {\n\n\t\t            __Form.process({\t\n\t\t        \t\t'apiURL'   :'store.settings.edit',\n\t\t        \t\t'formType' : 5\n\t\t        \t}, scope)\n\t\t                .success(function(responseData) {\n\t\t                \t\n\t\t                appServices.processResponse(responseData, null, \n\t\t                    function() {\n\t\t                    \t\n\t\t\t\t\t\t\tscope.editData.logo_image = '';\n\t\t\t\t\t\t\t\n                            if (responseData.data.showRealodButton == true) {\n    \t\t                    __globals.showConfirmation({\n    \t\t\t\t                title               : responseData.data.message,\n    \t\t\t\t                text                : responseData.data.textMessage,\n    \t\t\t\t                type                : \"success\",\n    \t\t                        showCancelButton    : true,\n    \t\t                        confirmButtonClass  : \"btn-success\",\n    \t\t                        confirmButtonText   : __globals.getJSString('reload_text'),\n    \t\t\t\t\t\t\t\tconfirmButtonColor :  \"#337ab7\",\n    \t\t                        closeOnConfirm      : false\n    \t\t\t\t            }, function() {\n\n    \t\t\t\t               location.reload();\n\n    \t\t\t\t            });\n                            }\n\n\t\t                });    \n\n\t\t            });\n\n\t\t        };\n\n\t        /**\n\t\t\t  * Close dialog\n\t\t\t  *\n\t\t\t  * @return void\n\t\t\t  *---------------------------------------------------------------- */\n\t\t\tscope.closeDialog = function() {\n\t\t\t    $scope.closeThisDialog();\n\t\t\t};\n\t\t}]);\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t  general setting Related Controllers\n\t  ---------------------------------------------------------------------- */\n\t\n\tangular\n        .module('manageApp.ProductSettings', \t\t[])\n\n        /**\n\t\t * ProductController for update request\n\t\t *\n\t\t * @inject $scope\n\t\t * @inject __DataStore\n\t\t * @inject appServices\n\t\t *\n\t\t * @return void\n\t\t *-------------------------------------------------------- */\n\t\t.controller('ProductController', [\n\t\t    '$scope',\n\t\t    '$state',\n\t\t    'appServices',\n\t\t function ProductController($scope, $state, appServices) {\n\n\t\t    var scope  = this;\n\n\t\t\tappServices.showDialog({}, {\n\t\t\t\ttemplateUrl : __globals.getTemplateURL('store.product')\n\t\t\t}, function(promiseObj) {\n\t\t\t\t$state.go('store_settings_edit');\n\t\t\t});\n\t\t}\n\t\t])\n         /**\n\t      * ProductSettingsController for update store settings\n\t      *\n\t      * @inject __Form\n\t      * @inject appServices\n\t      * @inject $state\n\t      * @inject FileUploader\n\t      * @inject __Utils\n\t      * \n\t      * @return void\n\t      *-------------------------------------------------------- */\n\n\t\t.controller('ProductSettingsController', [\n\t\t\t'__Form', \n            'appServices',\n            '$scope',\n            function (__Form, appServices, $scope) {\n\n                var scope   = this;\n                scope.pageStatus = false;\n\t\t        scope = __Form.setup(scope, 'form_product_settings_edit', 'editData', {\n\t\t            secured : true,\n\t\t        \tmodelUpdateWatcher:false\n\t\t        });\n\n\t\t        scope.editData.credit_info = true;\n                \n                //manage product setting sidebar tab on click\n                scope.manageProductSettingTab = function(event) { \n                    event.preventDefault();\n                };\n\n\t\t        /**\n\t\t          * Fetch support data\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\n\t\t        __Form.fetch({\t\n\t\t        \t\t'apiURL'   :'store.settings.edit.supportdata',\n\t\t        \t\t'formType' : 4\n\t\t        \t}).success(function(responseData) {\n\t\t            \n\t\t            var requestData = responseData.data;\n\t\t            \n\t\t            appServices.processResponse(responseData, null, function() {\n\n\t\t                if (!_.isEmpty(requestData.store_settings)) {\n\t\t                    __Form.updateModel(scope, requestData.store_settings);\n\t\t                }\n \t\t\t\t\t\tscope.pageStatus = true;\n\t\t            });    \n\n\t\t        });\n\n\t\t       /**\n\t\t          * Submit store settings edit form\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\t\t        \n\t\t        scope.submit = function() {\n\n\t\t            __Form.process({\t\n\t\t        \t\t'apiURL'   :'store.settings.edit',\n\t\t        \t\t'formType' : 4\n\t\t        \t}, scope)\n\t\t                .success(function(responseData) {\n\t\t                \t\n\t\t                appServices.processResponse(responseData, null, \n\t\t                    function() {\n\t\t\t\t\t\t\t\n                            if (responseData.data.showRealodButton == true) {\n    \t\t                    __globals.showConfirmation({\n    \t\t\t\t                title               : responseData.data.message,\n    \t\t\t\t                text                : responseData.data.textMessage,\n    \t\t\t\t                type                : \"success\",\n    \t\t                        showCancelButton    : true,\n    \t\t                        confirmButtonClass  : \"btn-success\",\n    \t\t                        confirmButtonText   : __globals.getJSString('reload_text'),\n    \t\t\t\t\t\t\t\tconfirmButtonColor :  \"#337ab7\",\n    \t\t                        closeOnConfirm      : false\n    \t\t\t\t            }, function() {\n\n    \t\t\t\t               location.reload();\n\n    \t\t\t\t            });\n                            }\n\n\t\t                });    \n\n\t\t            });\n\n\t\t        };\n\n\t\t        /**\n\t\t\t\t  * Close dialog\n\t\t\t\t  *\n\t\t\t\t  * @return void\n\t\t\t\t  *---------------------------------------------------------------- */\n\t\t\t\tscope.closeDialog = function() {\n\t\t\t\t    $scope.closeThisDialog();\n\t\t\t\t};\n\t\t}]);\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t  contact setting Related Controllers\n\t  ---------------------------------------------------------------------- */\n\t\n\tangular\n        .module('manageApp.ContactSettings', \t\t[])\n\n        /**\n         * ContactController for update request\n         *\n         * @inject $scope\n         * @inject __DataStore\n         * @inject appServices\n\t\t *\n         * @return void\n         *-------------------------------------------------------- */\n        .controller('ContactController', [\n            '$scope',\n            '$state',\n            'appServices',\n         function ContactController($scope, $state, appServices) {\n\n            var scope  = this;\n \n\t\t\tappServices.showDialog({}, {\n\t\t\t\ttemplateUrl : __globals.getTemplateURL('store.contact')\n\t\t\t}, function(promiseObj) {\n\t\t\t\t$state.go('store_settings_edit');\n\t\t\t});\n        }\n        ])\n        \n         /**\n\t      * ContactSettingsController for update store settings\n\t      *\n\t      * @inject __Form\n\t      * @inject appServices\n\t      * \n\t      * @return void\n\t      *-------------------------------------------------------- */\n\n\t\t.controller('ContactSettingsController', [\n\t\t\t'__Form', \n            'appServices',\n            '$scope',\n            function (__Form,appServices, $scope) {\n\n                var scope   = this;\n  \t\t\t\tscope.pageStatus = false;\n\t\t        scope = __Form.setup(scope, 'form_contact_settings', 'editData', {\n\t\t            secured : true,\n\t\t        \tmodelUpdateWatcher:false,\n\t\t            unsecuredFields : ['contact_address'],\n\t\t        });\n\n\n\t\t        /**\n\t\t          * Fetch support data\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\n\t\t        __Form.fetch({\t\n\t\t        \t\t'apiURL'   :'store.settings.edit.supportdata',\n\t\t        \t\t'formType' : 6\n\t\t        \t}).success(function(responseData) {\n\t\t            \n\t\t            var requestData = responseData.data;\n\t\t            \n\t\t            appServices.processResponse(responseData, null, function() {\n\t\t            \t\n\t\t                if (!_.isEmpty(requestData.store_settings)) {\n\t\t                    __Form.updateModel(scope, requestData.store_settings);\n\t\t                }\n  \t\t\t\t\t\tscope.pageStatus = true;\n\t\t            });    \n\n\t\t        });\n\t\t        \n\t\t        /**\n\t\t          * Submit store settings edit form\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\t\t        \n\t\t        scope.submit = function() {\n\n\t\t            __Form.process({\t\n\t\t        \t\t'apiURL'   :'store.settings.edit',\n\t\t        \t\t'formType' :6\n\t\t        \t}, scope)\n\t\t                .success(function(responseData) {\n\t\t                \t\n\t\t                appServices.processResponse(responseData, null, \n\t\t                    function() {\n\t\t                    \t\n\t\t\t\t\t\t\tscope.editData.logo_image = '';\n\t\t\t\t\t\t\tif (responseData.data.showRealodButton == true) {\n    \t\t                    __globals.showConfirmation({\n    \t\t\t\t                title               : responseData.data.message,\n    \t\t\t\t                text                : responseData.data.textMessage,\n    \t\t\t\t                type                : \"success\",\n    \t\t                        showCancelButton    : true,\n    \t\t                        confirmButtonClass  : \"btn-success\",\n    \t\t                        confirmButtonText   : __globals.getJSString('reload_text'),\n    \t\t\t\t\t\t\t\tconfirmButtonColor :  \"#337ab7\",\n    \t\t                        closeOnConfirm      : false\n    \t\t\t\t            }, function() {\n\n    \t\t\t\t               location.reload();\n\n    \t\t\t\t            });\n                            }\n\n\t\t                });    \n\n\t\t            });\n\n\t\t        };\n\n\t\t        /**\n\t              * Close dialog\n\t              *\n\t              * @return void\n\t              *---------------------------------------------------------------- */\n\t            scope.closeDialog = function() {\n\t                $scope.closeThisDialog();\n\t            };\n\t\t}]);\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t  contact setting Related Controllers\n\t  ---------------------------------------------------------------------- */\n\t\n\tangular\n        .module('manageApp.SliderSettings', [])\n\n         /**\n\t      * ContactSettingsController for update store settings\n\t      *\n\t      * @inject __Form\n\t      * @inject appServices\n\t      * \n\t      * @return void\n\t      *-------------------------------------------------------- */\n\n\t\t.controller('SliderListController', [\n\t\t\t'__Form', \n            'appServices',\n            '__DataStore',\n            '$scope',\n            function (__Form, appServices, __DataStore, $scope) {\n\n                var scope = this;\n\n                scope.getSliderData = function() {\n\n                    __DataStore.fetch('store.settings.slider.read.list')\n                        .success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function(reactionCode) {\n\n                            var requestData = responseData.data;\n                            scope.sliderList = requestData.sliderDataCollection;\n\n                        });\n\n                    });\n                };\n                scope.getSliderData();\n\n                // when add new record \n                $scope.$on('alider_added_or_updated', function(data) {\n\n                    if (data) {\n                        scope.getSliderData();\n                    }\n\n                });\n\n                scope.delete  = function(sliderID, title) {\n                   \n                    var $lwSliderDeleteTextMsg = $('#lwSliderDeleteTextMsg');\n\n                    __globals.showConfirmation({\n                        html : __globals.getReplacedString($lwSliderDeleteTextMsg,\n                                    '__title__',\n                                    _.unescape(title)\n                                ),\n                        confirmButtonText : $lwSliderDeleteTextMsg.attr('data-delete-button-text')\n                    }, function() {\n\n                        __DataStore.post({\n                            'apiURL' : 'store.settings.slider.write.delete',\n                            'sliderID'  : sliderID,\n                            'title' : title\n                        }).success(function(responseData) {\n                            \n                            var message = responseData.data.message;\n                            \n                            appServices.processResponse(responseData, {\n\n                                error : function(data) {\n                                __globals.showConfirmation({\n                                    title   : $lwSliderDeleteTextMsg .attr('data-error-text'),\n                                    text    : message,\n                                    type    : 'error'\n                                });\n                            }\n\n                            }, function(data) {\n                                __globals.showConfirmation({\n                                    title   : $lwSliderDeleteTextMsg .attr('data-success-text'),\n                                    text    : message,\n                                    type    : 'success'\n                                });\n                                scope.getSliderData();\n                            }); \n\n                        });\n\n                    });\n                };\n\n            }\n        ])\n\n         /**\n         * comment here\n         *\n         * @inject $scope\n         * @inject __DataStore\n         * @inject appServices\n         * @inject __Form\n         *\n         * @return void\n         *-------------------------------------------------------- */\n        .controller('SliderAddController', [\n            '$scope',\n            '__DataStore',\n            'appServices',\n            'FileUploader',\n            '__Utils',\n            'appNotify',\n            '$state',\n            '__Form',\n            function SliderAddController( $scope, __DataStore, appServices, FileUploader, __Utils , appNotify, $state, __Form ) {\n                var scope   = this;\n                \n                // Show loader\n                scope.showLoader = true;\n                \n\n                // Setup form\n                scope = __Form.setup(scope, 'slider_add_form', 'sliderAddData', {\n                    secured : true\n                });\n\n                scope.imagesSelectConfig     = __globals.getSelectizeOptions({\n                    valueField  : 'name',\n                    labelField  : 'name',\n                    render      : {\n                        item: function(item, escape) {\n                            return  __Utils.template('#imageListItemTemplate',\n                            item\n                            );\n                        },\n                        option: function(item, escape) {\n\n                            return  __Utils.template('#imageListItemImageTemplate', item);\n                        }\n                    },\n                    searchField : ['name']  \n                });\n\n                //by default auto play true\n                scope.sliderAddData.auto_play = true;\n                scope.sliderAddData.autoPlayTimeout = 6; \n\n                //product slider sortable start\n                var el = document.getElementById('lw-slides-wrapper');\n                var sortable = Sortable.create(el, {\n                    animation: 150,\n                    handle: '.lw-handle-div',\n                    onEnd: function(/**Event*/evt) { \n                        var sortableArray = sortable.toArray();\n\n                        _.map(sortableArray, function(value, key) {\n                            scope.sliderAddData.slides[value]['orderIndex'] = parseInt(key);\n                        })   \n\n                    }\n\n                });\n                //product slider sortable end\n                 \n\n                 /**\n                  * Fetch uploaded temp images media files\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.images_count = 0;\n                scope.getTempImagesMedia = function() {\n\n                    __Form.fetch('media.uploaded.images', { fresh : true })\n                        .success(function(responseData) {\n                            \n                        appServices.processResponse(responseData, null, function() {\n                            scope.image_files = responseData.data.files\n                         \n                            if (responseData.data.files.length > 0) {\n                                scope.images_count = responseData.data.files.length;\n                            };\n                        });    \n\n                    });\n\n                };\n\n                scope.getTempImagesMedia();\n\n                scope.sliderAddData.slides  = [\n                    {\n                        'caption_1'        : '',\n                        'caption_1_color'  : 'ffffff',\n                        'caption_2'        : '',\n                        'caption_2_color'  : 'ffffff',\n                        'caption_3'        : '',\n                        'bg_color'         : '282828',\n                        'image'            : '',\n                        'orderIndex'       : 0  \n                    }\n                ];\n\n                /**\n                  * Add new value in option value\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                \n                scope.addNewValue = function() {\n                    var lastOrderIndex = _.last(scope.sliderAddData.slides)['orderIndex'];\n                \n                    scope.sliderAddData.slides.push({\n                        caption_1         : '',\n                        caption_1_color   : 'ffffff',\n                        caption_2         : '',\n                        caption_2_color   : 'ffffff',\n                        caption_3         : '',\n                        bg_color          : '282828',\n                        image             : '',\n                        orderIndex        : lastOrderIndex + 1\n                    });\n                };\n\n\n\n                /**\n                  * Remove current option value row\n                  *\n                  * @param number index\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.remove = function(index) {\n\n                    if (!_.isEmpty(scope.sliderAddData.slides)\n                     && scope.sliderAddData.slides.length > 1) {\n\n                        _.remove(scope.sliderAddData.slides, function(value, key) {\n                            return index == key;\n                        });\n\n                    }\n                    \n                };\n\n                var uploader = scope.uploader = new FileUploader({\n                    url         : __Utils.apiURL('media.upload.image'),\n                    autoUpload  : true,\n                    headers     : {\n                        'X-XSRF-TOKEN': __Utils.getXSRFToken()\n                    }\n                });\n\n                // FILTERS\n                uploader.filters.push({\n                    name: 'customFilter',\n                    fn: function(item /*{File|FileLikeObject}*/, options) {\n                        return this.queue.length < 1000;\n                    }\n                });\n\n                scope.currentUploadedFileCount = 0;\n                scope.loadingStatus            = false;\n\n                /**\n                * uploading msg\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n                uploader.onAfterAddingAll = function() {\n                   \n                    scope.loadingStatus = true;\n                    $(\"#lw-spinner-widget-\"+scope.newImageIndex).show();\n                    $(\"#lwFileupload-\"+scope.newImageIndex).attr(\"disabled\", true);\n                    appNotify.info(__globals.getJSString('loading_text'),{sticky : true});\n\n                };\n\n                /**\n                * Uploading on process\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n\n                uploader.onBeforeUploadItem = function(item) {\n                    scope.loadingStatus = true;\n                };\n\n                /**\n                * on success counter of uploaded image\n                *\n                * @param object fileItem\n                * @param object response\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n                \n                uploader.onSuccessItem = function( fileItem, response ) {\n                    $(\"#lw-spinner-widget-\"+scope.newImageIndex).hide();\n                    $(\"#lwFileupload-\"+scope.newImageIndex).attr(\"disabled\", false);\n\n                    scope.thumbnailURL = response.data.thumbnailURL;\n                    scope.sliderAddData.slides[scope.newImageIndex].thumbnailURL = response.data.thumbnailURL;\n                    scope.imageFile = response.data.fileName;\n                    scope.sliderAddData.slides[scope.newImageIndex].image = scope.imageFile;\n                    scope.newImageIndex = null;\n              \n                    appServices.processResponse(response, { \n                        error : function() {\n                        },\n                        otherError : function(reactionCode) {\n                          \n                            // If reaction code is Server Side Validation Error Then \n                            if (reactionCode == 3) {\n\n                                appNotify.error(response.data.message,{sticky : false});\n\n                            }\n\n                        }\n                    },\n                    function() {\n\n                        scope.currentUploadedFileCount++\n                        \n                    });   \n\n                };\n\n                scope.newImageIndex = null;\n                scope.addImages = function(index, data) {\n\n                    scope.newImageIndex = index;\n\n                };\n               \n                /**\n                * uploaded all image then call function\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n                \n                uploader.onCompleteAll  = function() {\n\n                   scope.loadingStatus  = false;\n                    if (scope.currentUploadedFileCount > 0) {\n                        appNotify.success(scope.currentUploadedFileCount+' '+__globals.getJSString('file_uploaded_text'), {sticky : false});\n\n                    }\n                    scope.getTempImagesMedia();\n                    scope.currentUploadedFileCount = 0;\n\n                };\n\n                /**\n                  * Submit form method\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function() {\n\n                    // post route declared in web.php file\n                    __Form.process({\n                        'apiURL'   :'store.settings.slider.write.addSlider',\n                        'formType' : 16\n                    }, scope)\n                    .success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function(reactionCode) {\n                            if (reactionCode == 1) {\n                                var requestData = responseData.data;\n                                $state.go('slider_setting_edit', {'sliderID': requestData.title});\n                            }\n                        });    \n\n                    });\n                };\n\n\n        }])\n\n\n\n        /**\n        * Sample Edit Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('SliderEditController', [\n            '$scope',                \n            '__DataStore',                \n            '__Form',\n            'FileUploader',               \n            '$state',                \n            'appServices',\n            '__Utils',\n            'appNotify',              \n            '$rootScope',                \n        function ( $scope,  __DataStore,  __Form, FileUploader,  $state,  appServices, __Utils, appNotify, $rootScope) {\n\n            var scope       = this;\n            scope.SliderId = $state.params.sliderID;\n\n            scope.showLoader = true;\n\n            scope = __Form.setup(scope, 'slider_edit_form', 'sliderEditData', {\n                secured : true\n            });\n\n            scope.imagesSelectConfig     = __globals.getSelectizeOptions({\n                valueField  : 'name',\n                labelField  : 'name',\n                render      : {\n                    item: function(item, escape) {\n                        return  __Utils.template('#imageListItemTemplate',\n                        item\n                        );\n                    },\n                    option: function(item, escape) {\n                        return  __Utils.template('#imageListOptionTemplate',\n                        item\n                        );\n                    }\n                }, \n                searchField : ['name']  \n            });\n\n            //product slider sortable start\n            var el = document.getElementById('lw-slides-wrapper');\n            var sortable = Sortable.create(el, {\n                animation: 150,\n                handle: '.lw-handle-div',\n                onEnd: function(/**Event*/evt) { \n                    var sortableArray = sortable.toArray();\n\n                    _.map(sortableArray, function(value, key) {\n                        scope.sliderEditData.slides[value]['orderIndex'] = parseInt(key);\n                    })   \n\n                }\n\n            });\n            //product slider sortable end\n\n            /**\n              * Fetch uploaded temp images media files\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n            scope.images_count = 0;\n            scope.getTempImagesMedia = function() {\n\n                __Form.fetch('media.uploaded.images', { fresh : true })\n                    .success(function(responseData) {\n                        \n                    appServices.processResponse(responseData, null, function() {\n                        scope.image_files = responseData.data.files\n\n                        if (responseData.data.files.length > 0) {\n                            scope.images_count = responseData.data.files.length;\n                        };\n                    });    \n\n                });\n\n            };\n\n            scope.getTempImagesMedia();\n\n            scope.getSliderEditData = function() {\n                __DataStore.fetch({\n                    'apiURL'   : 'store.settings.slider.read.update.data',\n                    'sliderID' : scope.SliderId\n                }).success(function(responseData) {\n\n                    var requestData = responseData.data;\n\n                    appServices.processResponse(responseData, null, function() {\n                       scope.sliderEditData   = requestData.sliderCollection;\n                       scope.sliderTitle      = requestData.sliderTitle;\n                      \n                        scope.showLoader = false;\n\n                        scope = __Form.updateModel(scope, scope.sliderEditData);\n                    });\n                });\n            }\n            scope.getSliderEditData();\n            \n            /**\n              * Add new value in options value\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n            \n            scope.addNewValue = function() {\n                var lastOrderIndex = 0;\n                if (!_.isEmpty(scope.sliderEditData.slides)) {\n                    lastOrderIndex = _.last(scope.sliderEditData.slides)['orderIndex'];\n                }\n                \n                scope.sliderEditData.slides.push({\n                    caption_1         : '',\n                    caption_1_color   : 'ffffff',\n                    caption_2         : '',\n                    caption_2_color   : 'ffffff',\n                    caption_3         : '',\n                    bg_color          : '282828',\n                    image             : '',\n                    orderIndex        : lastOrderIndex + 1\n                });\n            };\n\n            /**\n              * Remove current option value row\n              *\n              * @param number index\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n\n            scope.remove = function(index) {\n\n                if (!_.isEmpty(scope.sliderEditData.slides) || !_.isEmpty(scope.sliderEditData.configuration) && scope.sliderEditData.slides.length > 1 || scope.sliderEditData.configuration.length > 1) {\n\n                    _.remove(scope.sliderEditData.slides, function(value, key) {\n                        return index == key;\n                    });\n\n                    _.remove(scope.sliderEditData.configuration, function(value, key) {\n                        return index == key;\n                    });\n\n                }\n                \n            };\n\n            var uploader = scope.uploader = new FileUploader({\n                url         : __Utils.apiURL('media.upload.image'),\n                autoUpload  : true,\n                headers     : {\n                    'X-XSRF-TOKEN': __Utils.getXSRFToken()\n                }\n            });\n\n            // FILTERS\n            uploader.filters.push({\n                name: 'customFilter',\n                fn: function(item /*{File|FileLikeObject}*/, options) {\n                    return this.queue.length < 1000;\n                }\n            });\n\n            scope.currentUploadedFileCount = 0;\n            scope.loadingStatus            = false;\n\n            /**\n            * uploading msg\n            *\n            * @return void\n            *---------------------------------------------------------------- */\n            uploader.onAfterAddingAll = function() {\n\n                scope.loadingStatus = true;\n\n                //upload button disabled and show spinner\n                $(\"#lw-spinner-widget-\"+scope.newImageIndex).show();\n                $(\"#lwFileupload-\"+scope.newImageIndex).attr(\"disabled\", true);\n\n                appNotify.info(__globals.getJSString('loading_text'),{sticky : true});\n\n            };\n\n            /**\n            * Uploading on process\n            *\n            * @return void\n            *---------------------------------------------------------------- */\n\n            uploader.onBeforeUploadItem = function(item) {\n                scope.loadingStatus = true;\n            };\n\n\n            /**\n            * on success counter of uploaded image\n            *\n            * @param object fileItem\n            * @param object response\n            *\n            * @return void\n            *---------------------------------------------------------------- */\n            \n            uploader.onSuccessItem = function( fileItem, response ) {\n                //upload button enable and hide spinner\n                $(\"#lw-spinner-widget-\"+scope.newImageIndex).hide();\n                $(\"#lwFileupload-\"+scope.newImageIndex).attr(\"disabled\", false);\n\n                if (!_.isEmpty(response.data.thumbnailURL)) {\n                    scope.thumbnailURL = response.data.thumbnailURL;\n                }\n                scope.sliderEditData.slides[scope.newImageIndex].thumbnailURL = response.data.thumbnailURL;\n                scope.sliderEditData.slides[scope.newImageIndex].newImageExist = true; \n                scope.sliderEditData.slides[scope.newImageIndex].oldImageName = scope.sliderEditData.slides[scope.newImageIndex].image; \n                scope.imageFile = response.data.fileName;\n                scope.sliderEditData.slides[scope.newImageIndex].image = scope.imageFile;\n                scope.newImageIndex = null;\n            \n                appServices.processResponse(response, {\n                    error : function() {\n                    },\n                    otherError : function(reactionCode) {\n                      \n                        // If reaction code is Server Side Validation Error Then \n                        if (reactionCode == 3) {\n\n                            appNotify.error(response.data.message,{sticky : false});\n\n                        }\n\n                    }\n                },\n                function() {\n\n                    scope.currentUploadedFileCount++\n                    \n                });   \n\n            };\n\n            scope.newImageIndex = null;\n            scope.addImages = function(index, data) {\n\n                scope.newImageIndex = index;\n\n            };\n\n            /**\n            * uploaded all image then call function\n            *\n            * @return void\n            *---------------------------------------------------------------- */\n            \n            uploader.onCompleteAll  = function() {\n\n               scope.loadingStatus  = false;\n                if (scope.currentUploadedFileCount > 0) {\n                    appNotify.success(scope.currentUploadedFileCount+' '+__globals.getJSString('file_uploaded_text'), {sticky : false});\n\n                }\n                scope.getTempImagesMedia();\n                scope.currentUploadedFileCount = 0;\n\n            };\n\n          /**\n            * Submit form\n            *\n            * @return  void\n            *---------------------------------------------------------------- */\n\n            scope.submit = function() {\n             \n                __Form.process({\n                    'apiURL'    : 'store.settings.slider.write.update',\n                    'sliderID'  : scope.SliderId,\n                    'formType' : 16\n                }, scope).success(function(responseData) {\n\n                    appServices.processResponse(responseData, null, function() {\n                        scope.getSliderEditData();\n                        //$state.go('slider_setting');\n                    });    \n                });\n            };\n\n        }])\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t  privacy setting Related Controllers\n\t  ---------------------------------------------------------------------- */\n\t\n\tangular\n        .module('manageApp.privacyPolicySettings', [])\n\n        /**\n\t\t * PrivacyPolicyController for update request\n\t\t *\n\t\t * @inject $scope\n\t\t * @inject __DataStore\n\t\t * @inject appServices\n\t\t *\n\t\t * @return void\n\t\t *-------------------------------------------------------- */\n\t\t.controller('PrivacyPolicyController', [\n\t\t    '$scope',\n\t\t    '$state',\n\t\t    'appServices',\n\t\t function PrivacyPolicyController($scope, $state, appServices) {\n\n\t\t    var scope  = this;\n\n\t\t\tappServices.showDialog({}, {\n\t\t\t\ttemplateUrl : __globals.getTemplateURL('store.privacy-policy')\n\t\t\t}, function(promiseObj) {\n\t\t\t\t$state.go('store_settings_edit');\n\t\t\t});\n\t\t}\n\t\t])\n\n         /**\n\t      * PrivacyPolicySettingsController for update store settings\n\t      *\n\t      * @inject __Form\n\t      * @inject appServices\n\t      * \n\t      * @return void\n\t      *-------------------------------------------------------- */\n\n\t\t.controller('PrivacyPolicySettingsController', [\n\t\t\t'__Form', \n            'appServices',\n            '$scope',\n            function (__Form, appServices, $scope) {\n\n                var scope   = this;\n                scope.pageStatus = false;\n\t\t        scope \t\t= __Form.setup(scope, 'form_privacy_policy_settings', 'editData', {\n\t\t            secured : true,\n\t\t        \tmodelUpdateWatcher:false,\n\t\t            unsecuredFields : ['privacy_policy']\n\t\t        });\n\n\t\t        /**\n\t\t          * Fetch support data\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\n\t\t        __Form.fetch({\t\n\t\t        \t\t'apiURL'   :'store.settings.edit.supportdata',\n\t\t        \t\t'formType' : 8\n\t\t        \t}).success(function(responseData) {\n\t\t            \n\t\t            var requestData = responseData.data;\n\t\t            \n\t\t            appServices.processResponse(responseData, null, function() {\n\n\t\t                if (!_.isEmpty(requestData.store_settings)) {\n\t\t                    __Form.updateModel(scope, requestData.store_settings);\n\t\t                }\n  \t\t\t\t\t\tscope.pageStatus = true;\n\t\t            });    \n\n\t\t        });\n\n\t\t       /**\n\t\t          * Submit store settings edit form\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\t\t        \n\t\t        scope.submit = function() {\n\n\t\t            __Form.process({\t\n\t\t        \t\t'apiURL'   : 'store.settings.edit',\n\t\t        \t\t'formType' : 8\n\t\t        \t}, scope)\n\t\t                .success(function(responseData) {\n\t\t                \t\n\t\t                appServices.processResponse(responseData, null, \n\t\t                    function() {\n\t\t\t\t\t\t\t\n                            if (responseData.data.showRealodButton == true) {\n    \t\t                    __globals.showConfirmation({\n    \t\t\t\t                title               : responseData.data.message,\n    \t\t\t\t                text                : responseData.data.textMessage,\n    \t\t\t\t                type                : \"success\",\n    \t\t                        showCancelButton    : true,\n    \t\t                        confirmButtonClass  : \"btn-success\",\n    \t\t                        confirmButtonText   : __globals.getJSString('reload_text'),\n    \t\t\t\t\t\t\t\tconfirmButtonColor :  \"#337ab7\",\n    \t\t                        closeOnConfirm      : false\n    \t\t\t\t            }, function() {\n\n    \t\t\t\t               location.reload();\n\n    \t\t\t\t            });\n                            }\n\n\t\t                });    \n\n\t\t            });\n\n\t\t        };\n\n\t        /**\n\t\t\t  * Close dialog\n\t\t\t  *\n\t\t\t  * @return void\n\t\t\t  *---------------------------------------------------------------- */\n\t\t\tscope.closeDialog = function() {\n\t\t\t    $scope.closeThisDialog();\n\t\t\t};\n\t\t}]);\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t  ads setting Related Controllers\n\t  ---------------------------------------------------------------------- */\n\t\n\tangular\n        .module('manageApp.landingPageSettings', [])\n\n\n         /**\n\t      * LandingPageSettingController for update store settings\n\t      *\n\t      * @inject __Form\n\t      * @inject appServices\n\t      * \n\t      * @return void\n\t      *-------------------------------------------------------- */\n\n\t\t.controller('LandingPageSettingController', [\n\t\t\t'__Form', \n            'appServices',\n            '$scope',\n            'FileUploader',\n            '__Utils',\n            'appNotify',\n            function (__Form, appServices, $scope, FileUploader, __Utils, appNotify) {\n\n                var scope   = this;\n                scope.pageStatus              = false;\n                scope.landingPageEditData     = [];\n                scope.sliderIndex             = null;                \n                scope.pageContentIndex        = null;\n                scope.latestProductIndex      = null;\n                scope.featureProductIndex     = null;\n                scope.popularPageIndex        = null;\n                scope.banner1Index            = null;\n                scope.banner2Index            = null;\n                scope.productTabIndex         = null;\n                scope.selectedItem            = 0;\n\n\t\t        scope \t\t= __Form.setup(scope, 'form_landing_page_settings', 'editData', {\n\t\t            secured : true,\n\t\t        \tmodelUpdateWatcher:false\n\t\t        });\n\n                scope.slider_option_config = __globals.getSelectizeOptions({\n                    valueField  : 'title',\n                    labelField  : 'title',\n                    searchField : ['title']  \n                });\n\n                scope.productSelectConfig = __globals.getSelectizeOptions({\n                    valueField  : 'id',\n                    labelField  : 'name',\n                    searchField : ['name'],\n                    plugins     : ['remove_button'],\n                    maxItems    : 1000,\n                    delimiter   : ','\n                });\n\n                scope.home_page_select_config = __globals.getSelectizeOptions({\n\t\t            valueField  : 'id',\n\t\t            labelField  : 'name',\n\t\t            searchField : [ 'name' ]  \n\t\t        });\n\n                var uploader = scope.uploader = new FileUploader({\n                    url         : __Utils.apiURL('media.upload.image'),\n                    autoUpload  : true,\n                    headers     : {\n                        'X-XSRF-TOKEN': __Utils.getXSRFToken()\n                    }\n                });\n\n                // FILTERS\n                uploader.filters.push({\n                    name: 'customFilter',\n                    fn: function(item /*{File|FileLikeObject}*/, options) {\n                        return this.queue.length < 1000;\n                    }\n                });\n\n                scope.currentUploadedFileCount = 0;\n                scope.loadingStatus            = false;\n\n                /**\n                * uploading msg\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n                uploader.onAfterAddingAll = function() {\n\n                    scope.loadingStatus = true;\n                    appNotify.info(__globals.getJSString('loading_text'),{sticky : true});\n\n                };\n\n                /**\n                * Uploading on process\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n\n                uploader.onBeforeUploadItem = function(item) {\n                    scope.loadingStatus = true;\n                };\n\n                /**\n                * on success counter of uploaded image\n                *\n                * @param object fileItem\n                * @param object response\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n                \n                uploader.onSuccessItem = function( fileItem, response ) {  \n                    scope.thumbnailURL = response.data.thumbnailURL;\n                    scope.imageFile = response.data.fileName;\n                    scope.editData.landingPageData[scope.newImageIndex][scope.newImageItemThumb] = scope.thumbnailURL;\n                    scope.editData.landingPageData[scope.newImageIndex][scope.newImageItemName] = scope.imageFile;\n                    \n                    scope.newImageIndex = null;\n                    scope.newImageItemThumb = null;\n                    scope.newImageItemName = null;\n                    appServices.processResponse(response, { \n                        error : function() {\n                        },\n                        otherError : function(reactionCode) {\n                          \n                            // If reaction code is Server Side Validation Error Then \n                            if (reactionCode == 3) {\n\n                                appNotify.error(response.data.message,{sticky : false});\n\n                            }\n\n                        }\n                    },\n                    function() {\n\n                        scope.currentUploadedFileCount++\n                        \n                    });   \n\n                };\n\n                scope.newImageIndex = null;\n                scope.newImageItemThumb = null;\n                scope.newImageItemName = null;\n                scope.addImages = function(index, itemThumb, itemName) {\n                    scope.newImageIndex = index;\n                    scope.newImageItemThumb = itemThumb;\n                    scope.newImageItemName = itemName;\n                };\n               \n                /**\n                * uploaded all image then call function\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n                \n                uploader.onCompleteAll  = function() {\n\n                   scope.loadingStatus  = false;\n                    if (scope.currentUploadedFileCount > 0) {\n                        appNotify.success(scope.currentUploadedFileCount+' '+__globals.getJSString('file_uploaded_text'), {sticky : false});\n\n                    }\n                    scope.currentUploadedFileCount = 0;\n\n                };\n\n                // Show active tab\n                scope.showActiveTab = function(selectedItem) {\n                    _.delay(function() {\n                        var firstTabIdentity = scope.editData.landingPageData[selectedItem]['identity'];\n                        var tabSelector = $('#lwListTab span a[href=\"#'+firstTabIdentity+'\"]');\n                        var $listItemGroup = $('.list-group-item');\n                        _.forEach($listItemGroup, function(item) {\n                            $(item).removeClass('active');\n                        });\n\n                        $(tabSelector[0]).tab('show')\n                    }, 500);\n                }\n\n\n\t\t        /**\n                  * Fetch support data\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.getLandingPageData = function() {\n                    __Form.fetch({  \n                            'apiURL'   :'store.settings.landing_page.edit.supportData',\n                            'formType' : 18\n                        },{'fresh': true}).success(function(responseData) {                 \n                       \n                        appServices.processResponse(responseData, null, function() {\n                            scope.editData.landingPageData = [];\n                            var requestData = responseData.data;\n                            scope.landingPageEditData = [];\n                            \n                            scope.sliderList = requestData.sliderList;\n                            scope.productList = requestData.productList; \n                          \n                            _.defer(function() {\n                                scope.editData.landingPageData = requestData.landingPageEditData;\n                                  \n                                _.forEach(scope.editData.landingPageData, function(item) {\n                                if (item.identity == 'Slider') {\n                                    scope.sliderIndex = item.orderIndex;\n                                } else if (item.identity == 'PageContent') {\n                                    scope.pageContentIndex = item.orderIndex;\n                                } else if (item.identity == 'latestProduct') {\n                                    scope.latestProductIndex = item.orderIndex;\n                                } else if (item.identity == 'featuredProduct') {\n                                    scope.featureProductIndex = item.orderIndex;\n                                } else if (item.identity == 'popularProduct') {\n                                    scope.popularPageIndex = item.orderIndex;\n                                } else if (item.identity == 'bannerContent1') {\n                                    scope.banner1Index = item.orderIndex;\n                                } else if (item.identity == 'bannerContent2') {\n                                    scope.banner2Index = item.orderIndex;\n                                } else if (item.identity == 'productTabContent') {\n                                    scope.productTabIndex = item.orderIndex;\n                                }\n                            });\n                        });\n                           \n\n                            scope.homePageSetting = __globals.generateKeyValueItems(requestData.home_page_setting);\n                            scope.editData.home_page = requestData.home_page;\n                            scope.showActiveTab(scope.selectedItem);\n                            \n                            scope.pageStatus = true;\n                        });\n                    });\n                };\n\n                scope.getLandingPageData();\n\n\n                // Prepare Title for tabs\n                scope.prepareTitle = function(title) {\n                    var newTitle = title.replace(/([A-Z])/g, ' $1').trim();\n                    return newTitle.charAt(0).toUpperCase() + newTitle.slice(1);\n                }\n\n                // Show setting when click on tab\n                scope.showLandingPageTab = function(event, index) {\n                    scope.selectedItem = index;\n                    event.preventDefault();\n                    var $listItemGroup = $('.list-group-item');\n                    _.forEach($listItemGroup, function(item) {\n                        $(item).removeClass('active');\n                    });\n                }\n\n                var lwLandingSettingSort = document.getElementById('lwListTab');\n                var sortable = new Sortable(lwLandingSettingSort, {\n                    animation: 150,\n                    onEnd: function(evt) {\n                    var $listItemGroup = $('.list-group-item');\n                    _.forEach($listItemGroup, function(item, index) {\n                        if ($(item).hasClass('active')) {\n                            scope.selectedItem = index;\n                        };\n                    });\n\n                        _.delay(function() {\n                            var sortableArray = sortable.toArray();\n\n                            _.map(sortableArray, function(value, key) {\n                               \n                                scope.editData.landingPageData[value]['orderIndex'] = parseInt(key);\n                                 \n                            }, 1000);\n                           \n                        });                        \n                    }\n                });\n\n\n\t\t       /**\n\t\t          * Submit store settings edit form\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\t\t        \n\t\t        scope.submit = function() {\n\t\t            __Form.process({\t\n\t\t        \t\t'apiURL'   : 'store.settings.landing_page.write.edit',\n\t\t        \t\t'formType' : 18\n\t\t        \t}, scope)\n\t\t                .success(function(responseData) {\n\t\t                \t\n\t\t                appServices.processResponse(responseData, null, \n\t\t                    function() {\n\t\t\t\t\t\t\tscope.getLandingPageData();\n\t\t                });    \n\n\t\t            });\n\n\t\t        };\n\n\t        /**\n\t\t\t  * Close dialog\n\t\t\t  *\n\t\t\t  * @return void\n\t\t\t  *---------------------------------------------------------------- */\n\t\t\tscope.closeDialog = function() {\n\t\t\t    $scope.closeThisDialog();\n\t\t\t};\n\t\t}]);\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t  ads setting Related Controllers\n\t  ---------------------------------------------------------------------- */\n\t\n\tangular\n        .module('manageApp.manageFooterSettings', [])\n\n         /**\n\t      * ManageFooterSettingController for update store settings\n\t      *\n\t      * @inject __Form\n\t      * @inject appServices\n\t      * \n\t      * @return void\n\t      *-------------------------------------------------------- */\n\n\t\t.controller('ManageFooterSettingController', [\n\t\t\t'__Form', \n            'appServices',\n            '$scope',\n            '__DataStore',\n            function (__Form, appServices, $scope, __DataStore) {\n\n                var scope   = this;\n                scope.pageStatus = false;\n\n\t\t        scope \t\t= __Form.setup(scope, 'manage_footer_settings', 'editData', {\n\t\t            secured : true,\n\t\t        });\n\n                 \n                /**\n                * Fetch support data\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n                scope.getFooterTemplateData = function () {\n\n                    __Form.fetch({  \n                            'apiURL':'store.settings.get.edit.footer_template.data',\n                            'formType' : 17\n                        }).success(function(responseData) {\n                        \n                        var requestData = responseData.data.footerTemplateData;\n                       \n                        appServices.processResponse(responseData, null, function() {\n                          \n                            scope.footerViewData = requestData.public_footer_template;\n                            scope.footerTemplateData = requestData;\n                            scope.replaceString     = requestData.replaceString;\n                            scope.templateDataExist = requestData.templateDataExist;\n                         \n                            //update form\n                            __Form.updateModel(scope, requestData);\n\n                            scope.pageStatus = true;\n                        });    \n\n                    });\n\n                };\n                \n                scope.getFooterTemplateData();\n\n                //when add new record \n                $scope.$on('footer_template_added_or_updated', function (data) {\n                   \n                    if (data) {\n                        scope.getEmailTemplateData();\n                    }\n\n                });\n\n                //reset default email template\n                scope.resetFooterTemlate = function() {\n                    scope.editData.public_footer_template = scope.footerViewData;\n                    // var htmlData =  scope.editData.public_footer_template;\n                };\n\n                //default template view data\n                scope.defaultEmailTemlate = function(title) {\n                    \n                    var $lwTemlateDeleteConfirmTextMsg = $('#lwTemlateDeleteConfirmTextMsg');\n\n                    __globals.showConfirmation({\n                        html                : __globals.getReplacedString($lwTemlateDeleteConfirmTextMsg , \n                                                '__title__', \n                                                unescape(title)\n                                             ),\n                        confirmButtonText   : $lwTemlateDeleteConfirmTextMsg.attr('data-delete-button-text')\n                    }, function() {\n\n                        __DataStore.post({\n                            'apiURL'    : 'store.settings.footer_template.delete',\n                            'footerTemplateId' : 'public_footer_template'\n                        })\n                        .success(function(responseData) {\n                        \n                            var message = responseData.data.message;\n                   \n                            appServices.processResponse(responseData, {\n                                \n                                    error : function(data) {\n                                        __globals.showConfirmation({\n                                            title   : $lwTemlateDeleteConfirmTextMsg .attr('data-success-text'),\n                                            text    : message,\n                                            type    : 'error'\n                                        });\n\n                                    }\n                                },\n                                function(data) {\n                                    \n                                    __globals.showConfirmation({\n                                        title               : responseData.data.message,\n                                        text                : responseData.data.textMessage,\n                                        type                : \"success\",\n                                        showCancelButton    : true,\n                                        confirmButtonClass  : \"btn-success\",\n                                        confirmButtonText   : $(\"#lwReloadBtnText\")\n                                                                .attr('data-message'),\n                                        confirmButtonColor :  \"#337ab7\"\n                                    }, function() {\n\n                                       location.reload();\n\n                                    });\n                                   \n                                }\n\n                            );  \n\n                        });\n\n                    });\n                };\n\n                //copy text string form dekstop\n                var $lwCopyToClipboardJS = new ClipboardJS('.lw-copy-action');\n\n                $lwCopyToClipboardJS.on('success', function(ele) {\n\n                    $(ele.trigger).attr(\"title\", \"Copied!\");\n\n                    ele.clearSelection();\n\n                });\n\n                 /**\n                  * update email data\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n               \n                scope.submit = function() {\n                  \n                __Form.process({\n                    'apiURL':'store.settings.footer_template.edit',\n                    'formType' : 17,\n                    'footerTemplateId' : 'public_footer_template'\n                }, scope)\n                    .success(function(responseData) {\n\n                    appServices.processResponse(responseData, null, function() {\n                       \n                        __globals.showConfirmation({\n                            title               : responseData.data.message,\n                            text                : responseData.data.textMessage,\n                            type                : \"success\",\n                            showCancelButton    : true,\n                            confirmButtonClass  : \"btn-success\",\n                            confirmButtonText   : $(\"#lwReloadBtnText\")\n                                                    .attr('data-message'),\n                            confirmButtonColor :  \"#337ab7\"\n                        }, function() {\n\n                           location.reload();\n\n                        });\n                    });    \n\n                });\n            };\n\n\t\t}]);\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t  term & condition setting Related Controllers\n\t  ---------------------------------------------------------------------- */\n\t\n\tangular\n        .module('manageApp.userSettings',[])\n\n        /**\n\t\t * UserSettingEditController for update request\n\t\t *\n\t\t * @inject $scope\n\t\t * @inject __DataStore\n\t\t * @inject appServices\n\t\t *\n\t\t * @return void\n\t\t *-------------------------------------------------------- */\n\t\t.controller('UserSettingEditController', [\n\t\t    '$scope',\n\t\t    '$state',\n\t\t    'appServices',\n\t\t function UserSettingEditController($scope, $state, appServices) {\n\n\t\t    var scope  = this;\n\n\t\t\tappServices.showDialog({}, {\n\t\t\t\ttemplateUrl : __globals.getTemplateURL('store.user')\n\t\t\t}, function(promiseObj) {\n\t\t\t\t$state.go('store_settings_edit');\n\t\t\t});\n\t\t}\n\t\t])\n\n         /**\n\t      * userSettingsController for update store settings\n\t      *\n\t      * @inject __Form\n\t      * @inject appServices\n\t      * \n\t      * @return void\n\t      *-------------------------------------------------------- */\n\n\t\t.controller('userSettingsController', [\n\t\t\t'__Form', \n            'appServices',\n            '$scope',\n            function (__Form, appServices, $scope) {\n\n                var scope   = this;\n  \t\t\t\tscope.pageStatus = false;\n\t\t        scope = __Form.setup(scope, 'form_user_settings', 'editData', {\n\t\t            secured : true,\n\t\t        \tmodelUpdateWatcher:false,\n\t\t            unsecuredFields : [\n\t\t            \t\t\t\t\t'term_condition'\n\t\t\t\t\t\t\t\t    ]\n\t\t        });\n\n                /**\n                  * Add stripe key \n                  *---------------------------------------------------------------- */\n                scope.addRecaptchaKeys = function(recaptchaKeysFor) {\n                    scope.editData.isRecaptchaKeyExist = false;\n                };\n\n\t\t        /**\n\t\t          * Fetch support data\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\n\t\t        __Form.fetch({\t\n\t\t        \t\t'apiURL'   :'store.settings.edit.supportdata',\n\t\t        \t\t'formType' :7\n\t\t        \t}).success(function(responseData) {\n\t\t            \n\t\t            var requestData = responseData.data;\n\t\t            \n\t\t            appServices.processResponse(responseData, null, function() {\n\n\t\t                if (!_.isEmpty(requestData.store_settings)) {\n\t\t                    __Form.updateModel(scope, requestData.store_settings);\n\t\t                }\n\n\t\t                scope.pageStatus = true;\n\n\t\t            });    \n\n\t\t        });\n\n\t\t       /**\n\t\t          * Submit store settings edit form\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\t\t        \n\t\t        scope.submit = function() {\n\n\t\t            __Form.process({\t\n\t\t        \t\t'apiURL'   :'store.settings.edit',\n\t\t        \t\t'formType' :7\n\t\t        \t}, scope)\n\t\t                .success(function(responseData) {\n\t\t                \t\n\t\t                appServices.processResponse(responseData, null, \n\t\t                    function() {\n\t\t\t\t\t\t\t\n                            if (responseData.data.showRealodButton == true) {\n    \t\t                    __globals.showConfirmation({\n    \t\t\t\t                title               : responseData.data.message,\n    \t\t\t\t                text                : responseData.data.textMessage,\n    \t\t\t\t                type                : \"success\",\n    \t\t                        showCancelButton    : true,\n    \t\t                        confirmButtonClass  : \"btn-success\",\n    \t\t                        confirmButtonText   : __globals.getJSString('reload_text'),\n    \t\t\t\t\t\t\t\tconfirmButtonColor :  \"#337ab7\",\n    \t\t                        closeOnConfirm      : false\n    \t\t\t\t            }, function() {\n\n    \t\t\t\t               location.reload();\n\n    \t\t\t\t            });\n                            }\n\n\t\t                });    \n\n\t\t            });\n\n\t\t        };\n\n\t\t        /**\n\t\t\t\t  * Close dialog\n\t\t\t\t  *\n\t\t\t\t  * @return void\n\t\t\t\t  *---------------------------------------------------------------- */\n\t\t\t\tscope.closeDialog = function() {\n\t\t\t\t    $scope.closeThisDialog();\n\t\t\t\t};\n\t\t}]);\n\n})();","(function() {\n'use strict';\n    \n    /*\n      CssStyleSettingsController setting Related Controllers\n      ---------------------------------------------------------------------- */\n    \n    angular\n        .module('manageApp.CssStyleSettings',        [])\n\n    /** \n     * CssStyleSettingsController for manage custom css\n     *\n     * @inject $scope\n     * @inject __Form\n     * @inject appServices\n     *\n     * @return void\n     *-------------------------------------------------------- */\n    .controller('CssStyleSettingsController', [\n        '$scope',\n        '__Form',\n        'appServices',      \n    function CssStyleSettingsController( $scope, __Form, appServices ) {\n\n        var scope = this;\n\n        scope.pageStatus = false;\n\n        scope  = __Form.setup(scope, 'edit_css_style_configuration', 'editData', {\n            secured : true,\n            modelUpdateWatcher:false,\n            unsecuredFields : ['custom_css']\n        });\n       \n        var cssTextEditorEle  = document.getElementById('custom_css');\n            \n            var $cssTextEditorInstance  = CodeMirror.fromTextArea(cssTextEditorEle, {\n                lineNumbers     : true,\n                mode            : 'css',\n                readOnly        : false,\n                autofocus       : true,\n                lineWrapping    : true\n            });\n\n          __Form.fetch({  \n              'apiURL'   :'store.settings.edit.supportdata',\n              'formType' : 9\n            }).success(function(responseData) {\n              \n              var requestData    = responseData.data;\n\n                appServices.processResponse(responseData, null, function() {\n\n                    var cssStyleData =  requestData.store_settings;\n\n                    __Form.updateModel(scope, cssStyleData);\n                    \n                    if (!_.isEmpty(cssStyleData.custom_css)) {\n                        $cssTextEditorInstance.setValue(cssStyleData.custom_css);\n\n                    }\n                    _.defer(function() {\n                        $cssTextEditorInstance.setCursor({line:0, ch:0});\n                    });\n\n                }); \n                scope.pageStatus = true;\n          });\n\n        /**\n          * Submit privacyPolicy Data\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.submit = function() {\n\n            scope.editData.custom_css = $cssTextEditorInstance.getValue();\n\n            __Form.process({\n               'apiURL'   :'store.settings.edit',\n               'formType' : 9\n            }, scope)\n                .success(function(responseData) {\n\n                appServices.processResponse(responseData, null, function() {\n                    \n                    if (responseData.data.showRealodButton == true) {\n                        __globals.showConfirmation({\n                            title               : responseData.data.message,\n                            text                : responseData.data.textMessage,\n                            type                : \"success\",\n                            showCancelButton    : true,\n                            confirmButtonClass  : \"btn-success\",\n                            confirmButtonText   : __globals.getJSString('reload_text'),\n                            confirmButtonColor :  \"#337ab7\",\n                            closeOnConfirm      : false\n                        }, function() {\n\n                           location.reload();\n\n                        });\n                    }\n                });    \n\n            });\n        };\n\n     }]);\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t  Social setting Related Controllers\n\t  ---------------------------------------------------------------------- */\n\t\n\tangular\n        .module('manageApp.socialSettings', [])\n \n\n        /**\n\t\t * SocialController for update request\n\t\t *\n\t\t * @inject $scope\n\t\t * @inject __DataStore\n\t\t * @inject appServices\n\t\t *\n\t\t * @return void\n\t\t *-------------------------------------------------------- */\n\t\t.controller('SocialController', [\n\t\t    '$scope',\n\t\t    '$state',\n\t\t    'appServices',\n\t\t function SocialController($scope, $state, appServices) {\n\n\t\t    var scope  = this;\n\n\t\t\tappServices.showDialog({}, {\n\t\t\t\ttemplateUrl : __globals.getTemplateURL('store.social')\n\t\t\t}, function(promiseObj) {\n\t\t\t\t$state.go('store_settings_edit');\n\t\t\t});\n\t\t}\n\t\t])\n\n         /**\n\t      * SocialSettingsController for update social store settings\n\t      *\n\t      * @inject __Form\n\t      * @inject appServices\n\t      * \n\t      * @return void\n\t      *-------------------------------------------------------- */\n\n\t\t.controller('SocialSettingsController', [\n\t\t\t'__Form', \n            'appServices',\n            '$scope',\n            function (__Form,appServices,$scope) {\n\n                var scope   = this;\n                scope.pageStatus = false;\n\t\t        scope \t\t= __Form.setup(scope, 'form_social_settings', 'editData', {\n\t\t        \tsecured : true,\n\t\t        \tmodelUpdateWatcher:false\n\t\t        });\n\n\t\t        /**\n\t\t          * Fetch support data\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\n\t\t        __Form.fetch({\t\n\t\t        \t\t'apiURL'   :'store.settings.edit.supportdata',\n\t\t        \t\t'formType' : 10\n\t\t        \t}).success(function(responseData) {\n\t\t            \n\t\t            var requestData = responseData.data;\n\t\t            \n\t\t            appServices.processResponse(responseData, null, function() {\n\n\t\t                if (!_.isEmpty(requestData.store_settings)) {\n\t\t                    __Form.updateModel(scope, requestData.store_settings);\n\t\t                }\n  \t\t\t\t\t\tscope.pageStatus = true;\n\t\t            });    \n\n\t\t        });\n\n\t\t       /**\n\t\t          * Submit store settings edit form\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\t\t        \n\t\t        scope.submit = function() {\n\n\t\t            __Form.process({\t\n\t\t        \t\t'apiURL'   :'store.settings.edit',\n\t\t        \t\t'formType' :10\n\t\t        \t}, scope)\n\t\t                .success(function(responseData) {\n\t\t                \t\n\t\t                appServices.processResponse(responseData, null, \n\t\t                    function() {\n\t\t\t\t\t\t\t\n                            if (responseData.data.showRealodButton == true) {\n    \t\t                    __globals.showConfirmation({\n    \t\t\t\t                title               : responseData.data.message,\n    \t\t\t\t                text                : responseData.data.textMessage,\n    \t\t\t\t                type                : \"success\",\n    \t\t                        showCancelButton    : true,\n    \t\t                        confirmButtonClass  : \"btn-success\",\n    \t\t                        confirmButtonText   : __globals.getJSString('reload_text'),\n    \t\t\t\t\t\t\t\tconfirmButtonColor :  \"#337ab7\",\n    \t\t                        closeOnConfirm      : false\n    \t\t\t\t            }, function() {\n\n    \t\t\t\t               location.reload();\n\n    \t\t\t\t            });\n                            }\n\n\t\t                });    \n\n\t\t            });\n\n\t\t        };\n\n\t\t        /**\n\t\t\t\t  * Close dialog\n\t\t\t\t  *\n\t\t\t\t  * @return void\n\t\t\t\t  *---------------------------------------------------------------- */\n\t\t\t\tscope.closeDialog = function() {\n\t\t\t\t    $scope.closeThisDialog();\n\t\t\t\t};\n\t\t}])\n\n\t\t/**\n\t\t * SocialLoginController for update request\n\t\t *\n\t\t * @inject $scope\n\t\t * @inject __DataStore\n\t\t * @inject appServices\n\t\t *\n\t\t * @return void\n\t\t *-------------------------------------------------------- */\n\t\t.controller('SocialLoginController', [\n\t\t    '$scope',\n\t\t    '$state',\n\t\t    'appServices',\n\t\t function SocialLoginController($scope, $state, appServices) {\n\n\t\t    var scope  = this;\n\n\t\t\tappServices.showDialog({}, {\n\t\t\t\ttemplateUrl : __globals.getTemplateURL('store.social-login')\n\t\t\t}, function(promiseObj) {\n\t\t\t\t$state.go('store_settings_edit');\n\t\t\t});\n\t\t}\n\t\t])\n\t\t/**\n         * SocialLoginSetupSettingsController\n         *\n         * @inject $scope\n         *\n         * @return void\n         *-------------------------------------------------------- */\n        .controller('SocialLoginSetupSettingsController', [\n            '$scope',\n            '$state',\n            '__Form',\n            'appServices',\n        function ConfigurationController($scope, $state, __Form, appServices) {\n\n            var scope   = this;\n\n            scope.pageStatus = false;\n\n            scope  = __Form.setup(scope, 'edit_social_login_configuration', 'editData', {\n                secured : true\n            });\n\n\t\t\t/**\n\t          * Fetch support data\n\t          *\n\t          * @return void\n\t          *---------------------------------------------------------------- */\n\n\t        __Form.fetch({\t\n\t        \t\t'apiURL'   :'store.settings.edit.supportdata',\n\t        \t\t'formType' : 11\n\t        \t}).success(function(responseData) {\n\t            \n\t            var requestData = responseData.data;\n\t            \n\t            appServices.processResponse(responseData, null, function() {\n\n\t                if (!_.isEmpty(requestData.store_settings)) {\n\t                    __Form.updateModel(scope, requestData.store_settings);\n\t                }\n\n\t\t\t\t\tscope.pageStatus = true;\n\n\t            });    \n\n\t        });\n\n            /**\n              * show details of keys\n              *---------------------------------------------------------------- */\n            scope.showDetails = function(keyId) {\n\n                if (keyId == 1) {\n                    scope.editData.isFacebookKeyExist = false;\n                } else if (keyId == 2) {\n                    scope.editData.isGoogleKeyExist   = false;\n                } else if (keyId == 3) {\n                    scope.editData.isTwitterKeyExist  = false;\n                } else if (keyId == 4) {\n                    scope.editData.isGithubKeyExist   = false;\n                }\n            };\n\n            /**\n\t          * Submit store settings edit form\n\t          *\n\t          * @return void\n\t          *---------------------------------------------------------------- */\n\t        \n\t        scope.submit = function() {\n\n\t            __Form.process({\t\n\t        \t\t'apiURL'   :'store.settings.edit',\n\t        \t\t'formType' :11\n\t        \t}, scope)\n\t                .success(function(responseData) {\n\t                \t\n\t                appServices.processResponse(responseData, null, \n\t                    function() {\n\t\t\t\t\t\t\n                        if (responseData.data.showRealodButton == true) {\n\t\t                    __globals.showConfirmation({\n\t\t\t\t                title               : responseData.data.message,\n\t\t\t\t                text                : responseData.data.textMessage,\n\t\t\t\t                type                : \"success\",\n\t\t                        showCancelButton    : true,\n\t\t                        confirmButtonClass  : \"btn-success\",\n\t\t                        confirmButtonText   : __globals.getJSString('reload_text'),\n\t\t\t\t\t\t\t\tconfirmButtonColor :  \"#337ab7\",\n\t\t                        closeOnConfirm      : false\n\t\t\t\t            }, function() {\n\n\t\t\t\t               location.reload();\n\n\t\t\t\t            });\n                        }\n\n\t                });    \n\n\t            });\n\n\t        };\n\n            /**\n              * Close dialog\n              *\n              * @return void\n              *---------------------------------------------------------------- */\n\n            scope.closeDialog = function() {\n                $scope.closeThisDialog();\n            };\n\n        }])\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t  contact setting Related Controllers\n\t  ---------------------------------------------------------------------- */\n\t\n\tangular\n        .module('manageApp.EmailTemplateSettings', \t\t[])\n\n        /**\n         * EmailTemplateListController for add or update email related items\n         *\n         * @inject $scope\n         * @inject __Form\n         * @inject appServices\n         *\n         * @return void\n         *-------------------------------------------------------- */\n        .controller('EmailTemplateListController', [\n            '$scope',\n            '__Form',\n            'appServices',\t\n            '$http',\t\n            '__Utils',\n        function EmailTemplateListController( $scope, __Form, appServices, $http, __Utils ) {\n        \t\tvar scope = this;\n               \n    \t\t  \t/**\n\t          \t* Fetch support data\n\t          \t*\n\t          \t* @return void\n\t          \t*---------------------------------------------------------------- */\n\n\t\t        __Form.fetch({\t\n\t\t        \t\t'apiURL'   :'store.settings.get.email-template.data'\n\t\t        \t}).success(function(responseData) {\n\t\t            \n\t\t            var requestData = responseData.data;\n\t\t            \n\t\t            appServices.processResponse(responseData, null, function() {\n\t\t            \tscope.emailTemplateData = requestData.emailTemplateData;\n\t\t            });    \n\n\t\t        });\n        \t\t\n         \t}\n\n        ])\n\n         /**\n         * EmailTemplateEditController for add or update email related items\n         *\n         * @inject $scope\n         * @inject __Form\n         * @inject appServices\n         *\n         * @return void\n         *-------------------------------------------------------- */\n        .controller('EmailTemplateEditController', [\n            '$scope',\n            '__Form',\n            'appServices',\t\n            '$http',\t\n            '__Utils',\n            '$stateParams',\n            '__DataStore',\n            '$rootScope',\n        function EmailTemplateEditController( $scope, __Form, appServices, $http, __Utils, $stateParams, __DataStore, $rootScope) {\n\n        \t\tvar scope = this;\n                scope.pageStatus = false;\n        \t\tvar emailTemplateId = $stateParams.emailTemplateId;\n\n        \t\tscope  = __Form.setup(scope, 'email_template_form', 'dynamicEmailData', {\n\t        \t\tsecured : true\n\t        \t});\n        \t\n\n\t\t\t\t/**\n\t          \t* Fetch support data\n\t          \t*\n\t          \t* @return void\n\t          \t*---------------------------------------------------------------- */\n\t          \tscope.getEmailTemplateData = function () {\n\n\t\t\t        __Form.fetch({\t\n\t\t\t        \t\t'apiURL':'store.settings.get.edit.email-template.data',\n\t                \t\t'templateId' : emailTemplateId\n\t\t\t        \t}).success(function(responseData) {\n\t\t\t            \n\t\t\t            var requestData = responseData.data.emailTemplateData;\n\t\t\t           \n\t\t\t            appServices.processResponse(responseData, null, function() {\n                            \n\t\t\t\t\t\t\t\tscope.emailTemplateView = requestData.templateViewData;\n\t\t\t\t         \t\tscope.emailTemplateData = requestData;\n\t\t\t\t         \t\tscope.emailSubjectKey \t= requestData.emailSubjectKey;\n\t\t\t\t        \t\tscope.replaceString \t= requestData.replaceString;\n\t\t\t\t\t\t\t\tscope.subjectExists \t= requestData.subjectExists;\n\t\t\t\t\t\t\t\tscope.templateDataExist = requestData.templateDataExist;\n\t\t\t\t\t\t\t\tscope.emailSubject \t\t= requestData.emailSubject;\n\n\t\t\t\t\t        \t// update form\n\t\t\t\t\t        \t__Form.updateModel(scope, requestData);\n\n                                scope.pageStatus = true;\n\t\t\t            });    \n\n\t\t\t        });\n\n\t\t        };\n\t\t\t\t\n\t\t\t\tscope.getEmailTemplateData();\n\n\t\t        //when add new record \n                $scope.$on('template_added_or_updated', function (data) {\n                   \n                    if (data) {\n                        scope.getEmailTemplateData();\n                    }\n\n                });\n\n\t\t        //reset default email template\n\t        \tscope.resetEmailTemlate = function() {\n\t        \t\tscope.dynamicEmailData.templateViewData = scope.emailTemplateView;\n        \t\t\tvar htmlData =  scope.dynamicEmailData.templateViewData;\n\t        \t};\n\n\t        \t//set default email subject\n\t        \tscope.useDefaultEmailSubject = function(emaiSubjectId) {\n\t        \t\t\n\t        \t\tif (scope.subjectExists === true) {\n\t        \t\t\n\t        \t\t\t__DataStore.post({\n\t\t                    'apiURL' \t\t: 'store.settings.email_subject.delete',\n\t\t                    'emaiSubjectId' \t: emaiSubjectId,\n\t\t                })\n\t\t                .success(function(responseData) {\n\t\t                \n\t\t                    var message = responseData.data.message;\n\t               \n\t\t\t                appServices.processResponse(responseData, {});  \n\t\t\t                $rootScope.$broadcast('template_added_or_updated', true);\n\t\t\t                // scope.getEmailTemplateData();\n\t\t                });\n\t        \t\t}\t\n\t        \t\t\n\t        \t};\n\n\t        \t//default template view data\n\t        \tscope.defaultEmailTemlate = function(title) {\n\t        \t\t\n\t        \t\tvar $lwTemlateDeleteConfirmTextMsg = $('#lwTemlateDeleteConfirmTextMsg');\n\n\t\t        \t__globals.showConfirmation({\n\t\t                html                : __globals.getReplacedString($lwTemlateDeleteConfirmTextMsg , \n\t\t                                        '__title__', \n\t\t                                        unescape(title)\n\t\t                                     ),\n\t\t                confirmButtonText   : $lwTemlateDeleteConfirmTextMsg.attr('data-delete-button-text')\n\t\t            }, function() {\n\n\t\t        \t\t__DataStore.post({\n\t\t                    'apiURL' \t: 'store.settings.email_template.delete',\n\t\t                    'emailTemplateId' \t: emailTemplateId,\n\t\t                })\n\t\t                .success(function(responseData) {\n\t\t                \n\t\t                    var message = responseData.data.message;\n                   \n\t\t\t                appServices.processResponse(responseData, {\n\t\t\t                \t\n\t\t\t                        error : function(data) {\n\t\t\t                            __globals.showConfirmation({\n\t\t\t                                title   : $lwTemlateDeleteConfirmTextMsg .attr('data-success-text'),\n\t\t\t                                text    : message,\n\t\t\t                                type    : 'error'\n\t\t\t                            });\n\n\t\t\t                        }\n\t\t\t                    },\n\t\t\t                    function(data) {\n\t\t\t                    \t\n\t\t\t                        __globals.showConfirmation({\n\t\t\t                            title               : responseData.data.message,\n\t\t\t                            text                : responseData.data.textMessage,\n\t\t\t                            type                : \"success\",\n\t\t\t                            showCancelButton    : true,\n\t\t\t                            confirmButtonClass  : \"btn-success\",\n\t\t\t                            confirmButtonText   : $(\"#lwReloadBtnText\")\n\t\t\t    \t\t\t\t\t\t\t\t\t\t\t\t.attr('data-message'),\n\t\t\t                            confirmButtonColor :  \"#337ab7\"\n\t\t\t                        }, function() {\n\n\t\t\t                           location.reload();\n\n\t\t\t                        });\n\t\t\t                       \n\t\t\t                    }\n\n\t\t\t                );  \n\n\t\t                });\n\n\t                });\n\t        \t};\n\n\t        \t//copy text string form dekstop\n\t        \tvar $lwCopyToClipboardJS = new ClipboardJS('.lw-copy-action');\n\n\t\t\t\t$lwCopyToClipboardJS.on('success', function(ele) {\n\n\t\t\t\t\t$(ele.trigger).attr(\"title\", \"Copied!\");\n\n\t\t\t\t\tele.clearSelection();\n\n\t\t\t\t});\n           \t\t\n                /**\n\t              * update email data\n\t              *\n\t              * @return void\n\t              *---------------------------------------------------------------- */\n\t            \n\t            scope.submit = function() {\n\t            \t\n\t                __Form.process({\n\t                    'apiURL'    : 'store.settings.email_template.edit',\n\t                    'emailTemplateId' : emailTemplateId\n\t                }, scope)\n\t                    .success(function(responseData) {\n\n\t                    appServices.processResponse(responseData, null, function() {\n\t                       \n\t                        __globals.showConfirmation({\n\t                            title               : responseData.data.message,\n\t                            text                : responseData.data.textMessage,\n\t                            type                : \"success\",\n\t                            showCancelButton    : true,\n\t                            confirmButtonClass  : \"btn-success\",\n\t                            confirmButtonText   : $(\"#lwReloadBtnText\")\n\t    \t\t\t\t\t\t\t\t\t\t\t\t.attr('data-message'),\n\t                            confirmButtonColor :  \"#337ab7\"\n\t                        }, function() {\n\n\t                           location.reload();\n\n\t                        });\n\t                    });    \n\n\t                });\n\t            };\n        \t\n         \t}\n\n        ])\n        \n        ;\n\n})();","(function() {\n'use strict';\n    \n    /*\n      term & condition setting Related Controllers\n      ---------------------------------------------------------------------- */\n    \n    angular\n        .module('manageApp.emailSettings',[])\n\n        /**\n         * EmailSettingEditController for update request\n         *\n         * @inject $scope\n         * @inject __DataStore\n         * @inject appServices\n         *\n         * @return void\n         *-------------------------------------------------------- */\n        .controller('EmailSettingEditController', [\n            '$scope',\n            '$state',\n            'appServices',\n         function EmailSettingEditController($scope, $state, appServices) {\n\n            var scope  = this;\n\n            appServices.showDialog({}, {\n                templateUrl : __globals.getTemplateURL('store.email')\n            }, function(promiseObj) {\n                $state.go('store_settings_edit');\n            });\n        }\n        ])\n\n         /**\n          * EmailSettingDialogController for update store settings\n          *\n          * @inject __Form\n          * @inject appServices\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('EmailSettingDialogController', [\n            '__Form', \n            'appServices',\n            '$scope',\n            function (__Form, appServices, $scope) {\n\n                var scope   = this;\n                scope.pageStatus = false;\n                scope = __Form.setup(scope, 'form_email_settings', 'editData', {\n                    secured : true,\n                    modelUpdateWatcher:false,\n                    unsecuredFields : ['append_email_message'],\n                });\n\n                scope.uiSwitch      = { size: 'normal'};\n\n                scope.email_driver_config = __globals.getSelectizeOptions({\n                    valueField  : 'id',\n                    labelField  : 'name'\n                });\n\n                /**\n                  * Fetch support data\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                __Form.fetch({  \n                        'apiURL'   :'store.settings.edit.supportdata',\n                        'formType' :15\n                    }).success(function(responseData) {\n                    \n                    var requestData = responseData.data;\n                   \n                    appServices.processResponse(responseData, null, function() {\n\n                        scope.maildrivers = requestData.store_settings.mail_drivers;\n                        var mail_encryption_types = requestData.store_settings.mail_encryption_types;\n\n                        scope.mail_encryption_types = [];\n                        _.forEach(mail_encryption_types, function(encryption, key) {\n                            scope.mail_encryption_types.push({\n                                'id' : key,\n                                'name'   : encryption\n                            });\n                        });\n\n                        if (!_.isEmpty(requestData.store_settings)) {\n                            __Form.updateModel(scope, requestData.store_settings);\n                        }\n\n                        scope.pageStatus = true;\n\n                    });    \n\n                });\n\n               /**\n                  * Submit store settings edit form\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                \n                scope.submit = function() {\n\n                    __Form.process({    \n                        'apiURL'   :'store.settings.edit',\n                        'formType' :15\n                    }, scope)\n                        .success(function(responseData) {\n                            \n                        appServices.processResponse(responseData, null, \n                            function() {\n                            \n                            if (responseData.data.showRealodButton == true) {\n                                __globals.showConfirmation({\n                                    title               : responseData.data.message,\n                                    text                : responseData.data.textMessage,\n                                    type                : \"success\",\n                                    showCancelButton    : true,\n                                    confirmButtonClass  : \"btn-success\",\n                                    confirmButtonText   : __globals.getJSString('reload_text'),\n                                    confirmButtonColor :  \"#337ab7\",\n                                    closeOnConfirm      : false\n                                }, function() {\n\n                                   location.reload();\n\n                                });\n                            }\n\n                        });    \n\n                    });\n\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n        }]);\n\n})();","/*!\n *  Engine      : ManagePaymentEngine\n *  Component   : Order\n----------------------------------------------------------------------------- */\n\n(function( window, angular, undefined ) {\n\n\t'use strict';\n\t\n\t/*\n\t  Manage Payment Engine\n\t  -------------------------------------------------------------------------- */\n\t\n\tangular.module('ManageApp.payment', \t\t[])\n\n\t\t/**\n    \t  * PaymentListController for list of address\n    \t  *\n    \t  * @inject __Utils\n    \t  * @inject __Form\n    \t  * @inject $state\n    \t  * @inject appServices\n    \t  * \n    \t  * @return void\n    \t *-------------------------------------------------------- */\n\n\t\t.controller('PaymentListController', [ \n            '__Utils',\n            '__Form',\n            '$state',\n            'appServices',\n            '$scope',\n            '__DataStore',\n            function (__Utils, __Form , $state, appServices, $scope, __DataStore) {\n\n            \tvar scope   \t= this;\n\n            \tscope = __Form.setup(scope, 'manage_payment_list', 'paymentData');\n\n\n            \tscope.paymentData.duration \t= 5; // today\n\n            \tvar monthFirstDay       = moment().startOf('month')\n                                            .format('YYYY-MM-DD'),\n                    monthLastDay        = moment().endOf('month').format('YYYY-MM-DD'),\n\n                    lastMonthFirstDay   = moment().subtract(1, 'months')\n                                            .startOf('month').format('YYYY-MM-DD'),\n                    lastMonthLastDay    = moment().subtract(1, 'months')\n                                            .endOf('month').format('YYYY-MM-DD'),\n                    \n                    currentWeekFirstDay = moment().startOf('week').format('YYYY-MM-DD'),\n                    currentWeekLastDay  = moment().endOf('week').format('YYYY-MM-DD'),\n\n                    lastWeekFirstDay    = moment().weekday(-7).format('YYYY-MM-DD'),\n                    lastWeekLastDay     = moment().weekday(-1).format('YYYY-MM-DD'),\n                    today               = moment().format('YYYY-MM-DD'),\n                    yesterday           = moment().subtract(1, 'day').format('YYYY-MM-DD'),\n                    lastYearFirstDay    = moment().subtract(1, 'year').startOf('year').format('YYYY-MM-DD'),\n                    lastYearLastDay     = moment().subtract(1, 'year').endOf('year').format('YYYY-MM-DD'),\n                    currentYearFirstDay = moment().startOf('year').format('YYYY-MM-DD'),\n                    currentYearLastDay  = moment().endOf('year').format('YYYY-MM-DD'),\n                    last30Days          = moment().subtract(30, 'day').format('YYYY-MM-DD');\n\n\n                // date and time\n            \tvar today = moment().format('YYYY-MM-DD');\n\n\t\t\t\tscope.paymentData.start = today;\n\t\t\t\tscope.paymentData.end   = today;\n\n\t\t\t\tscope.startDateConfig = {\n\t\t\t\t\ttime    : false\n\t\t\t\t};\n\n\t\t\t\tscope.endDateConfig = {\n\t\t\t\t\tminDate : moment().format('YYYY-MM-DD'),\n\t\t\t\t\ttime    : false\n\t\t\t\t};\n\n\t\t\t\t$scope.$watch('paymentListCtrl.paymentData.start', \n\t                function(currentValue, oldValue) {\n\n\t                var $element = angular.element('#end');\n\t          \n\t                // Check if currentValue exist\n\t                if (_.isEmpty(currentValue)) {\n\t      \n\t                    $element.bootstrapMaterialDatePicker('setMinDate', '');\n\n\t                } else {\n\n\t                    $element.bootstrapMaterialDatePicker('setMinDate', currentValue);\n\t                }\n\t\t\t\t});\n\n\t\t\t\t/**\n\t\t\t\t  * Call when start date updated\n\t\t\t\t  *\n\t\t\t\t  * @param startDate\n\t\t\t\t  *\n\t\t\t\t  * @return void\n\t\t\t\t  *---------------------------------------------------------------- */\n\t\t\t\tscope.startDateUpdated = function(startDate) {\n\n\t\t\t\t\tif (scope.paymentData.duration) {\n\n                        if ( startDate != monthFirstDay \n                            &&  startDate != lastMonthFirstDay \n                            && startDate != currentWeekFirstDay\n                            && startDate != lastWeekFirstDay ) {\n\n                            scope.paymentData.duration = 7; // custom duration\n                        }\n                    }\n\n\t\t\t\t\tscope.paymentData.start = startDate;\n\t\t\t\t};\n\n\t\t\t\t/**\n\t\t\t\t  * Call when start date updated\n\t\t\t\t  *\n\t\t\t\t  * @param endDate\n\t\t\t\t  *\n\t\t\t\t  * @return void\n\t\t\t\t  *---------------------------------------------------------------- */\n\t\t\t\tscope.endDateUpdated = function(endDate) {\n\t\t\t\t\t\n\t\t\t\t\tif (scope.paymentData.duration) {\n\n                        if ( endDate != monthLastDay \n                            &&  endDate != lastMonthLastDay \n                            && endDate != currentWeekLastDay\n                            && endDate != lastWeekLastDay ) {\n\n                            scope.paymentData.duration = 7; // custom duration\n                        }\n                    }\n\n\t\t\t\t\tif (scope.paymentData.start > scope.paymentData.end) { \n\t\t\t\t\t\tscope.paymentData.end = endDate;\n\t\t\t\t\t}\n\t\t\t\t\tscope.paymentData.end = endDate;\n\t\t\t\t};\n\n\t\t\t\t/**\n\t\t\t\t  * When changed in duration start and end date changed\n\t\t\t\t  *\n\t\t\t\t  * @param {number} duration\n\t\t\t\t  *\n\t\t\t\t  * @return void\n\t\t\t\t  *---------------------------------------------------------------- */\n\n\t\t\t\tscope.durationChange = function(duration) {\n\n\t\t\t\t\tif (duration) {\n\n\t\t\t\t\t\tswitch(duration) {\n\n\t\t\t\t\t\t\tcase 1:\n\n\t\t\t\t\t\t\t\tscope.paymentData.start = monthFirstDay;\n\t\t\t\t\t\t\t\tscope.paymentData.end   = monthLastDay\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 2:\n\n\t\t\t\t\t\t\t\tscope.paymentData.start = lastMonthFirstDay;\n\t\t\t\t\t\t\t\tscope.paymentData.end   = lastMonthLastDay\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\n\t\t\t\t\t\t\t\tscope.paymentData.start = currentWeekFirstDay;\n\t\t\t\t\t\t\t\tscope.paymentData.end   = currentWeekLastDay\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\n\t\t\t\t\t\t\t\tscope.paymentData.start = lastWeekFirstDay;\n\t\t\t\t\t\t\t\tscope.paymentData.end   = lastWeekLastDay\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 5:\n\n\t\t\t\t\t\t\t\tscope.paymentData.start = today;\n\t\t\t\t\t\t\t\tscope.paymentData.end   = today\n\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 6:\n\n\t\t\t\t\t\t\t\tscope.paymentData.start = yesterday;\n\t\t\t\t\t\t\t\tscope.paymentData.end   = yesterday\n\n\t\t\t\t\t\t\t\tbreak;\n\n                            case 7:\n\n                                scope.paymentData.start = lastYearFirstDay;\n                                scope.paymentData.end   = lastYearLastDay\n\n                                break;\n\n                            case 8:\n\n                                scope.paymentData.start = currentYearFirstDay;\n                                scope.paymentData.end   = currentYearLastDay\n\n                                break;\n\n                            case 9:\n\n                                scope.paymentData.start = last30Days;\n                                scope.paymentData.end   = today\n\n                                break;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t\tvar dtCartOrderColumnsData = [\n\t\t            {\n\t\t                \"name\"      : \"order_uid\",\n\t\t                \"orderable\" : true,\n\t\t                \"template\"  : \"#orderPaymentColumnUIDTemplate\"\n\t\t            },\n\t\t            {\n\t\t                \"name\"      : 'txn',\n\t\t                \"orderable\" : true,\n\t\t                \"template\"  : \"#orderPaymentTransactionIDTemplate\"\n\t\t            },\n\t\t            {\n\t\t                \"name\"      : 'formattedFee',\n\t\t                \"orderable\" : true,\n\t\t                \"template\"  : \"#orderPaymentFeeTemplate\"\n\t\t            },\n\t\t            {\n\t\t                \"name\"      : 'formattedPaymentOn',\n\t\t                \"orderable\" : true,\n                        \"template\"    : \"#creationDateColumnTemplate\"\n\t\t            },\n\t\t            {\n\t\t                \"name\"      : 'formattedPaymentMethod',\n\t\t                \"orderable\" : true\n\t\t            },\n\t\t            {\n\t\t                \"name\"      : 'totalAmount',\n\t\t                \"orderable\" : true,\n\t\t                \"template\"  : \"#orderPaymentTotalAmountTemplate\"\n\t\t            },\n                    {\n                        \"name\"      : null,\n                        \"orderable\" : false,\n                        \"template\"  : \"#orderPaymentActionTemplate\"\n                    }\n\t\t        ];\n\n\t\t        scope.getPaymentList = function () {\n\n\t\t        \t// distroy instance of datatable\n\t\t\t    \tif (scope.orderPaymentsListDataTable) {\n\t\t\t            scope.orderPaymentsListDataTable.destroy();\n\t\t\t        }\n\n\t\t        \tscope.orderPaymentsListDataTable = __DataStore.dataTable('#managePaymentList', {\n\t\t        \t\turl : {\n\t\t\t                    'apiURL'      : 'manage.order.payment.list',\n\t\t\t                    'startDate'   : scope.paymentData.start, // start date\n\t\t\t                    'endDate'\t  : scope.paymentData.end,   // end date\n\t\t                \t},\n\t\t\t            dtOptions   : {\n\t\t\t                \"searching\" : true,\n                            rowCallback : function(row, data, index) {\n                            \n                                // Highlight sandbox orders \n                                if (data.isTestOrder) {\n                                   $(row).addClass('lw-sandbox-order');\n                                }\n                            }\n\t\t\t            },\n\t\t\t            columnsData : dtCartOrderColumnsData, \n\t\t\t            scope       : $scope\n\t\t\t            \n\t\t\t        }, null, scope.tableData = function(dataTableCollection) {\n\n\t\t\t\t\t\t// Check table status\n\t\t\t        \tscope.tableStatus = dataTableCollection.data;\n\n\t\t\t        \t// Get report duration key value array\n            \t\t\tscope.paymentDuration \t= __globals.generateKeyValueItems(dataTableCollection._options.duration);\n\n\t\t\t        \t// Excel download URL\n\t\t\t        \tscope.excelDownloadURL = dataTableCollection._options.excelDownloadURL;\n\n                        scope.isEmptySanboxRecords = dataTableCollection._options.isEmptySanboxRecords;\n\n\t\t\t        });\n\t\t        }\n\n\t\t        scope.getPaymentList();\n\n\t\t/**\n          * list dialog\n          *\n          * @param number orderID\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.orderDetailsDialog = function(orderID) {\n\n            __DataStore.fetch({\n                    'apiURL'    : 'manage.order.details.dialog',\n                    'orderID'   :  orderID\n                })\n                .success(function(responseData) {\n                \n                    appServices.processResponse(responseData, null, function() {\n                        \n                        var requestData = responseData.data;\n                        \n                        appServices.showDialog({\n                           'orderDetails'    : requestData.orderDetails\n                        },\n                        {\n                            templateUrl : __globals.getTemplateURL(\n                                'order.manage.details'\n                            )\n                        },\n                        function(promiseObj) {\n\n                        \t// Check if order updated\n                            if (_.has(promiseObj.value, 'order_updated') \n                                && promiseObj.value.order_updated === true) {\n                                scope.reloadDT();\n                            }\n\n                        });\n\n                    });    \n\n                });\n\n        };\n\n\n\t\t/**\n          * payment detail dialog\n          * \n          * @param {number} orderID\n          * \n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.paymentDetailsDialog = function (orderPaymentID) {\n\n        \t__DataStore.fetch({\n                'apiURL'    \t\t: 'manage.order.payment.detail.dialog',\n                'orderPaymentID'   \t:  orderPaymentID\n            })\n            .success(function(responseData) {\n\n                scope.orderPaymentData = responseData.data;\n                \n                appServices.processResponse(responseData, null, function() {\n                \t// show payment detail dialog\n                    appServices.showDialog(scope.orderPaymentData,\n                    {\n                        templateUrl : __globals.getTemplateURL(\n                            'order.manage.payment-details-dialog'\n                        )\n                    },\n                    function(promiseObj) {\n\n                    });\n\n                });    \n\n            });\n\n        };\n\n        /**\n          * Delete SandBox Order \n          *\n          * @param number paymentId\n          * @param string orderUid\n          * @param bool isTestOrder\n          *\n          * @return void \n          *---------------------------------------------------------------- */\n\n        scope.deleteSandBoxOrder = function(paymentId, orderUid, isTestOrder) {\n\n            if (isTestOrder == 2) {\n\n                appServices.showDialog(\n                {\n                    paymentId   : paymentId,\n                    orderUid    : orderUid\n                },\n                {\n                    templateUrl : __globals.getTemplateURL(\n                        'order.manage.payment-delete-dialog'\n                    )\n                },\n                function(promiseObj) {\n\n                    // Check if order updated\n                    if (_.has(promiseObj.value, 'payment_deleted') \n                        && promiseObj.value.payment_deleted === true) {\n                        scope.getPaymentList();\n                    }\n\n                });\n            }\n\n            if (isTestOrder == 1) {\n        \n                __globals.showConfirmation({\n                    text: __globals.getJSString('delete_sandbox_payment_msg'),\n                    confirmButtonText  : __globals.getJSString('delete_action_button_text')\n                }, function() {\n\n                    __DataStore.post({\n                        'apiURL'  :'manage.order.payment.delete.sandbox',\n                        'paymentId' : paymentId\n                    })\n                    .success(function(responseData) {\n                    \n                        var message = responseData.data.message;\n                        appServices.processResponse(responseData, {\n                                error : function() {\n\n                                    __globals.showConfirmation({\n                                        title   : __globals.getJSString('confirm_error_title'),\n                                        text    : message,\n                                        type    : 'error'\n                                    });\n\n                                }\n                            },\n                            function() {\n\n                                __globals.showConfirmation({\n                                    title   : __globals.getJSString('confirm_error_title'),\n                                    text    : message,\n                                    type    : 'success'\n                                });\n                                scope.getPaymentList();   // reload datatable\n\n                            }\n                        );    \n\n                    });\n\n                });\n\n            }\n\n        };\n            }\n        ])\n\n})( window, window.angular );","(function() {\n'use strict';\n    \n    /*\n     ManageOrderListController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.orderList', [])\n        .controller('ManageOrderListController',   [\n            '$scope',\n            '__DataStore',\n            'appServices',\n            '$state',\n            '__Auth',\n            '$rootScope',\n            ManageOrderListController \n        ]);\n\n    /**\n      * ManageOrderListController for manage product list\n      *\n      * @inject $scope\n      * @inject __DataStore\n      * @inject appServices\n      * @inject $state\n      * @inject __Auth\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ManageOrderListController($scope, __DataStore, appServices, $state, __Auth, $rootScope) {\n\t \t\n    \tvar scope   \t= this;\n\t \tscope.userInfo \t= __Auth.authInfo().designation;\n\n\t \t// get user id from param if exist\n    \tvar userId = null;\n\n    \tif (!_.isEmpty($state.params.userID)) {\n    \t\tuserId = $state.params.userID;\n    \t}\n\n\t\tvar dtCartOrderColumnsData = [\n            {\n                \"name\"      : \"order_uid\",\n                \"orderable\" : true,\n                \"template\"  : \"#orderColumnIdTemplate\"\n            },\n            {\n                \"name\"      : 'fname',\n                \"orderable\" : true,\n                \"template\"  : \"#userNameColumnIdTemplate\"\n            },\n            {\n                \"name\"      : \"status\",\n                \"orderable\" : true,\n                \"template\"  : \"#orderStatusColumnIdTemplate\"\n            },\n            {\n                \"name\"      : \"paymentStatus\",\n                \"orderable\" : true,\n                \"template\"  : \"#paymentActionColumnTemplate\"\n            },\n            {\n                \"name\"      : \"paymentMethod\",\n                \"template\"  : \"#orderPaymentMethodColumnIdTemplate\"\n            },\n            {\n                \"name\"      : \"creation_date\",\n                \"orderable\" : true,\n                \"template\"  : \"#orderColumnTimeTemplate\"\n            },\n            {\n                \"name\"      : \"total_amount\",\n                \"orderable\" : true,\n                \"template\"  : \"#orderColumnTotalAmountTemplate\"\n            },\n            {\n                \"name\"      : null,\n                \"template\"  : \"#orderActionColumnTemplate\"\n            }\n        ],\n        tabs    = {\n            'active'    : {\n                id      : 'activeTabList',\n                route   : 'orders.active',\n                status  : 1\n            },\n            'cancelled'    : {\n                id      : 'cancelledTabList',\n                route   : 'orders.cancelled',\n                status  : 3\n            },\n            'completed'    : {\n                id      : 'completedTabList',\n                route   : 'orders.complete',\n                status  : 6\n            }\n        };\n\n    \t$('#adminOrderList a').click(function (e) {\n\n        \te.preventDefault();\n        \t\n            var $this       = $(this),\n                tabName     = $this.attr('aria-controls'),\n                selectedTab = tabs[tabName];\n            if (!_.isEmpty(selectedTab)) {\n                $(this).tab('show');\n                scope.getOrders(selectedTab.id, selectedTab.status);\n            }\n\n    \t});\n    \t\t\n\n        /**\n          * get orders list\n          *\n          * @param number tableID\n          * @param number status\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.getOrders   = function(tableID, status) {\n\n            // destroy if existing instatnce available\n            if (scope.cartOrderListDataTable) {\n                scope.cartOrderListDataTable.destroy();\n            }\n\n            scope.cartOrderListDataTable = __DataStore.dataTable('#'+tableID, {\n\t            url : {\n\t    \t\t\t'apiURL' : 'manage.order.list',\n\t\t            'status' : status,\n\t\t            'userID?': userId\n    \t\t\t},\n\t            dtOptions   : {\n\t                \"searching\" : true,\n\t                \"order\"     : [[ 5, \"desc\" ]],\n\t                \"columnDefs\": [\n\t\t\t            {\n\t\t\t                \"targets\"\t: [1],\n\t\t\t                \"visible\"\t: (scope.userInfo === 1) ? true:false,\n\t\t\t                \"searchable\": false,\n\n\t\t\t            }\n\t\t\t        ],\n                    rowCallback : function(row, data, index) {\n                        \n                        // Highlight sandbox orders \n                        if (data.isTestOrder) {\n                           $(row).addClass('lw-sandbox-order');\n                        }\n                    }\n\t            },\n\t            columnsData : dtCartOrderColumnsData, \n\t            scope       : $scope\n\t        }, null, scope.userData = function (dataTableCollection){\n\n\t        \t// get full name of user\n\t        \tscope.userFullName = dataTableCollection._options.userFullName;\n\n                scope.isEmptySanboxRecords = dataTableCollection._options.isEmptySanboxRecords;\n\t        \t\n\t        \t// get title of manage order list\n\t        \tscope.manageOrdersTitle \t= __ngSupport.getText(\n\t\t\t\t\t\t                  __globals.getJSString('manage_order_title'), {\n\t\t\t\t\t\t                        '__name__'     : scope.userFullName,\n\t\t\t\t\t\t                    });\n\n\t        });\n        };\n\n        _.defer(function(text) {\n\t\t\tif ($state.current.name == 'orders.active') {\n\n\t        \tvar selectedTab = $('.nav li a[href=\"#active\"]');\n\t        \t\tselectedTab.triggerHandler('click', true);\n\n\t        } else if ($state.current.name == 'orders.cancelled') {\n\n\t        \tvar selectedTab = $('.nav li a[href=\"#cancelled\"]');\n\t        \t\tselectedTab.triggerHandler('click', true);\n\n\t        } else if ($state.current.name == 'orders.completed') {\n\t        \t\n\t        \tvar selectedTab = $('.nav li a[href=\"#completed\"]');\n\t        \t\tselectedTab.triggerHandler('click', true);\n\t        }\n\t\t\t \n\t\t}, 0);\n        \n\n      /**\n        * When click on active tab so active template open in url\n        *\n        * @param  $event\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        scope.goToActiveTab = function ($event) {\n\t        $event.preventDefault();\n\t        $state.go('orders.active', {'userID' : userId});\n\t    };\n\n\t    /**\n        * When click on cancelled tab so cancelled template open in url\n        *\n        * @param  $event\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n\n\t    scope.goToCancelledTab = function ($event) {\n\t        $event.preventDefault();\n\t        $state.go('orders.cancelled', {'userID' : userId});\n\t    };\n\t\t\n\t\t/**\n        * When click on completed tab so completed template open in url\n        *\n        * @param  $event\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n\n\t    scope.goToCompletedTab = function ($event) {\n\t        $event.preventDefault();\n\t        $state.go('orders.completed', {'userID' : userId});\n\t    };\n\t    \n        /*\n\t     Reload current datatable\n\t    -------------------------------------------------------------------- */\n\t    \n\t    scope.reloadDT = function () {\n\t        __DataStore.reloadDT(scope.cartOrderListDataTable);\n\t    };\n\n        /**\n          * list dialog\n          *\n          * @param number orderID\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.orderDetailsDialog = function(orderID) {\n\n            __DataStore.fetch({\n                    'apiURL'    : 'manage.order.details.dialog',\n                    'orderID'   :  orderID\n                })\n                .success(function(responseData) {\n                \n                    appServices.processResponse(responseData, null, function() {\n                        \n                        var requestData = responseData.data;\n                        \n                        appServices.showDialog({\n                           'orderDetails'    : requestData.orderDetails\n                        },\n                        {\n                            templateUrl : __globals.getTemplateURL(\n                                'order.manage.details'\n                            )\n                        },\n                        function(promiseObj) {\n\n                        \t// Check if order updated\n                            if (_.has(promiseObj.value, 'order_updated') \n                                && promiseObj.value.order_updated === true) {\n                                scope.reloadDT();\n                            }\n\n                        });\n\n                    });    \n\n                });\n\n        };\n\n        /**\n          * log dialog\n          *\n          * @param number orderID\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.logDetailsDialog = function(orderID) {\n\n            __DataStore.fetch({\n                    'apiURL'    : 'manage.order.log.details.dialog',\n                    'orderID'   :  orderID\n                })\n                .success(function(responseData) {\n                \n                appServices.processResponse(responseData, null, function() {\n\n                    var requestData = responseData.data;\n                    \n                    appServices.showDialog({\n                        'order'         : requestData.cartOrder,\n                        'orderLog'      : requestData.orderLog\n                    },\n                    {\n                        templateUrl : __globals.getTemplateURL(\n                            'order.manage.log'\n                        )\n                    },\n                    function(promiseObj) {\n\t\t\t\t\t\n\t\t\t\t\t});\n\n                });    \n\n            });\n\n        };\n\n\n\n        /**\n          * update order dialog\n          * \n          * @param orderID\n          * @param orderUID\n          * \n          * @return void\n          *---------------------------------------------------------------- */\n        scope.updateDialog = function(orderID, orderUID) {\n\n            __DataStore.fetch({\n                    'apiURL'    : 'manage.order.update.support.data',\n                    'orderID'   :  orderID\n                })\n                .success(function(responseData) {\n                \t\n                    var message = responseData.data\n\n                    appServices.processResponse(responseData, null, function() {\n                    \t\n                        appServices.showDialog({\n                            'order'   : responseData.data.order,\n                            'orderID' : orderID\n                        },\n                        {\n                            templateUrl : __globals.getTemplateURL(\n                                'order.manage.update'\n                            )\n                        },\n                        function(promiseObj) {\n                        \t// Check if order updated\t\t\n                        \tif (_.has(promiseObj.value, 'order_updated') \n\t\t\t                    && promiseObj.value.order_updated === true) {\n\n                        \t\t// Get order status and Payment status of order\n                        \t\tscope.orderStatus \t= promiseObj.value.updateData.status;\n\t\t\t\t        \t\tscope.paymentStatus\t= promiseObj.value.updateData.paymentStatus;\n\n\t\t\t\t        \t\tif (scope.orderStatus == 3 // Cancelled\n\t\t\t\t        \t\t\t&& scope.paymentStatus == 2) { // Completed\n\n\t\t\t\t        \t\t\tscope.showConfirmationOnOrderUpdate(orderID, orderUID);\n\t\t\t\t        \t\t}\n\n\t\t\t\t        \t\tscope.reloadDT();\n\t\t\t\t        \t}\n                            \n                        });\n\n                    });    \n\n                });\n\n        };\n\n        /**\n          * Show confirmation on order Update\n          * \n          * @param orderID\n          * @param orderUID\n          * \n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.showConfirmationOnOrderUpdate = function (orderID, orderUID) {\n\n        \t// Show confirmation message on succefful update\n        \t__globals.showConfirmation({\n        \t \t\ttitle\t: __globals.getJSString('order_refund_string'),\n\t                text \t: __globals.getJSString\n\t                \t\t\t('order_refund_change_status_string'),\n\t                type                : \"success\",\n\t                confirmButtonClass  : \"btn-success\",\n\t\t\t\t\tconfirmButtonColor :  \"#337ab7\",\n\t                confirmButtonText   : __globals.getJSString('order_payment_confirm_text')\n\t            },\n\t            function(data) {\n\t            \t// when update successfully then open update dialog\n\t            \tscope.reloadDT();\n\t            \tscope.refundPaymentDialog(orderID, orderUID);\n\t            }\n\t        );\n        };\n\n        /**\n          * Refund order payment\n          * \n          * @param orderID\n          * @param orderUID\n          * \n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.refundPaymentDialog = function (orderID, orderUID) {\n\n        \t__DataStore.fetch({\n        \t\t'apiURL'\t: 'manage.order.payment.refund.detail.dialog',\n        \t\t'orderID'\t: orderID\n        \t})\n        \t.success(function(responseData) {\n        \t\tvar message = responseData.data;\n\n        \t\tappServices.processResponse(responseData, null, function() {\n        \t\t\t\n        \t\t\tappServices.showDialog(\n        \t\t\t{\n        \t\t\t\torderDetails \t\t: responseData.data,\n        \t\t\t\torderUID \t\t\t: orderUID\n        \t\t\t}, \n        \t\t\t{\n        \t\t\t\ttemplateUrl : __globals.getTemplateURL('order.manage.refund-dialog')\n        \t\t\t},\n        \t\t\tfunction(promiseObj) {\n        \t\t\t\t// Check if order updated\t\t\n                    \tif (_.has(promiseObj.value, 'order_updated') \n\t\t                    && promiseObj.value.order_updated === true) {\n\t\t\t        \t\t\n\t\t\t        \t\tscope.reloadDT();\n\t\t\t        \t}\n        \t\t\t})\n        \t\t})\n        \t})\n        }\n\n\n        /**\n          * payment detail dialog\n          * \n          * @param {number} orderID\n          * \n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.paymentDetailsDialog = function (orderPaymentID) {\n\n        \t__DataStore.fetch({\n                'apiURL'    \t\t: 'manage.order.payment.detail.dialog',\n                'orderPaymentID'   \t:  orderPaymentID\n            })\n            .success(function(responseData) {\n\n                scope.orderPaymentData = responseData.data;\n                \n                appServices.processResponse(responseData, null, function() {\n                \t// show payment detail dialog\n                    appServices.showDialog(scope.orderPaymentData,\n                    {\n                        templateUrl : __globals.getTemplateURL(\n                            'order.manage.payment-details-dialog'\n                        )\n                    },\n                    function(promiseObj) {\n\n                    });\n\n                });    \n\n            });\n\n        }\n\n        /**\n          * Update payment detail dialog\n          * \n          * @param {number} orderID\n          * \n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.updatePaymentDetailsDialog = function (orderID) {\n        \t\n        \t__DataStore.fetch({\n                'apiURL'    : 'manage.order.payment.update.detail.dialog',\n                'orderID'   :  orderID\n            })\n            .success(function(responseData) {\n\n                scope.orderData = responseData.data;\n                \n                appServices.processResponse(responseData, null, function() {\n                \t// show payment detail dialog\n                    appServices.showDialog(scope.orderData,\n                    {\n                        templateUrl : __globals.getTemplateURL(\n                            'order.manage.update-payment-dialog'\n                        )\n                    },\n                    function(promiseObj) {\n\n                    \t// Check if order updated\n\t                    if (_.has(promiseObj.value, 'order_updated') \n\t                        && promiseObj.value.order_updated === true) {\n\n\t                    \t// Show confirmation message on succefful update\n\t                    \t __globals.showConfirmation({\n\t                    \t \t\ttitle\t: __globals.getJSString('order_payment_update_string'),\n\t\t\t\t\t                text \t: __globals.getJSString\n\t\t\t\t\t                \t\t\t('order_payment_change_status_string'),\n\t\t\t\t\t                type                : \"success\",\n\t\t\t\t\t                confirmButtonClass  : \"btn-success\",\n\t\t\t\t\t\t\t\t\tconfirmButtonColor :  \"#337ab7\",\n\t\t\t\t\t                confirmButtonText   : __globals.getJSString('order_payment_confirm_text')\n\t\t\t\t\t            },\n\t\t\t\t\t            function(data) {\n\t\t\t\t\t            \t// when update successfully then open update dialog\n\t\t\t\t\t            \tscope.reloadDT();\n\t\t\t\t\t            \tscope.updateDialog(orderID);\n\t\t\t\t\t            }\n\t\t\t\t\t        );\n\n\t                    \tscope.reloadDT();\n\t                    }\n\n                    });\n\n                });    \n\n            });\n\n        };\n\n        /**\n          * Contact user dialog\n          * \n          * @param {number} orderID\n          * \n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.contactUserDialog = function (orderID) {\n\n        \t__DataStore.fetch({\n        \t\t'apiURL' : 'manage.order.get.user.details',\n        \t\t'orderID': orderID\n        \t})\n        \t.success(function(responseData) {\n\n        \t\tscope.userData = responseData.data;\n        \t\t\n        \t\tappServices.processResponse(responseData, null, function () {\n\n        \t\t\tappServices.showDialog(responseData.data,\n                    {\n                        templateUrl : __globals.getTemplateURL(\n                            'order.manage.contact-user'\n                        )\n                    },\n                    function(promiseObj) {\n\n                    });\n        \t\t});\n        \t});\n        };\n\n        /**\n          * Delete SandBox Order \n          *\n          * @param number orderId\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.deleteSandBoxOrder = function(orderId, isTestOrder, orderUid) {\n\n            // Check if delete order is not test order\n            if (isTestOrder == 2) {\n                appServices.showDialog(\n                {\n                    orderId     : orderId,\n                    orderUid    : orderUid\n                },\n                {\n                    templateUrl : __globals.getTemplateURL(\n                        'order.manage.order-delete-dialog'\n                    )\n                },\n                function(promiseObj) {\n\n                    // Check if order updated\n                    if (_.has(promiseObj.value, 'order_deleted') \n                        && promiseObj.value.order_deleted === true) {\n                        scope.reloadDT();\n                    }\n\n                });\n            }\n\n            // Check if test order delete or not\n            if (isTestOrder == 1) {\n                \n                __globals.showConfirmation({\n                    text: __globals.getJSString('delete_sandbox_order_msg'),\n                    confirmButtonText  : __globals.getJSString('delete_action_button_text')\n                }, function() {\n\n                    __DataStore.post({\n                        'apiURL'        : 'manage.order.sandbox_order.delete',\n                        'orderId'       : orderId,\n                        'isTestOrder'   : 1\n                    })\n                    .success(function(responseData) {\n                    \n                        var message = responseData.data.message;\n                        appServices.processResponse(responseData, {\n                                error : function() {\n\n                                    __globals.showConfirmation({\n                                        title   : __globals.getJSString('confirm_error_title'),\n                                        text    : message,\n                                        type    : 'error'\n                                    });\n\n                                }\n                            },\n                            function() {\n\n                                __globals.showConfirmation({\n                                    title   : __globals.getJSString('confirm_error_title'),\n                                    text    : message,\n                                    type    : 'success'\n                                });\n                                scope.reloadDT();   // reload datatable\n\n                            }\n                        );    \n\n                    });\n\n                });\n\n            }\n\n        };\n\n\t }\n})();","(function() {\n'use strict';\n    \n    /*\n     ManageUpdateOrderController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.orderUpdate', [])\n        .controller('ManageUpdateOrderController',   [\n            '$scope', \n            '__Form',\n            'appServices',\n            ManageUpdateOrderController \n        ]);\n\n    /**\n      * ManageUpdateOrderController for update order status\n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n            \n\n    function ManageUpdateOrderController($scope, __Form, appServices) {\n\n        var scope  = this;\n\t\t\tscope  = __Form.setup(scope, 'form_order_update', 'orderData');\n\n\t\t\tscope.ngDialogData = $scope.ngDialogData.order;\n\t\t\t\n           \tscope.orderData = {\n           \t\t'statusName' \t\t\t: scope.ngDialogData.statusName,\n           \t\t'currentPaymentStatus'\t: scope.ngDialogData.currentPaymentStatus,\n           \t\t'checkMail'\t\t\t\t: true\n           \t};\n           \n            scope.statuses  = scope.ngDialogData.statusCode;\n\n           \tscope.updateDialogTitle \t= __ngSupport.getText(\n\t\t\t\t\t\t                  __globals.getJSString('update_order_dialog_title_text'), {\n\t\t\t\t\t\t                        '__name__'     : scope.ngDialogData.name,\n\t\t\t\t\t\t                        '__orderUID__' : scope.ngDialogData.orderUID\n\t\t\t\t\t\t                    });\n\n\t\t\tscope = __Form.updateModel(scope, scope.orderData);\n\n\n            /**\n\t\t  \t  * process update order\n\t\t  \t  *\n\t\t  \t  * @return void\n\t\t  \t  *---------------------------------------------------------------- */\n\t\t\tscope.update = function() {\n\n\t\t \t\t// post form data\n\t\t \t\t__Form.process({\n\t\t\t\t\t\t'apiURL'   :'manage.order.update',\n\t\t\t\t\t\t'orderID'  : scope.ngDialogData._id \n\t\t\t\t\t}, scope ).success( function( responseData ) {\n\t\t\t      \t\t\n\t\t\t\t\tappServices.processResponse(responseData, function(reactionCode) {\n\n\t\t                if (reactionCode === 1) {\n\t\t                \t// close dialog\n\t\t      \t\t\t\t$scope.closeThisDialog( { order_updated : true, updateData : scope.ngDialogData } );\n\t\t                }\n\n\t\t            });\n\n\t\t\t    });\n\n\t\t  \t};\n\n\t\t\t/**\n\t\t  \t  * Close dialog and return promise object\n\t\t  \t  *\n\t\t  \t  * @return void\n\t\t  \t  *---------------------------------------------------------------- */\n\t  \t  \tscope.closeDialog = function() {\n\t  \t  \t\t$scope.closeThisDialog();\n\t  \t  \t};\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManageCancelOrderController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.orderCancel', [])\n        .controller('ManageCancelOrderController',   [\n            '$scope', \n            '__Form',\n            'appServices',\n            ManageCancelOrderController \n        ]);\n\n    /**\n      * ManageCancelOrderController for update order status\n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n            \n\n    function ManageCancelOrderController($scope, __Form, appServices) {\n\n       var scope  = this;\n\t\t\tscope = __Form.setup(scope, 'form_order_cancel', 'orderData');\n\t\t\tscope.ngDialogData = $scope.ngDialogData;\n\t\t\tscope = __Form.updateModel(scope, scope.orderData);\n\t\t\t\n\t\t\t// Make a object for when order cancelled then show confirmation and show \n\t\t\t// refund payment dialog to amin\n\t\t\tscope.updateData = {\n\t\t\t\tapproveStatus : scope.orderData,\n\t\t\t\tpaymentStatus : scope.ngDialogData.order.paymentStatus\n\t\t\t};\n\n            /**\n\t\t  \t  * process cancel order\n\t\t  \t  *\n\t\t  \t  * @return void\n\t\t  \t  *---------------------------------------------------------------- */\n\t\t\tscope.update = function(status) {\n\t\t\t\tscope.orderData.approveStatus = status;\n\t\t \t\t// post form data\n\t\t \t\t__Form.process({\n\t\t\t\t\t\t'apiURL'   :'manage.order.cancel',\n\t\t\t\t\t\t'orderID'  : scope.ngDialogData.order._id \n\t\t\t\t\t}, scope ).success( function( responseData ) {\n\t\t\t\t\t\t\n\t\t\t\t\tappServices.processResponse(responseData, function(reactionCode) {\n\n\t\t                if (reactionCode === 1) {\n\t\t                \t// close dialog\n\t\t      \t\t\t\t$scope.closeThisDialog( { order_updated : true, orderStatus : scope.updateData } );\n\t\t      \t\t\t\t\n\t\t                }\n\n\t\t            });\n\n\t\t\t    });\n\n\t\t  \t};\n\n\t\t\t/**\n\t\t  \t  * Close dialog and return promise object\n\t\t  \t  *\n\t\t  \t  * @return void\n\t\t  \t  *---------------------------------------------------------------- */\n\t  \t  \tscope.closeDialog = function() {\n\t  \t  \t\t$scope.closeThisDialog();\n\t  \t  \t};\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManageOrderDialogController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.orderDialogList', [])\n        .controller('ManageOrderDialogController',   [\n            '$scope', \n            '__Form',\n            ManageOrderDialogController \n        ]);\n\n    /**\n      * ManageOrderDialogController for manage product list\n      *\n      * @inject $scope\n      * @inject __Form\n      * \n      * @return void\n      *-------------------------------------------------------- */\n            \n\n    function ManageOrderDialogController($scope, __Form) {\n\n       var scope   = this;\n       \n       \t\tscope.discountStatus = false;\n\n\t        scope = __Form.setup(scope, 'cart_order_dialog_form', 'cartData', {\n\t            secured : true\n\t        });\n\n       \t\tscope.ngDialogData   = $scope.ngDialogData;\n                    \n            var requestedData \t\t= scope.ngDialogData.orderDetails.data;\n        \t\n\t        scope.billingAddress   \t= requestedData.address.billingAddress;\n\t        scope.shippingAddress   = requestedData.address.shippingAddress;\n\t        scope.sameAddress   \t= requestedData.address.sameAddress;\n\n\t        scope.user\t\t\t\t= requestedData.user;\n\t        scope.order\t\t\t\t= requestedData.order;\n\t        scope.orderProducts\t\t= requestedData.orderProducts;\n\t        scope.coupon\t\t\t= requestedData.coupon;\n\t        scope.taxes\t\t\t\t= requestedData.taxes;\n\t        scope.shipping\t\t\t= requestedData.shipping;\n\n\t        scope.pageStatus = true; \n\n            \n        /**\n          * Close dialog and return promise object\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n    \tscope.close = function() {\n            $scope.closeThisDialog();\n        }\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManageOrderLogController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.orderLogList', [])\n        .controller('ManageOrderLogController',   [\n            '$scope', \n            '__Form',\n            ManageOrderLogController \n        ]);\n\n    /**\n      * ManageOrderLogController for manage product list\n      *\n      * @inject $scope\n      * @inject __Form\n      * \n      * @return void\n      *-------------------------------------------------------- */\n            \n\n    function ManageOrderLogController($scope, __Form) {\n\n       var scope   = this;\n\n        scope = __Form.setup(scope, 'cart_order_log_dialog_form', 'cartData', {\n            secured : true\n        });\n            \n            scope.ngDialogData   = $scope.ngDialogData;\n            scope.order          = scope.ngDialogData.order;\n            scope.orderLog       = scope.ngDialogData.orderLog;\n            \n\n            \n        /**\n          * Close dialog and return promise object\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.close = function() {\n            $scope.closeThisDialog();\n        }\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManagePaymentDetailsController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.paymentDetailsDialog', [])\n        .controller('ManagePaymentDetailsController',   [\n            '$scope', \n            'appServices',\n            ManagePaymentDetailsController \n        ]);\n\n    /**\n      * ManagePaymentDetailsController for order payment details\n      *\n      * @inject $scope\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n            \n\n    function ManagePaymentDetailsController($scope, appServices) {\n\n        var scope  = this;\n\n\t\t\t// get ng-dialog data\n\t\t\tscope.ngDialogData = $scope.ngDialogData;\n\n\t\t\t// get payment details\n\t\t\tscope.paymentDetail = scope.ngDialogData.orderPaymentDetails;\n\n\t\t\t/**\n\t\t  \t  * Raw data dialog\n\t\t  \t  *\n\t\t  \t  * @param rawData\n\t\t  \t  *\n\t\t  \t  * @return void\n\t\t  \t  *---------------------------------------------------------------- */\n\t\t\tscope.rawDataDialog = function (rawData) {\n\n\t\t\t\tappServices.showDialog(\n\t\t\t\t\t{\n\t\t\t\t\t\trawDetail : rawData\n\t\t\t\t\t},\n                    {\n                        templateUrl : __globals.getTemplateURL(\n                            'order.manage.raw-data-dialog'\n                        )\n                    },\n                    function(promiseObj) {\n\n                    });   \n\t\t\t}\n\n\t\t\t/**\n\t\t  \t  * Close dialog and return promise object\n\t\t  \t  *\n\t\t  \t  * @return void\n\t\t  \t  *---------------------------------------------------------------- */\n\t  \t  \tscope.closeDialog = function() {\n\t  \t  \t\t$scope.closeThisDialog();\n\t  \t  \t};\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManageRawDataController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.rawDataDialog', [])\n        .controller('ManageRawDataController',   [\n            '$scope', \n            'appServices',\n            ManageRawDataController \n        ]);\n\n    /**\n      * ManageRawDataController for payment order raw data\n      *\n      * @inject $scope\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n            \n\n    function ManageRawDataController($scope, appServices) {\n\n        var scope  = this;\n\n\t\t\t// get raw data\n\t\t\tscope.ngDialogData  = $scope.ngDialogData;\n\t\t\tscope.rawData = scope.ngDialogData.rawDetail;\n\t\t\t\n            // Check if pass variable is object or not \n            scope.isObject = function(rawData) {\n                return _.isObject(rawData);\n            };\n                    \n\t\t\t/**\n\t\t  \t  * Close dialog and return promise object\n\t\t  \t  *\n\t\t  \t  * @return void\n\t\t  \t  *---------------------------------------------------------------- */\n\t  \t  \tscope.closeDialog = function() {\n\t  \t  \t\t$scope.closeThisDialog();\n\t  \t  \t};\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManageUpdateOrderPaymentController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.orderPaymentUpdate', [])\n        .controller('ManageUpdateOrderPaymentController',   [\n            '$scope', \n            '__Form',\n            'appServices',\n            ManageUpdateOrderPaymentController \n        ]);\n\n    /**\n      * ManageUpdateOrderPaymentController for update order payment detail\n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n            \n\n    function ManageUpdateOrderPaymentController($scope, __Form, appServices) {\n\n        var scope  = this;\n\t\t\tscope  = __Form.setup(scope, 'form_order_payment_update', 'orderData');\n\t\t\tscope.ngDialogData = $scope.ngDialogData;\n\t\t\t\n\t\t\t// get order details\n\t\t\tscope.orderDetails \t\t= scope.ngDialogData.orderDetails;\n\n\t\t\t// get list of payment method\n\t\t\tscope.paymentMethodList = scope.ngDialogData.paymentMethod;\n\n\t\t\tscope = __Form.updateModel(scope, scope.orderDetails);\n\n            /**\n\t\t  \t  * process update order\n\t\t  \t  *\n\t\t  \t  * @return void\n\t\t  \t  *---------------------------------------------------------------- */\n\t\t\tscope.update = function() {\n\n\t\t \t\t// post form data\n\t\t \t\t__Form.process({\n\t\t\t\t\t\t'apiURL'   :'manage.order.payment.update.process',\n\t\t\t\t\t\t'orderID'  : scope.orderDetails.orderID \n\t\t\t\t\t}, scope ).success( function( responseData ) {\n\t\t\t      \t\t\n\t\t\t\t\tappServices.processResponse(responseData, null, function() {\n\t\t\t\t\t\t$scope.closeThisDialog({order_updated : true});\n\t\t            });\n\n\t\t\t    });\n\n\t\t  \t};\n\n\t\t\t/**\n\t\t  \t  * Close dialog\n\t\t  \t  *\n\t\t  \t  * @return void\n\t\t  \t  *---------------------------------------------------------------- */\n\t  \t  \tscope.closeDialog = function() {\n\t  \t  \t\t$scope.closeThisDialog();\n\t  \t  \t};\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManageRefundOrderPaymentController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.orderPaymentRefund', [])\n        .controller('ManageRefundOrderPaymentController',   [\n            '$scope', \n            '__Form',\n            'appServices',\n            ManageRefundOrderPaymentController \n        ]);\n\n    /**\n      * ManageRefundOrderPaymentController for refund order payment\n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n            \n\n    function ManageRefundOrderPaymentController($scope, __Form, appServices) {\n\n        var scope  = this;\n\t\t\tscope  = __Form.setup(scope, 'form_order_payment_refund', 'orderData');\n\t\t\t\n\t\t\t// get order payment data for refund detail dialog\n\t\t\tscope.ngDialogData   \t = $scope.ngDialogData;\n\t\t\t\n\t\t\tscope.paymentDetails \t = scope.ngDialogData.orderDetails.orderPaymentDetails;\n\t\t\tscope.paymentMethodList  = scope.ngDialogData.orderDetails.paymentMethodList;\n\t\t\tscope.paymentDetails.orderUID = scope.ngDialogData.orderUID;\n\t\t\t\n\t\t\tscope = __Form.updateModel(scope, scope.paymentDetails);\n\n            /**\n\t\t  \t  * process update order\n\t\t  \t  *\n\t\t  \t  * @return void\n\t\t  \t  *---------------------------------------------------------------- */\n\t\t\tscope.update = function() {\n\n\t\t \t\t// post form data\n\t\t \t\t__Form.process({\n\t\t\t\t\t\t'apiURL'   :'manage.order.payment.refund.process',\n\t\t\t\t\t\t'orderID'  : scope.paymentDetails.orderID \n\t\t\t\t\t}, scope)\n\t\t \t\t.success( function( responseData ) {\n\t\t\t      \t\t\n\t\t\t\t\tappServices.processResponse(responseData, null, function() {\n\t\t\t\t\t\t$scope.closeThisDialog({order_updated : true});\n\t\t            });\n\n\t\t\t    });\n\n\t\t  \t};\n\n\t\t\t/**\n\t\t  \t  * Close dialog\n\t\t  \t  *\n\t\t  \t  * @return void\n\t\t  \t  *---------------------------------------------------------------- */\n\t  \t  \tscope.closeDialog = function() {\n\t  \t  \t\t$scope.closeThisDialog();\n\t  \t  \t};\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManageContactUserController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.orderContact', [])\n        .controller('ManageContactUserController',   [\n            '__Form', \n            'appServices',\n            '$scope',\n            ManageContactUserController \n        ]);\n\n    /**\n      * ManageContactUserController handle register form & send request to server\n      * to submit form data. \n      *\n      * @inject __Form\n      * @inject $state\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ManageContactUserController(__Form, appServices, $scope) {\n\n        var scope   = this;\n       \n        scope = __Form.setup(scope, 'manage_contact_form', 'userData');\n        // get ng dialog data\n        scope.ngDialogData = $scope.ngDialogData;\n      \t// get user information and order UID\n        scope.userData.fullName \t= scope.ngDialogData.fullname;\n        scope.userData.email\t   \t= scope.ngDialogData.email;\n        scope.userData.id \t\t\t= scope.ngDialogData.id;\n        scope.userData.orderUID \t= scope.ngDialogData.orderUID;\n\n        scope   = __Form.updateModel(scope, scope.userData)\n\n        /**\n          * Submit register form action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        \n        scope.submit = function() {\n\n        \t __Form.process('manage.order.user.contact', scope)\n                .success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n                \t\n                \t$scope.closeThisDialog();\n                });    \n\n            });\n\n        };\n\n        /**\n  \t  \t* Close dialog\n  \t  \t*\n  \t  \t* @return void\n  \t  \t*---------------------------------------------------------------- */\n\t\tscope.closeDialog = function() {\n  \t  \t\t$scope.closeThisDialog();\n  \t  \t};\n\n    };\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManageOrderDeleteController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.orderDelete', [])\n        .controller('ManageOrderDeleteController',   [\n            '$scope',\n            '__Form',\n            'appServices',\n            '$state',\n            '__Auth',\n            '$rootScope',\n            ManageOrderDeleteController \n        ]);\n\n    /**\n      * ManageOrderDeleteController for manage product list\n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * @inject $state\n      * @inject __Auth\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ManageOrderDeleteController($scope, __Form, appServices, $state, __Auth, $rootScope) {\n        \n        var scope       = this;\n\n        scope = __Form.setup(scope, 'form_manage_order_delete', 'orderData', {\n            secured : true\n        });\n\n        scope.ngDialogData  = $scope.ngDialogData;\n        scope.orderUid      = scope.ngDialogData.orderUid;\n        \n        /**\n          * Submit delete action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.submit = function() {\n\n            __Form.process({\n                    'apiURL'      : 'manage.order.delete',\n                    'orderId'     : scope.ngDialogData.orderId\n                }, scope).success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n\n                    // close dialog\n                    $scope.closeThisDialog({order_deleted : true});\n                    \n\n                });\n\n            });\n        };\n\n        /**\n          * Close dialog and return promise object\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.closeDialog = function() {\n            $scope.closeThisDialog();\n        }\n    }\n\n})();","(function() {\n'use strict';\n    \n    /*\n     ManagePaymentDeleteController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.paymentDelete', [])\n        .controller('ManagePaymentDeleteController',   [\n            '$scope',\n            '__Form',\n            'appServices',\n            '$state',\n            '__Auth',\n            '$rootScope',\n            ManagePaymentDeleteController \n        ]);\n\n    /**\n      * ManagePaymentDeleteController for delete payments\n      *\n      * @inject $scope\n      * @inject __Form\n      * @inject appServices\n      * @inject $state\n      * @inject __Auth\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function ManagePaymentDeleteController($scope, __Form, appServices, $state, __Auth, $rootScope) {\n        \n        var scope       = this;\n\n        scope = __Form.setup(scope, 'form_manage_payment_delete', 'paymentData', {\n            secured : true\n        });\n\n        scope.ngDialogData  = $scope.ngDialogData;\n        scope.orderUid      = scope.ngDialogData.orderUid;\n        \n        /**\n          * Submit delete action\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.submit = function() {\n\n            __Form.process({\n                    'apiURL'      : 'manage.order.payment.delete',\n                    'paymentId'   : scope.ngDialogData.paymentId\n                }, scope).success(function(responseData) {\n                    \n                appServices.processResponse(responseData, null, function() {\n\n                    // close dialog\n                    $scope.closeThisDialog({payment_deleted : true});\n                    \n\n                });\n\n            });\n        };\n\n        /**\n          * Close dialog and return promise object\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n\n        scope.closeDialog = function() {\n            $scope.closeThisDialog();\n        }\n    }\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t DashboardController\n\t-------------------------------------------------------------------------- */\n\t\n\tangular\n        .module('DashboardApp.main', [])\n        .controller('DashboardController', \t[ \n            '$scope',\n            'appServices',\n            '__DataStore',\n            '$rootScope',\n            '__Form',\n            DashboardController \n\t \t]);\n\n\t/**\n\t * DashboardController for admin \n\t *\n\t * @inject $scope\n\t * @inject appServices\n\t * @inject __DataStore\n\t * @inject $rootScope\n\t * \n\t * @return void\n\t *-------------------------------------------------------- */\n\n\t function DashboardController($scope, appServices, __DataStore, $rootScope, __Form) {\n\n\t \tvar scope \t= this,\n        productPieChart = null,\n        orderPieChart = null,\n        brandPieChart = null;\n\n\t\tscope.pageStatus = false;\n        scope.duration = 5; // current year\n\n        scope = __Form.setup(scope, 'dashboard_form', 'dashboardFilterData');\n\n        // set date\n        scope.monthFirstDay       = moment().startOf('month')\n                                    .format('YYYY-MM-DD');\n\n        scope.monthLastDay        = moment().endOf('month')\n                                    .format('YYYY-MM-DD');\n\n\n        scope.lastMonthFirstDay   = moment().subtract(1, 'months')\n                                    .startOf('month')\n                                    .format('YYYY-MM-DD');\n\n        scope.lastMonthLastDay    = moment().subtract(1, 'months')\n                                    .endOf('month')\n                                    .format('YYYY-MM-DD');\n            \n        scope.currentWeekFirstDay = moment().startOf('week')\n                                            .format('YYYY-MM-DD');\n\n        scope.currentWeekLastDay  = moment().endOf('week')\n                                            .format('YYYY-MM-DD');\n\n\n        scope.lastWeekFirstDay    = moment().weekday(-7)\n                                            .format('YYYY-MM-DD');\n\n        scope.lastWeekLastDay     = moment().weekday(-1)\n                                            .format('YYYY-MM-DD');\n\n        scope.today               = moment().format('YYYY-MM-DD');\n\n        scope.yesterday           = moment().subtract(1, 'day')\n                                            .format('YYYY-MM-DD');\n\n        scope.lastYearFirstDay    = moment().subtract(1, 'year').startOf('year').format('YYYY-MM-DD');\n\n        scope.lastYearLastDay     = moment().subtract(1, 'year').endOf('year').format('YYYY-MM-DD');\n\n        scope.currentYearFirstDay = moment().startOf('year').format('YYYY-MM-DD');\n\n        scope.currentYearLastDay  = moment().endOf('year').format('YYYY-MM-DD');\n\n        scope.last30Days          = moment().subtract(30, 'day').format('YYYY-MM-DD');\n\n        // date and time\n        var today = moment().format('YYYY-MM-DD');\n\n        scope.dashboardFilterData.start = today;\n        scope.dashboardFilterData.end   = today;\n\n\n        /**\n            * get date and time according to duration \n            *\n            * @param duration\n            *\n            *---------------------------------------------------------------- */\n        scope.durationChange = function (duration) {\n            \n            if (duration == 1) { // current month\n\n                scope.dashboardFilterData.start      = scope.monthFirstDay;\n                scope.dashboardFilterData.end   = scope.monthLastDay;\n                      \n            }  else if (duration == 2) { // current week\n\n                scope.dashboardFilterData.start   = scope.currentWeekFirstDay;\n                scope.dashboardFilterData.end   = scope.currentWeekLastDay;\n\n            } else if (duration == 3) { // today\n\n                scope.dashboardFilterData.start   = scope.today;\n                scope.dashboardFilterData.end   = scope.today;\n\n            } else if (duration == 4) { // last year\n\n                scope.dashboardFilterData.start   = scope.lastYearFirstDay;\n                scope.dashboardFilterData.end   = scope.lastYearLastDay;\n\n            } else if (duration == 5) { // current year\n\n                scope.dashboardFilterData.start   = scope.currentYearFirstDay;\n                scope.dashboardFilterData.end   = scope.currentYearLastDay;\n\n            } else if (duration == 6) { // last 30 days\n\n                scope.dashboardFilterData.start   = scope.last30Days;\n                scope.dashboardFilterData.end   = scope.today;\n\n            }\n        }\n        scope.durationChange(scope.duration);\n\n        //get dashboard data as per duration\n        scope.getDashboardData = function() {\n            if (!_.isEmpty(orderPieChart)) {\n               orderPieChart.destroy();\n            }\n            \n            __DataStore.fetch({\n                'apiURL'      : 'manage.dashboard.count_support_data',\n                'startDate'   : scope.dashboardFilterData.start, // start date\n                'endDate'     : scope.dashboardFilterData.end,   // end date\n                'durationType' : scope.duration\n            }, {\n                fresh : true\n            })\n            .success(function(responseData) {\n\n                appServices.processResponse(responseData, null, function() {\n\n                    var requestData = responseData.data.dashboard;\n                \n                    scope.orders = requestData.orders;\n                    scope.latestProductsRating = requestData.latestProductsRating;\n                    scope.latestSaleProducts = requestData.latestSaleProducts;\n                    scope.totalCategories = requestData.totalCategories;\n                    scope.dashboardDuration = __globals.generateKeyValueItems(requestData.duration);\n                    scope.orderChartData = scope.orders.orderChartData;\n                    scope.currentCoupons = requestData.currentCoupans.currentActiveCoupan;\n                  \n                    scope.products = requestData.products;\n                    scope.brands = requestData.brands;\n                    \n                    if ($rootScope.canAccess('manage.product.list')) {\n                        //create product report pie chart start\n                        var productChart = document.getElementById(\"lw-product-chart\");\n                      \n                        // var myPieChart = new Chart(orderPayment,{\n                        productPieChart = appServices.createBarChart({\n                            'elementId' : productChart,\n                            'type' : 'pie'\n                        },\n                        {\n                            'data': scope.products.productChartData,\n                            'labels' : scope.products.productChartLabels\n                        },\n                        {\n                            'options' : {\n                                responsive: true,\n                                legend: {\n                                    onClick: function (e) {\n                                        e.stopPropagation();\n                                    }\n                                }\n                            }\n                        });\n                        //create product report pie chart end\n                    }\n                    \n                    if ($rootScope.canAccess('manage.brand.list')) {\n                        //create brand report pie chart start\n                        var brandChart = document.getElementById(\"lw-brand-chart\");\n                  \n                        // var myPieChart = new Chart(orderPayment,{\n                        brandPieChart = appServices.createBarChart({\n                            'elementId' : brandChart,\n                            'type' : 'pie'\n                        },\n                        {\n                            'data': scope.brands.brandChartData,\n                            'labels' : scope.brands.brandChartLabels\n                        },\n                        {\n                            'options' : {\n                                responsive: true,\n                                legend: {\n                                    onClick: function (e) {\n                                        e.stopPropagation();\n                                    }\n                                }\n                            }\n                        });\n                        //create brand report pie chart end\n                    }\n                     \n                    if ($rootScope.canAccess('manage.order.list')) {\n                         //create order report pie chart start\n                        var orderChart = document.getElementById(\"lw-order-chart\");\n                  \n                        // var myPieChart = new Chart(orderPayment,{\n                        orderPieChart = appServices.createBarChart({\n                            'elementId' : orderChart,\n                            'type' : 'pie'\n                        },\n                        {\n                            'data': scope.orderChartData.orderData,\n                            'labels' : scope.orderChartData.orderStatusLabel\n                        },\n                        {\n                            'options' : {\n                                responsive: true,\n                                legend: {\n                                    onClick: function (e) {\n                                        e.stopPropagation();\n                                    }\n                                }\n                            }\n                        });\n                        //create order report pie chart end\n                    }\n                    \n                });\n\n            });\n        };\n        scope.getDashboardData();\n        //get dashboard data as per duration\n\t};\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\tCoupon related controllers\n\t-------------------------------------------------------------------------- */\n\t\n\tangular.module('ManageApp.coupon', \t\t[]).\n\t\tcontroller('CouponListController', [\n\t\t\t'$scope', '__DataStore', 'appServices','$state', CouponListController\n\t\t]).controller('CouponDetailDialogController', [\n\t\t\t'$scope', '__DataStore', 'appServices','$state', CouponDetailDialogController\n\t\t]).controller('CouponAddController', [\n\t\t\t'$scope', '__Form','appServices', '$state', '__DataStore', CouponAddController\n\t\t]).controller('CouponEditController', [\n\t\t\t'$scope', '__Form','appServices', '$state', '__DataStore', CouponEditController\n\t\t]);\n\n    /**\n\t * CouponListController for get list of coupon & manage it.\n\t *\n\t * @inject $scope\n\t * @inject __DataStore\n\t * @inject appServices\n\t *\n\t * @return void\n\t *-------------------------------------------------------- */\n\n\tfunction CouponListController($scope, __DataStore, appServices, $state) {\n\n\t\tvar scope   = this,\n\t\tdtProductsColumnsData = [\n            {\n                \"name\"      : \"title\",\n                \"orderable\"  : true,\n                \"template\"\t: \"#titleColumnTemplate\"\n            },\n            {\n                \"name\"      : \"code\",\n                \"orderable\"  : true\n            },\n            {\n                \"name\"      : \"start_date\",\n                \"orderable\" : true,\n                \"template\"\t: \"#startDateColumnTemplate\"\n            },\n            {\n                \"name\"      : \"end_date\",\n                \"orderable\" : true,\n                \"template\"  : \"#endDateColumnTemplate\"\n            },\n            {\n                \"name\"      : \"status\",\n                \"orderable\" :  true,\n                \"template\"  : \"#statusColumnTemplate\"\n            },\n            {\n                \"name\"      : null,\n                \"template\"  : \"#columnActionTemplate\"\n            }\n        ],\n        tabs    = {\n            'current'    : {\n                id      : 'currentCoupon',\n                route   : 'coupons.current',\n                status  : 1\n            },\n            'expired' : {\n                id      : 'expiredCoupon',\n                route   : 'coupons.expired',\n                status  : 2\n            },\n            'upcoming' : {\n                id      : 'upcomingCoupon',\n                route   : 'coupons.upcoming',\n                status  : 3\n            }\n        };\n\n        $('#manageCouponList a').click(function (e) {\n\n        \te.preventDefault();\n        \t\n            var $this       = $(this),\n                tabName     = $this.attr('aria-controls'),\n                selectedTab = tabs[tabName];\n            if (!_.isEmpty(selectedTab)) {\n                $(this).tab('show');\n                scope.getCouponsList(selectedTab.id, selectedTab.status);\n            }\n\n    \t});\n\n     /**\n        * get coupon data base on status\n        *\n        * @param string tableID\n        * @param int status\n        * @return void\n        *---------------------------------------------------------------- */\n        \n        scope.getCouponsList  =  function(tableID, status) \n        { \n        \t// distroy instance of datatable\n\t    \tif (scope.couponsListDataTable) {\n\t            scope.couponsListDataTable.destroy();\n\t        }\n        \tscope.couponsListDataTable = __DataStore.dataTable('#'+tableID, {\n\t            url         : {\n\t            \t'apiURL' : \"manage.coupon.list\",\n\t            \t'status' : status\n\t            },\n\t            dtOptions   : {\n\t                \"searching\": true,\n\t                \"order\": [[ 1, \"asc\" ]]\n\t            },\n\t            columnsData : dtProductsColumnsData, \n\t            scope       : $scope\n        \t});\n        }; \n\n        _.defer(function(text) {\n\t\t\tif ($state.current.name == 'coupons.current') {\n\n\t        \tvar selectedTab = $('.nav li a[href=\"#current\"]');\n\t        \t\tselectedTab.triggerHandler('click', true);\n\n\t        } else if ($state.current.name == 'coupons.expired') {\n\n\t        \tvar selectedTab = $('.nav li a[href=\"#expired\"]');\n\t        \t\tselectedTab.triggerHandler('click', true);\n\n\t        } else if ($state.current.name == 'coupons.upcoming') {\n\t        \t\n\t        \tvar selectedTab = $('.nav li a[href=\"#upcoming\"]');\n\t        \t\tselectedTab.triggerHandler('click', true);\n\t        }\n\t\t\t \n\t\t}, 0);\n\t\t\n\n\t\t /**\n        * When click on tab so template open in url\n        *\n        * @param  $event\n        * @param  url\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        scope.tabClick = function ($event, url) {\n\t        $event.preventDefault();\n\t        $state.go(url);\n\t    };\n\t    \n\t    /**\n\t      * Get detail dialog.\n\t      *\n\t      * @return void\n\t      *---------------------------------------------------------------- */\n\t    scope.detailDialog = function (couponID) {\n\n\t    \t__DataStore.fetch({\n\t        \t'apiURL'\t: 'manage.coupon.detailSupportData',\n\t        \t'couponID'\t: couponID\n\t        })\n    \t   .success(function(responseData) {\n\n    \t   \t\tvar requestData = responseData.data;\n\n    \t   \t\tappServices.processResponse(responseData, null, function() {\n\n\t\t\t    \tappServices.showDialog(requestData,\n\t\t\t        {\t\n\t\t\t            templateUrl : __globals.getTemplateURL(\n\t\t\t                    'coupon.manage.detail-dialog'\n\t\t\t                )\n\t\t\t        },\n\t\t\t        function(promiseObj) {\n\n\t\t\t        });\n\t\t\t    });\n\t       });\n\t    }\n\n\t   \n\n        /**\n\t      * Get datatable source data.\n\t      *\n\t      * @return void\n\t      *---------------------------------------------------------------- */\n        scope.reloadDT = function () {\n\t        __DataStore.reloadDT(scope.couponsListDataTable);\n\t    };\n\n\t    /**\n\t      * delete coupon.\n\t      *\n\t      * @param couponID\n\t      * @param couponName\n\t      *\n\t      * @return void\n\t      *---------------------------------------------------------------- */\n        scope.delete = function(couponID, couponName) {\n\t    \t__globals.showConfirmation({\n                text                : __ngSupport.getText(\n                    __globals.getJSString('coupon_delete_text'), {\n                        '__name__'     : unescape(couponName)\n                    }\n                ),\n                confirmButtonText   : __globals.getJSString('delete_action_button_text')\n            }, function() {\n\n                __DataStore.post({\n                    'apiURL' \t: 'manage.coupon.delete',\n                    'couponID' \t: couponID,\n                })\n                .success(function(responseData) {\n                \n                    var message = responseData.data.message;\n                   \n                    appServices.processResponse(responseData, {\n                    \t\n                            error : function(data) {\n                                __globals.showConfirmation({\n                                    title   : __globals.getJSString('confirm_error_title'),\n                                    text    : message,\n                                    type    : 'error'\n                                });\n\n                            }\n                        },\n                        function(data) {\n                        \t\n                            __globals.showConfirmation({\n                                title   : __globals.getJSString('confirm_error_title'),\n                                text    : message,\n                                type    : 'success'\n                            });\n                            scope.reloadDT();   // reload datatable\n\n                        }\n                    );    \n\n                });\n\n            });\n\t    };\n\n\n\t    /**\n\t    * open \n\t    *\n\t    * @param object param1 type \n\t    *\n\t    * @return void\n\t    *---------------------------------------------------------------- */\n\t    \n\t    scope.openCouponDialog  =  function() \n\t    { \t\n\t    \t__DataStore.fetch('manage.coupon.fetch.couponDiscountType')\n    \t   \t\t.success(function(responseData) {\n\n    \t   \t\tvar requestData = responseData.data;\n    \t   \t\t\n\t\t\t    appServices.showDialog(requestData,\n\t\t        {\t\n\t\t            templateUrl : __globals.getTemplateURL(\n\t\t                    'coupon.manage.add-dialog'\n\t\t                )\n\t\t        },\n\t\t        function(promiseObj) {\n\n\t\t            // Check if brand added\n\t\t            if (_.has(promiseObj.value, 'coupon_added') \n\t\t                && promiseObj.value.coupon_added === true) {\n\t\t            \tscope.reloadDT();   // reload datatable\n\t\t            }\n\t\t        });\n\t\t    });\n\t    };\n\n\t    /**\n\t    * edit coupon edit dialog\n\t    *\n\t    * @param int couponID\n\t    *\n\t    * @return void\n\t    *---------------------------------------------------------------- */\n\t    \n\t    scope.openEditCouponDialog  =  function(couponID) \n\t    { \n\t    \t __DataStore.fetch({\n\t        \t'apiURL'\t: 'manage.coupon.editSupportData',\n\t        \t'couponID'\t: couponID\n\t        })\n    \t   .success(function(responseData) {\n\n    \t   \t\tvar requestData = responseData.data;\n\n    \t   \t\trequestData.start = moment(requestData.start)\n    \t   \t\t\t\t\t\t\t.format('YYYY-MM-DD HH:mm:ss');\n\n    \t   \t\trequestData.end = moment(requestData.end)\n    \t   \t\t\t\t\t\t\t.format('YYYY-MM-DD HH:mm:ss');\n\n\t        \tappServices.showDialog(requestData,\n\t            {\n\t                templateUrl : __globals.getTemplateURL(\n\t                        'coupon.manage.edit-dialog'\n\t                    )\n\t            },\n\t            function(promiseObj) {\n\n\t            \t // Check if coupon updated\n\t                if (_.has(promiseObj.value, 'coupon_updated') \n\t                    && promiseObj.value.coupon_updated === true) {\n\t                \t\n\t                \tscope.reloadDT();   // reload datatable\n\t                }\n\t               \n\t            });\n\t     \t});\t\n\t    };\n\n\t};\n\n\t /**\n\t   * CouponDetailDialogController for get detail dialog.\n\t   *\n\t   * @inject $scope\n\t   * @inject __DataStore\n\t   * @inject appServices\n\t   * @inject state\n\t   *\n\t   * @return void\n\t   *-------------------------------------------------------- */\n\t    function CouponDetailDialogController($scope, __DataStore, appServices, state) {\n\n\t    \tvar scope   = this;\n\t    \tscope.ngDialogData   = $scope.ngDialogData;\n\t    \tscope.couponDate = scope.ngDialogData;\n\n\n\t     /**\n\t  \t  * Close dialog and return promise object\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\t\t\tscope.closeDialog = function() {\n\t  \t  \t\t$scope.closeThisDialog();\n\t  \t  \t};\n\n\t\t};\n\n\t/**\n\t * CouponAddntroller for get dialog for add coupon & manage it.\n\t *\n\t * @inject $scope\n\t * @inject __Form\n\t * @inject appServices\n\t *\n\t * @return void\n\t *-------------------------------------------------------- */\n\n\tfunction CouponAddController($scope, __Form, appServices, $state, __DataStore) {\n\n\t\tvar scope   = this;\n\t\tscope.ngDialogData   = $scope.ngDialogData;\n        scope.productCouponData = [];\n        scope.couponDetails = [];\n        scope.product_select_config = __globals.getSelectizeOptions({\n            maxItems        : 1000,\n            searchField     : ['name', 'id'],\n            plugins         : ['remove_button']\n        });\n\t\t\n\t\tscope = __Form.setup(scope, 'manage_coupon_add', 'couponData',\n\t\t\t\t\t        { \n\t\t\t\t\t            secured : false\n\t\t\t\t\t        });\n\t\t\n\t\tscope.discountType \t\t\t\t= scope.ngDialogData.discountType;\n        scope.productDiscountTypes      = scope.ngDialogData.productDiscountTypes;\n        scope.products                  = scope.ngDialogData.products;\n\t\tscope.couponData.amountSymbol \t= scope.ngDialogData.currencySymbol;\n\t\tscope.couponData.currency \t\t= scope.ngDialogData.currency;\n\t\tscope.couponData.discount_type \t= 2;\n\t\tscope.couponData.active \t\t= true;\n\t\t\n\t\tvar today = moment().format('YYYY-MM-DD HH:mm:ss');\n        scope.couponData.getClientTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n\t\tscope.couponData.start = today;\n\t\tscope.couponData.end   = today;\n\n\t\tscope.startDateConfig = {\n\t\t\tminDate         : moment().format('YYYY-MM-DD HH:mm:ss'),\n\t\t};\n\n        scope.endDateConfig = {\n            minDate         : moment().format('YYYY-MM-DD HH:mm:ss'),\n            clearButton     : true\n        };\n\n\t\t$scope.$watch('couponAddCtrl.couponData.start', \n                function(currentValue, oldValue) {\n\n                var $element = angular.element('#end');\n               \n                // Check if currentValue exist\n                if (_.isEmpty(currentValue)) {\n      \n                    $element.bootstrapMaterialDatePicker('setMinDate', today);\n\n                } else {\n\n                    $element.bootstrapMaterialDatePicker('setMinDate', currentValue);\n                }\n\n        });\n\n        scope.formatDateTime = function(dateTime) {\n            return moment(dateTime).format('Do MMMM YYYY h:mm:ss a');\n        };\n\n        /**\n          * Set Number Field Validation\n          *\n          * @param number number\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.setNumberFieldValidation = function(number) {\n\n            var number = (number) ? number.toString() : '';\n            if (_.includes(number, '.')) {\n                scope.manage_coupon_add['uses_per_user'].$setValidity('number', false);\n            } else {\n                scope.manage_coupon_add['uses_per_user'].$setValidity('number', true);\n            }\n        };\n\n        /**\n          * Clear text field\n          *\n          * @param number fieldNo\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.clearTextField = function(fieldNo) {\n            if (fieldNo == 1) {\n                scope.couponData.uses_per_user = '';\n            } else {\n                scope.couponData.code = '';\n                scope.couponData.uses_per_user = '';\n                if (scope.couponData.user_per_usage == true) {\n                   _.defer(function(){\n                        $('.lw-switchery-change').trigger('click');\n                    }); \n                }                \n            }\n        };\n\n\t    /**\n\t\t  * Call when start date updated\n\t\t  *\n\t\t  * @param date date\n\t\t  *\n\t\t  * @return void\n\t\t  *---------------------------------------------------------------- */\n\t\tscope.endDateUpdated = function(date) {\n\t\n\t\t\tif (scope.couponData.start > scope.couponData.end) { \n\t\t\t\tscope.couponData.end = date;\n\t\t\t}      \n\t\t};\n\n\t    /**\n\t\t  * submit add form.\n\t\t  *\n\t\t  *\n\t\t  * @return void\n\t\t  *-------------------------------------------------------- */\n\n\t\tscope.submit = function() {\n\n\t\t    __Form.process('manage.coupon.add', scope)\n                .success(function(responseData) {\n                appServices.processResponse(responseData, null, function(reactionCode) {\n                    $scope.closeThisDialog( { coupon_added : true } );               \n                });    \n            });\n\t\t}\n\n\t\t/**\n\t  \t  * Close dialog and return promise object\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\t\tscope.closeDialog = function() {\n  \t  \t\t$scope.closeThisDialog();\n  \t  \t};\n\t};\n\n\n\t/**\n\t * CouponEditController for get dialog for add coupon & manage it.\n\t *\n\t * @inject $scope\n\t * @inject __Form\n\t * @inject appServices\n\t * @inject $state\n\t *\n\t * @return void\n\t *-------------------------------------------------------- */\n\n\tfunction CouponEditController($scope, __Form, appServices, $state, __DataStore) {\n\n\t\tvar scope   = this,\n        \tngDialogData = $scope.ngDialogData;\n            scope.productCouponData = [];\n            scope.couponDetails = [];\n\n            scope.product_select_config = __globals.getSelectizeOptions({\n                maxItems        : 1000,\n                searchField     : ['name', 'id'],\n                plugins         : ['remove_button']\n            });\n                \n       \t\tscope.updateURL = {\n\t\t\t\t'apiURL'   :'manage.coupon.edit.process',\n\t\t\t\t'couponID' : ngDialogData.couponData._id\n\t\t\t};\n\n\n\t\tscope = __Form.setup(scope, 'manage_coupon_edit', 'couponData');\n\t\t\n\t\tscope   = __Form.updateModel(scope, $scope.ngDialogData.couponData);\n\n        scope.productDiscountTypes      = ngDialogData.configItems.productDiscountTypes;\n        scope.products                  = ngDialogData.configItems.products;\n\t\tscope.discountType \t\t\t\t= ngDialogData.configItems.discountType;\n\t\tscope.couponData.amountSymbol \t= ngDialogData.configItems.currencySymbol;\n\t\tscope.couponData.currency \t\t= ngDialogData.configItems.currency;\n\t\t\n\t\tscope.startDateConfig = {\n\t\t\tminDate : moment().format('YYYY-MM-DD HH:mm:ss'),\n\t\t};\n\n        scope.endDateConfig = {\n            minDate : moment().format('YYYY-MM-DD HH:mm:ss'),\n            clearButton     : true\n        };\n\n        scope.couponData.getClientTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n\t\t$scope.$watch('couponEditCtrl.couponData.end', \n                function(currentValue, oldValue) {\n\t\t\t\t\n                var $element = angular.element('#end');\n                \n                // Check if currentValue exist\n                if (_.isEmpty(currentValue)) {\n      \n                    $element.bootstrapMaterialDatePicker('setMinDate', scope.couponData.start);\n\n                } else {\n\n                    $element.bootstrapMaterialDatePicker('setMinDate', currentValue);\n                }\n\n\t\t\t//$element.bootstrapMaterialDatePicker('setMinDate', currentValue);\n\n        });\n\n\t\t/**\n\t\t* Call when start date updated\n\t\t*\n\t\t* @param date date\n\t\t*\n\t\t* @return void\n\t\t*---------------------------------------------------------------- */\n\t\tscope.endDateUpdated = function(date) {\n\t\t\n\t\t\tif (scope.couponData.start > scope.couponData.end) { \n\t\t\t\tscope.couponData.end = date;\n\t\t\t}\n\n            if (_.isEmpty(scope.couponData.end)) {\n                var $element = angular.element('#end');\n                $element.bootstrapMaterialDatePicker('setMinDate', scope.couponData.start);\n            }\n\t\t};\n\n        /**\n          * Clear text field\n          *\n          * @param number fieldNo\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.clearTextField = function(fieldNo) {\n            if (fieldNo == 1) {\n                scope.couponData.uses_per_user = '';\n            } else {\n                scope.couponData.code = '';\n                scope.couponData.uses_per_user = '';\n                if (scope.couponData.user_per_usage == true) {\n                   _.defer(function(){\n                        $('.lw-switchery-change').trigger('click');\n                    }); \n                }  \n            }\n        };\n\n        scope.formatDateTime = function(dateTime) {\n            return moment(dateTime).format('Do MMMM YYYY h:mm:ss a');\n        };\n\n\n\t\t/**\n\t\t* submit coupon update form.\n\t\t*\n\t\t*\n\t\t* @return void\n\t\t*---------------------------------------------------------------- */\n\t\tscope.submit = function() {\n\n\t\t    __Form.process(scope.updateURL, scope)\n                .success(function(responseData) {\n                appServices.processResponse(responseData, null, function() {\n                    $scope.closeThisDialog( { coupon_updated : true } );\n                });    \n\n            });\n\t\t}\n\n\t\t/**\n\t  \t  * Close dialog and return promise object\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\t\tscope.closeDialog = function() {\n  \t  \t\t$scope.closeThisDialog();\n  \t  \t};\n\t};\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t  Manage shipping component related controllers\n\t  ----------------------------------------------------------------------- */\n\t\n\tangular.module('ManageApp.shipping', \t\t[])\n\n        .controller('ShippingListController', [\n\t\t\t'$scope',\n            '__DataStore',\n            'appServices',\n            '__Form',\n            ShippingListController\n\t\t]).controller('ShippingDetailController', [\n\t\t\t'$scope', \n\t\t\t'__DataStore', \n\t\t\t'appServices',\n\t\t\t'$state', \n\t\t\tShippingDetailController\n        ]).controller('ShippingAddDialogController', [\n\t\t\t'$scope',\n            '__DataStore',\n            'appServices',\n            '$state',\n            ShippingAddDialogController\n\t\t])\n        .controller('ShippingAddController', [\n\t\t\t'$scope',\n            '__Form',\n            'appServices',\n            '$state',\n            ShippingAddController\n\t\t])\n        .controller('ShippingEditDialogController', [\n\t\t\t'$scope',\n            '__DataStore',\n            'appServices',\n            '$state',\n            ShippingEditDialogController\n\t\t])\n        .controller('ShippingEditController', [\n\t\t\t'$scope',\n            '__Form',\n            'appServices',\n            '$state',\n            ShippingEditController\n\t\t]);\n\n    /**\n\t  * ShippingListController - for get list of shipping rules & manage it.\n\t  *\n\t  * @inject $scope\n\t  * @inject __DataStore\n\t  * @inject appServices\n\t  * @inject __Form\n\t  *\n\t  * @return void\n\t  *-------------------------------------------------------- */\n\n\tfunction ShippingListController($scope, __DataStore, appServices, __Form) {\n\n\t\tvar scope                 = this,\n\t\t    dtShippingColumnsData = [\n                {\n                    \"name\"      : \"name\",\n                    \"orderable\"  : true,\n                    \"template\"\t: \"#countryColumnTemplate\"\n                },\n                {\n                    \"name\"      : \"type\",\n                    \"orderable\"  : true,\n                    \"template\"\t: \"#typeColumnTemplate\"\n                },\n                {\n                    \"name\"      : \"charges\",\n                    \"orderable\" : true,\n                    \"template\"  : \"#chargesColumnTemplate\"\n                },\n                {\n                    \"name\"      : \"shippingTypeTitle\",\n                    \"orderable\" : true,\n                },\n                {\n                    \"name\"      : \"creation_date\",\n                    \"orderable\" : true,\n                    \"template\"\t: \"#creationDateColumnTemplate\"\n                },\n                {\n\t                \"name\"      : \"status\",\n\t                \"orderable\" :  true,\n\t                \"template\"  : \"#statusColumnTemplate\"\n\t            },\n\t            {\n\t                \"name\"      : null,\n\t                \"template\"  : \"#columnActionTemplate\"\n\t            }\n            ],\n            tabs    = {\n                'specificCountry'    : {\n\t                    id      : 'manageShippingList'\n                },\n                'allOtherCountries'    : {\n                       id      : 'allOtherCountriesTabList'\n                }\n            };\n\n        // Fired when clicking on tab    \n        $('#manageShippingTab a').click(function (e) {\n\n            e.preventDefault();\n\n            var $this       = $(this),\n                tabName     = $this.attr('aria-controls'),\n                selectedTab = tabs[tabName];\n\n            // Check if selectedTab exist    \n            if (!_.isEmpty(selectedTab)) {\n                $(this).tab('show')\n                scope.getShipping(selectedTab.id);\n\n            }\n            \n        });\n\n        /**\n\t  \t  * Shipping list according to datatable id \n\t  \t  *\n\t  \t  * @param tableID\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\n        scope.getShipping = function (tableID) {\n        \t\n\t        scope.shippingListDataTable = __DataStore.dataTable('#'+tableID, {\n\t            url            : \"manage.shipping.list\",\n\t            dtOptions      : {\n\t                \"searching\": true,\n\t                \"order\": [[ 1, \"asc\" ]]\n\t            },\n\t            columnsData    : dtShippingColumnsData, \n\t            scope          : $scope\n\n\t        });\n        };\n\n        var selectedTab = $('.nav li a[href=\"#specificCountry\"]');\n\n\t    selectedTab.triggerHandler('click', true);\n\n\t    /**\n\t  \t  * Reload datatable\n\t  \t  *\n\t  \t  *---------------------------------------------------------------- */\n\n        scope.reloadDT = function () {\n\t        __DataStore.reloadDT(scope.shippingListDataTable);\n\t    };\n\n\n\t    /**\n\t      * Get detail dialog.\n\t      *\n\t      * @return void\n\t      *---------------------------------------------------------------- */\n\t    scope.detailDialog = function (shippingID) {\n\n\t    \t__DataStore.fetch({\n\t        \t'apiURL'\t\t: 'manage.shipping.detailSupportData',\n\t        \t'shippingID'\t: shippingID\n\t        })\n    \t   .success(function(responseData) {\n\n    \t   \t\tvar requestData = responseData.data;\n\n    \t   \t\tappServices.processResponse(responseData, null, function() {\n\n\t\t\t    \tappServices.showDialog(requestData,\n\t\t\t        {\t\n\t\t\t            templateUrl : __globals.getTemplateURL(\n\t\t\t                    'shipping.manage.detail-dialog'\n\t\t\t                )\n\t\t\t        },\n\t\t\t        function(promiseObj) {\n\n\t\t\t        });\n\t\t\t    });\n\t       });\n\t    }\n\n\t    /**\n\t  \t  * Delete shipping rule sending http request using __DataStore post\n          * function\n          *\n\t  \t  * @param int    shippingID\n\t  \t  * @param string country\n\t  \t  *\n\t  \t  * return void\n\t  \t  *---------------------------------------------------------------- */\n\n        scope.delete = function(shippingID, country) {\n\n\t    \t__globals.showConfirmation({\n                text                : __ngSupport.getText(\n\t\t\t\t\t\t\t        __globals.getJSString('shipping_delete_text'), {\n\t\t\t\t\t\t\t            '__country__'    : country\n\t\t\t\t\t\t\t        }\n\t\t\t\t\t\t    \t),\n                confirmButtonText   : __globals.getJSString('delete_action_button_text')\n            },\n            function() {\n\n                __DataStore.post({\n                    'apiURL' \t\t: 'manage.shipping.delete',\n                    'shippingID' \t: shippingID,\n                })\n                .success(function(responseData) {\n                \n                    var message = responseData.data.message;\n                   \n                    appServices.processResponse(responseData, {\n                    \t\n                        error : function(data) {\n                            __globals.showConfirmation({\n                                title   : __globals.getJSString('confirm_error_title'),\n                                text    : message,\n                                type    : 'error'\n                            });\n\n                        }\n\n                    },\n                    function(data) {\n                        \t\n                        __globals.showConfirmation({\n                            title   : __globals.getJSString('confirm_error_title'),\n                            text    : message,\n                            type    : 'success'\n                        });\n                        scope.reloadDT();   // reload datatable\n\n                    });    \n\n                });\n\n            });\n\n\t    };\n\n        // scope.shipping_type_select_config = __globals.getSelectizeOptions({\n        //     valueField  : '_id',\n        //     labelField  : 'title',\n        //     searchField : [ 'title' ]  \n        // });\n\n        // AOC stands for All Other Countries\n        // AOC shipping related\n        \n\t    scope \t= __Form.setup(scope, 'manage_aoc_edit', 'shippingData');\n\t\t\n        __DataStore.fetch('manage.shipping.aoc.editSupportData')\n    \t   \t.success(function(responseData) {\n\n \t\t\t\tappServices.processResponse(responseData, null, function() {\n\n                    var requestData = responseData.data;\n                    scope.shippingType    = requestData.configItems.shippingType;\n\t\t\t\t\tscope.currencySymbol  = requestData.configItems.storeCurrencySymbol;\n\t\t\t\t\tscope.currency        = requestData.configItems.currency;\n                  \n                    scope   = __Form.updateModel(scope, requestData.shipping);\n\n                }); \n     \t});\n\n        \n        /**\n\t  \t  * Submit aoc form data\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\n        scope.submit = function() {\n\n\t\t    __Form.process('manage.shipping.aoc.update', scope)\n                .success(function(responseData) {\n\n                appServices.processResponse(responseData, null, function() {\n                    \n                });    \n\n            });\n\n\t\t};\n\n\t};\n\n\t/**\n\t   * ShippingDetailController for get detail dialog.\n\t   *\n\t   * @inject $scope\n\t   * @inject __DataStore\n\t   * @inject appServices\n\t   * @inject state\n\t   *\n\t   * @return void\n\t   *-------------------------------------------------------- */\n\t    function ShippingDetailController($scope, __DataStore, appServices, state) {\n\n\t    \tvar scope   = this;\n\t    \tscope.ngDialogData   = $scope.ngDialogData;\n\t    \tscope.currencySymbol = scope.ngDialogData.currencySymbol;\n\t    \tscope.shippingDetail = scope.ngDialogData.shippingData;\n\t    \t\n\t     /**\n\t  \t  * Close dialog\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\t\t\tscope.closeDialog = function() {\n\t  \t  \t\t$scope.closeThisDialog();\n\t  \t  \t};\n\n\t\t};\n\n\t/**\n\t  * ShippingAddDialogController - show add shipping rule dialog\n\t  *\n\t  * @inject $scope\n\t  * @inject __DataStore\n\t  * @inject appServices\n\t  * @inject $state\n\t  *\n\t  * @return void\n\t  *-------------------------------------------------------- */\n\n\tfunction ShippingAddDialogController($scope, __DataStore, appServices, $state) {\n\n\t\tvar scope   = this;\n\n        __DataStore.fetch('manage.shipping.fetch.contries')\n    \t   \t.success(function(responseData) {\n\n    \t   \t\tvar requestData = responseData.data;\n    \t   \t\t// show add dialog\n\t        \tappServices.showDialog(requestData,\n\t            {\n\t                templateUrl : __globals.getTemplateURL(\n\t                        'shipping.manage.add-dialog'\n\t                    )\n\t            },\n\t            function(promiseObj) {\n                    if (_.has(promiseObj.value, 'goToManageShippingType')) {\n                        $state.go('shippingType');\n                    }\n                    \n\t            \t// Check if shipping added\n\t\t            if (_.has(promiseObj.value, 'shipping_added') \n\t\t                && promiseObj.value.shipping_added === true && !_.has(promiseObj.value, 'goToManageShippingType')) {\n\t\t            \t$scope.$parent.shippingListCtrl.reloadDT();\n\t\t            }\n                    if (!_.has(promiseObj.value, 'goToManageShippingType')) {\n                        $state.go('shippings');\n                    }\n                    \n\t            });\n     \t});\n\n\t};\n\n\t/**\n\t  * ShippingAddController - handle scope of add shipping rule dialog\n\t  *\n\t  * @inject $scope\n\t  * @inject __Form\n\t  * @inject appServices\n      * @inject $state\n\t  *\n\t  * @return void\n\t  *-------------------------------------------------------- */\n\n\tfunction ShippingAddController($scope, __Form, appServices, $state) {\n\n\t\tvar scope  \t\t\t= this,\n\t\t\tngDialogData \t= $scope.ngDialogData;\n\n\t\tscope     = __Form.setup(scope, 'manage_shipping_add', 'shippingData');\n\t\t\n\t\tscope.countries_select_config = __globals.getSelectizeOptions({\n            valueField  : 'value',\n            labelField  : 'text',\n            searchField : [ 'text' ]  \n        });\n\n        scope.shipping_type_select_config = __globals.getSelectizeOptions({\n            valueField  : '_id',\n            labelField  : 'title',\n            searchField : [ 'title' ]  \n        });\n\n        scope.countries \t\t\t= ngDialogData.countries;\n        scope.shippingTypeList      = ngDialogData.shippingTypeList;\n        scope.shippingType \t\t\t= ngDialogData.shippingType;\n        scope.shippingData.active \t= true;\n        scope.shippingData.type \t= 1;\n        scope.freeAfterAmount  \t\t= true;\n      \tscope.charges \t\t \t\t= true;\n      \tscope.amountCap \t\t\t= false;\n        scope.currencySymbol \t\t= ngDialogData.currencySymbol;\n        scope.currency \t\t\t\t= ngDialogData.currency;\n\n        scope.goToShippingType = function() {\n            $scope.closeThisDialog( { 'goToManageShippingType' : true } );\n        };\n\n\n        /**\n        * description\n        *\n        * @param object param1 type \n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        \n        scope.onChangeType = function(type) {\n\t    \t\n\t        var shippingType = ngDialogData.shippingType;\n\t        \n\t        if (type == 1) {\n\t          \t// flat.\n\t          \tscope.freeAfterAmount  \t= true;\n\t          \tscope.charges \t\t \t= true;\n\t          \tscope.amountCap \t\t= false;\n\n\t        } else if (type == 2) {\n\t          \t// percentage.\n\t          \tscope.freeAfterAmount  \t= false;\n\t          \tscope.charges \t\t \t= true;\n\t          \tscope.amountCap \t\t= true;\n\n         \t} else if (type == 3 || type == 4) {\n         \t // free or Not Shippable\n         \t \tscope.freeAfterAmount  \t= false;\n\t          \tscope.charges \t\t \t= false;\n\t          \tscope.amountCap \t\t= false;\n\n         \t} \n\t    };\n\n        /**\n\t  \t  * add new shiiping\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\n        scope.submit = function() {\n\n\t\t    __Form.process('manage.shipping.add', scope)\n                .success(function(responseData) {\n\n                appServices.processResponse(responseData, null, function() {\n                    $scope.closeThisDialog( { shipping_added : true } );\n                });\n\n            });\n\n\t\t};\n\n        /**\n\t  \t  * Close dialog\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\n\t\tscope.closeDialog = function() {\n  \t  \t\t$scope.closeThisDialog();\n  \t  \t};\n\n\t};\n\n\t/**\n\t  * ShippingEditDialogController - show edit shipping rule dialog\n\t  *\n\t  * @inject $scope\n\t  * @inject __DataStore\n\t  * @inject appServices\n\t  * @inject $state\n\t  *\n\t  * @return void\n\t  *-------------------------------------------------------- */\n\n\tfunction ShippingEditDialogController($scope, __DataStore, appServices, $state) {\n\n\t\tvar scope   = this;\n\t\t\n        __DataStore.fetch({\n        \t'apiURL'\t\t: 'manage.shipping.editSupportData',\n        \t'shippingID'\t: $state.params.shippingID\n\t    })\n    \t   .success(function(responseData) {\n\n    \t   \tappServices.processResponse(responseData,null, function(reactionCode) {\n\n    \t   \t\tvar requestData = responseData.data;\n\n\t        \tappServices.showDialog(requestData,\n\t            {\n\t                templateUrl : __globals.getTemplateURL(\n\t                        'shipping.manage.edit-dialog'\n\t                    )\n\t            },\n\t            function(promiseObj) {\n\t            \tif (_.has(promiseObj.value, 'goToManageShippingType')) {\n                        $state.go('shippingType');\n                    }\n\n\t            \t // Check if coupon updated\n\t                if (_.has(promiseObj.value, 'shipping_updated') \n\t                    && promiseObj.value.shipping_updated === true) {\n\t                \t$scope.$parent.shippingListCtrl.reloadDT();\n\t                }\n\n                    if (!_.has(promiseObj.value, 'goToManageShippingType')) {\n                        $state.go('shippings');\n                    }\n\t               \n\t            });\n\t\t\t});\n     \t});\n\n\t};\n\n\t/**\n\t  * ShippingEditController - handle edit shipping dialog scope\n\t  *\n\t  * @inject $scope\n\t  * @inject __Form\n\t  * @inject appServices\n      * @inject $state\n\t  *\n\t  * @return void\n\t  *-------------------------------------------------------- */\n\n\tfunction ShippingEditController($scope, __Form, appServices, $state) {\n\n\t\tvar scope              = this,\n        \tngDialogData       = $scope.ngDialogData;\n       \t\tscope.updateURL    = {\n\t\t\t\t'apiURL' :'manage.shipping.edit.process',\n\t\t\t\t'shippingID' : $state.params.shippingID\n\t\t\t};\n\t\t\n\t\tscope     = __Form.setup(scope, 'manage_shipping_edit', 'shippingData');\n\n        scope.shipping_type_select_config = __globals.getSelectizeOptions({\n            valueField  : '_id',\n            labelField  : 'title',\n            searchField : [ 'title' ]  \n        });\n\n\t\tscope.shippingData = ngDialogData;\n        scope.shippingTypeList      = ngDialogData.shippingTypeList;\n\t\tscope.discountType      = ngDialogData.shippingType;\n        scope.shippingData \t\t= ngDialogData.shippingData;\n        scope.currencySymbol \t= ngDialogData.currencySymbol;\n        scope.currency \t\t\t= ngDialogData.currency;\n        \n        scope.goToShippingType = function() {\n            $scope.closeThisDialog( { 'goToManageShippingType' : true } );\n        };\n\n\t\tscope = __Form.updateModel(scope, scope.shippingData)\n\n\n\t\t/**\n\t\t  * submit edit form data\n\t\t  *\n\t\t  * @return void\n\t\t  *---------------------------------------------------------------- */\n\t\t\n\t\tscope.submit = function() {\n\n\t\t    __Form.process(scope.updateURL, scope)\n                .success(function(responseData) {\n\n                appServices.processResponse(responseData, null, function() {\n                    $scope.closeThisDialog( { shipping_updated : true } );\n                });    \n\n            });\n\t\t}\n\n\t\t/**\n\t  \t  * Close dialog\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\n\t\tscope.closeDialog = function() {\n  \t  \t\t$scope.closeThisDialog();\n  \t  \t};\n\n\t};\n\n})();","(function() {\n'use strict';\n\t\n\t/*\n\t  Manage tax component related controllers\n\t  -------------------------------------------------------------------------- */\n\t\n\tangular.module('ManageApp.tax', \t\t[]).\n\t\tcontroller('TaxListController', [\n\t\t\t'$scope',\n            '__DataStore',\n            'appServices',\n            TaxListController\n\t\t])\n\n\t\t.controller('TaxDetailController', [\n\t\t\t'$scope', \n\t\t\t'__DataStore', \n\t\t\t'appServices',\n\t\t\tTaxDetailController\n\t\t])\n\n        .controller('TaxAddDialogController', [\n\t\t\t'$scope',\n            '__DataStore',\n            'appServices',\n            '$state',\n            TaxAddDialogController\n\t\t])\n\n        .controller('TaxAddController', [\n\t\t\t'$scope',\n            '__Form',\n            'appServices',\n            '$state',\n            TaxAddController\n\t\t])\n\n        .controller('TaxEditDialogController', [\n\t\t\t'$scope',\n            '__DataStore',\n            'appServices',\n            '$state',\n            TaxEditDialogController\n\t\t])\n\n        .controller('TaxEditController', [\n\t\t\t'$scope',\n            '__Form',\n            'appServices',\n            '$state',\n            TaxEditController\n\t\t]);\n\n    /**\n\t  * TaxListController for get list of tax & manage it.\n\t  *\n\t  * @inject $scope\n\t  * @inject __DataStore\n\t  * @inject appServices\n\t  *\n\t  * @return void\n\t  *-------------------------------------------------------- */\n\n\tfunction TaxListController($scope, __DataStore, appServices) {\n\n\t\tvar scope   = this,\n\t\tdttaxColumnsData = [\n            {\n                \"name\"      : \"label\",\n                \"orderable\" : true,\n                \"template\"\t: \"#labelColumnTemplate\"\n            },\n            {\n                \"name\"      : \"name\",\n                \"orderable\" : true,\n                \"template\"\t: \"#countryColumnTemplate\"\n            },\n            {\n                \"name\"      : \"type\",\n                \"orderable\" : true,\n                \"template\"\t: \"#typeColumnTemplate\"\n            },\n            {\n                \"name\"      : \"applicable_tax\",\n                \"orderable\" : true,\n                \"template\"  : \"#applicableTaxColumnTemplate\"\n            },\n            {\n                \"name\"      : \"creation_date\",\n                \"orderable\" : true,\n                \"template\"\t: \"#creationDateColumnTemplate\"\n            },\n            {\n                \"name\"      : \"status\",\n                \"orderable\" :  true,\n                \"template\"  : \"#statusColumnTemplate\"\n            },\n            {\n                \"name\"      : null,\n                \"template\"  : \"#columnActionTemplate\"\n            }\n        ];\n\t\t\n        scope.taxListDataTable = __DataStore.dataTable('#manageTaxList', {\n            url             : \"manage.tax.list\",\n            dtOptions       : {\n                \"searching\"     : true,\n                \"order\"         : [[ 0, \"asc\" ]]\n            },\n            columnsData     : dttaxColumnsData, \n            scope           : $scope\n\n        });\n\n        /**\n    \t  * reload data table\n    \t  *\n    \t  *-------------------------------------------------------- */\n\n        scope.reloadDT = function () {\n            __DataStore.reloadDT(scope.taxListDataTable);\n        };\n\n        /**\n\t      * Get detail dialog.\n\t      *\n\t      * @return void\n\t      *---------------------------------------------------------------- */\n\t    scope.detailDialog = function (taxID) {\n\n\t    \t__DataStore.fetch({\n\t        \t'apiURL' : 'manage.tax.detailSupportData',\n\t        \t'taxID'\t : taxID\n\t        })\n    \t   .success(function(responseData) {\n\n    \t   \t\tvar requestData = responseData.data;\n\n    \t   \t\tappServices.processResponse(responseData, null, function() {\n\n\t\t\t    \tappServices.showDialog(requestData,\n\t\t\t        {\t\n\t\t\t            templateUrl : __globals.getTemplateURL(\n\t\t\t                    'tax.manage.detail-dialog'\n\t\t\t                )\n\t\t\t        },\n\t\t\t        function(promiseObj) {\n\n\t\t\t        });\n\t\t\t    });\n\t       });\n\t    }\n\n        /**\n          * Get detail dialog.\n          *\n          * @return void\n          *---------------------------------------------------------------- */\n        scope.taxSettingDialog = function () {\n\n            appServices.showDialog({},\n            {   \n                templateUrl : __globals.getTemplateURL(\n                    'tax.manage.setting-dialog'\n                )\n            },\n            function(promiseObj) {\n\n            });\n        }\n\n        /**\n    \t  * delete tax by sending http request.\n    \t  *\n    \t  * @param number taxID\n    \t  *\n    \t  * @return void\n    \t  *-------------------------------------------------------- */\n\n        scope.delete = function(taxID) {\n\n        \t__globals.showConfirmation({\n                text                : __globals.getJSString('tax_delete_text'),\n                confirmButtonText   : __globals.getJSString('delete_action_button_text')\n            }, function() {\n\n                __DataStore.post({\n                    'apiURL' \t: 'manage.tax.delete',\n                    'taxID' \t: taxID,\n                })\n                .success(function(responseData) {\n                \n                    var message = responseData.data.message;\n                   \n                    appServices.processResponse(responseData, {\n                    \t\n                            error : function(data) {\n                                __globals.showConfirmation({\n                                    title   : __globals.getJSString('confirm_error_title'),\n                                    text    : message,\n                                    type    : 'error'\n                                });\n\n                            }\n                        },\n                        function(data) {\n                        \t\n                            __globals.showConfirmation({\n                                title   : __globals.getJSString('confirm_error_title'),\n                                text    : message,\n                                type    : 'success'\n                            });\n                            scope.reloadDT();   // reload datatable\n\n                        }\n\n                    );    \n\n                });\n\n            });\n\n        }\n\n\t};\n\n\t/**\n     * TaxDetailController for get detail dialog.\n     *\n     * @inject $scope\n     * @inject __DataStore\n     * @inject appServices\n     *\n     * @return void\n     *-------------------------------------------------------- */\n    function TaxDetailController($scope, __DataStore, appServices) {\n\n    \tvar scope   = this;\n    \tscope.ngDialogData   = $scope.ngDialogData;\n    \tscope.currencySymbol = scope.ngDialogData.currencySymbol;\n    \tscope.taxData \t\t = scope.ngDialogData.taxData;\n    \t\n \t/**\n\t * Close dialog\n\t *\n\t * @return void\n\t *---------------------------------------------------------------- */\n\t\tscope.closeDialog = function() {\n  \t  \t\t$scope.closeThisDialog();\n  \t  \t};\n\n\t};\n\n\t/**\n\t * TaxAddDialogController - for show add tax dialog with getting its -\n     * support dialog data\n\t *\n\t * @inject $scope\n\t * @inject __DataStore\n\t * @inject appServices\n\t * @inject $state\n\t *\n\t * @return void\n\t *-------------------------------------------------------- */\n\n\tfunction TaxAddDialogController($scope, __DataStore, appServices, $state) {\n\n\t\tvar scope   = this;\n\n        __DataStore.fetch('manage.tax.fetch.contries')\n    \t   \t.success(function(responseData) {\n\n    \t   \t\tvar requestData = responseData.data;\n\n\t        \tappServices.showDialog(requestData,\n\t            {\n\t                templateUrl : __globals.getTemplateURL(\n\t                        'tax.manage.add-dialog'\n\t                    )\n\t            },\n\t            function(promiseObj) {\n\n\t            \t// Check if tax added\n\t\t            if (_.has(promiseObj.value, 'tax_added') \n\t\t                && promiseObj.value.tax_added == true) {\n\t\t            \t$scope.$parent.taxListCtrl.reloadDT();\n\t\t            }\n\t\t            $state.go('taxes');\n\t               \n\t            });\n     \t});\n\n\t};\n\n\t/**\n\t * TaxAddController - handle scope of add dialog & also responsible for -\n     * form handling & dialog closing\n\t *\n\t * @inject $scope\n\t * @inject __Form\n\t * @inject appServices\n\t * @inject $state\n\t *\n\t * @return void\n\t *-------------------------------------------------------- */\n\n\tfunction TaxAddController($scope, __Form, appServices, $state) {\n\n\t\tvar scope  \t\t\t= this,\n\t\t\tngDialogData \t= $scope.ngDialogData;\n\n\t\tscope \t= __Form.setup(scope, 'manage_tax_add', 'taxData');\n\t\t\n\t\tscope.countries_select_config = __globals.getSelectizeOptions({\n            valueField  : 'value',\n            labelField  : 'text',\n            searchField : [ 'text' ]\n        });\n\n        scope.countries \t\t= ngDialogData.countries;\n        scope.taxType \t\t\t= __globals.generateKeyValueItems(ngDialogData.taxType);\n        scope.taxData.active \t= true;\n        scope.taxData.type \t\t= 1;\n        scope.currencySymbol \t= ngDialogData.currencySymbol;\n        scope.currency \t        = ngDialogData.currency;\n\n        /**\n\t  \t  * Submit form using form service process method\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\n        scope.submit = function() {\n\n\t\t    __Form.process('manage.tax.add', scope)\n                .success(function(responseData) {\n                appServices.processResponse(responseData, null, function() {\n                    $scope.closeThisDialog( { tax_added : true } );\n                });    \n\n            });\n\t\t}\n\n\n\t\t/**\n\t  \t  * Close dialog and return promise object\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\n\t\tscope.closeDialog = function() {\n  \t  \t\t$scope.closeThisDialog();\n  \t  \t};\n\n\t};\n\n\t/**\n\t * TaxEditDialogController - Getting edit tax data from server & if tax -\n     * exist on server then show tax edit dialog \n\t *\n\t * @inject $scope\n     * @inject __DataStore\n\t * @inject appServices\n\t * @inject $state\n\t *\n\t * @return void\n\t *-------------------------------------------------------- */\n\n\tfunction TaxEditDialogController($scope, __DataStore, appServices, $state) {\n\n\t\tvar scope   = this;\n\n        __DataStore.fetch({\n        \t'apiURL'\t\t: 'manage.tax.editSupportData',\n        \t'taxID'\t\t\t: $state.params.taxID\n\t    })\n    \t   .success(function(responseData) {\n\n    \t   \tappServices.processResponse(responseData,null, function(reactionCode) {\n\n    \t   \t\tvar requestData = responseData.data;\n\n\t        \tappServices.showDialog(requestData,\n\t            {\n\t                templateUrl : __globals.getTemplateURL(\n\t                        'tax.manage.edit-dialog'\n\t                    )\n\t            },\n\t            function(promiseObj) {\n\n\t            \t// Check if tax updated\n\t                if (_.has(promiseObj.value, 'tax_updated') \n\t                    && promiseObj.value.tax_updated === true) {\n\t                \t\n\t                \t$scope.$parent.taxListCtrl.reloadDT();\n\t                }\n\t                \n\t                $state.go('taxes');\n\t               \n\t            });\n\t        });\n     \t});\n\n\t};\n\n\t/**\n\t * TaxEditController - handle scope of edit dialog & also responsible for -\n     * form handling & dialog closing\n\t *\n\t * @inject $scope\n\t * @inject __Form\n\t * @inject appServices\n     * @inject $state\n\t *\n\t * @return void\n\t *-------------------------------------------------------- */\n\n\tfunction TaxEditController($scope, __Form, appServices, $state) {\n\n\t\tvar scope              = this,\n        \tngDialogData       = $scope.ngDialogData;\n       \t\tscope.updateURL    = {\n\t\t\t\t'apiURL' :'manage.tax.edit.process',\n\t\t\t\t'taxID'  : $state.params.taxID\n\t\t\t};\n\n\t\tscope = __Form.setup(scope, 'manage_tax_edit', 'taxData');\n\n        scope.countries_select_config = __globals.getSelectizeOptions({\n            valueField  : 'value',\n            labelField  : 'text',\n            searchField : [ 'text' ]  \n        });\n        \n\t\tscope.countries = ngDialogData.countries.data.countries;\n\t\t\n\t\tscope   = __Form.updateModel(scope, $scope.ngDialogData)\n\n\t\tscope.taxType \t\t\t= __globals.generateKeyValueItems(ngDialogData.taxType);\n        scope.taxData \t\t\t= ngDialogData.taxData;\n        scope.currencySymbol \t= ngDialogData.currencySymbol;\n        scope.currency \t\t\t= ngDialogData.currency;\n\n\t\t/**\n\t\t  * Submit edit tax form\n\t\t  *\n\t\t  * @return void\n\t\t  *---------------------------------------------------------------- */\n\t\t\n\t\tscope.submit = function() {\n\n\t\t    __Form.process(scope.updateURL, scope)\n                .success(function(responseData) {\n\n                appServices.processResponse(responseData, null, function() {\n                    $scope.closeThisDialog( { tax_updated : true } );\n                });    \n\n            });\n\n\t\t}\n\n\t\t/**\n\t  \t  * Close dialog\n\t  \t  *\n\t  \t  * @return void\n\t  \t  *---------------------------------------------------------------- */\n\t\tscope.closeDialog = function() {\n  \t  \t\t$scope.closeThisDialog();\n  \t  \t};\n\n\t};\n\n})();","/*!\n *  Engine      : ManageReportEngine \n *  Component   : Manage/Report\n----------------------------------------------------------------------------- */\n\n(function( window, angular, undefined ) {\n\n\t'use strict';\n\t\n\t/*\n\t  Manage report Engine\n\t  -------------------------------------------------------------------------- */\n\t\n\tangular.module('ManageApp.report', [])\n\n\t\t/**\n    \t  * ReportController for list of order\n    \t  *\n    \t  * @inject __Utils\n    \t  * @inject __Form\n    \t  * @inject $state\n    \t  * @inject appServices\n    \t  * \n    \t  * @return void\n    \t *-------------------------------------------------------- */\n\n\t\t.controller('ReportController', [ \n            '__Utils',\n            '__Form',\n            '$state',\n            'appServices',\n            '$rootScope',\n            '$scope',\n            '__DataStore',\n            function (__Utils, __Form , $state, appServices, $rootScope, $scope, __DataStore) {\n\n            \tvar scope = this,\n                orderReportPieChart = null,\n                orderPaymentePieChart = null,\n                paymentReportPieChart = null,\n                currentStateName = $state.current.name;\n            \tscope = __Form.setup(scope, 'manage_report_list', 'reportData');\n\n            \tscope.reportData.status = 1; // new\n                scope.reportData.paymentStatus = 2; // new\n            \tscope.reportData.order \t= 1; // placed\n            \tscope.duration \t\t\t= 8; // current year\n\n            \t//scope.statuses \t\t\t= __globals.configItem('order_status');\n            \t\n                scope.dateConfig = {\n                    'format' : 'YYYY-MM-DD',\n                    'time'    : false\n                };\n                \n            \t// set date\n\t\t\t\tscope.monthFirstDay       = moment().startOf('month')\n\t\t\t\t                            .format('YYYY-MM-DD');\n\n\t\t\t\tscope.monthLastDay        = moment().endOf('month')\n\t\t\t\t\t\t\t\t\t\t\t.format('YYYY-MM-DD');\n\n\n\t\t\t\tscope.lastMonthFirstDay   = moment().subtract(1, 'months')\n\t\t\t\t                            .startOf('month')\n\t\t\t\t\t\t\t\t\t\t\t.format('YYYY-MM-DD');\n\n\t\t\t\tscope.lastMonthLastDay    = moment().subtract(1, 'months')\n\t\t\t\t                            .endOf('month')\n\t\t\t\t\t\t\t\t\t\t\t.format('YYYY-MM-DD');\n\t\t\t\t    \n\t\t\t\tscope.currentWeekFirstDay = moment().startOf('week')\n\t\t\t\t\t\t\t\t\t\t\t\t\t.format('YYYY-MM-DD');\n\n\t\t\t\tscope.currentWeekLastDay  = moment().endOf('week')\n\t\t\t\t\t\t\t\t\t\t\t\t\t.format('YYYY-MM-DD');\n\n\n\t\t\t\tscope.lastWeekFirstDay    = moment().weekday(-7)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.format('YYYY-MM-DD');\n\n\t\t\t\tscope.lastWeekLastDay     = moment().weekday(-1)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.format('YYYY-MM-DD');\n\n\t\t\t\tscope.today               = moment().format('YYYY-MM-DD');\n\n\t\t\t\tscope.yesterday           = moment().subtract(1, 'day')\n\t\t\t\t\t\t\t\t\t\t\t\t\t.format('YYYY-MM-DD');\n\n                scope.lastYearFirstDay    = moment().subtract(1, 'year').startOf('year').format('YYYY-MM-DD');\n\n                scope.lastYearLastDay     = moment().subtract(1, 'year').endOf('year').format('YYYY-MM-DD');\n\n                scope.currentYearFirstDay = moment().startOf('year').format('YYYY-MM-DD');\n\n                scope.currentYearLastDay  = moment().endOf('year').format('YYYY-MM-DD');\n\n                scope.last30Days          = moment().subtract(30, 'day').format('YYYY-MM-DD');\n\n            \t// date and time\n            \tvar today = moment().format('YYYY-MM-DD');\n\n\t\t\t\tscope.reportData.start = today;\n\t\t\t\tscope.reportData.end   = today;\n\n\t\t\t\t// scope.startDateConfig = {\n\t\t\t\t// \ttime    : false\n\t\t\t\t// };\n\n\t\t\t\t// scope.endDateConfig = {\n\t\t\t\t// \tminDate : moment().format('YYYY-MM-DD'),\n\t\t\t\t// \ttime    : false\n\t\t\t\t// };\n\n\t\t\t\t$scope.$watch('reportCtrl.reportData.start', \n\t                function(currentValue, oldValue) {\n\n\t                var $element = angular.element('#end');\n\t          \n\t                // Check if currentValue exist\n\t                if (_.isEmpty(currentValue)) {\n\t      \n\t                    $element.bootstrapMaterialDatePicker('setMinDate', '');\n\n\t                } else {\n\n\t                    $element.bootstrapMaterialDatePicker('setMinDate', currentValue);\n\t                }\n\t\t\t\t});\n\n\t\t\t\t/**\n\t\t\t\t  * Call when start date updated\n\t\t\t\t  *\n\t\t\t\t  * @param startDate\n\t\t\t\t  *\n\t\t\t\t  * @return void\n\t\t\t\t  *---------------------------------------------------------------- */\n\t\t\t\tscope.startDateUpdated = function(startDate) {\n\n\t\t\t\t\tscope.reportData.start = startDate;\n                    scope.duration = 10; // Custom\n\t\t\t\t};\n\n\t\t\t\t/**\n\t\t\t\t  * Call when start date updated\n\t\t\t\t  *\n\t\t\t\t  * @param endDate\n\t\t\t\t  *\n\t\t\t\t  * @return void\n\t\t\t\t  *---------------------------------------------------------------- */\n\t\t\t\tscope.endDateUpdated = function(endDate) {\n\t\t\t\t\t\n\t\t\t\t\tif (scope.reportData.start > scope.reportData.end) { \n\t\t\t\t\t\tscope.reportData.end = endDate;\n\t\t\t\t\t}\n\t\t\t\t\tscope.reportData.end = endDate;\n                    scope.duration = 10; // Custom\n\t\t\t\t};\n\n\n\t\t\t\t/**\n\t\t\t  \t  * get date and time according to duration \n\t\t\t  \t  *\n\t\t\t  \t  * @param duration\n\t\t\t  \t  *\n\t\t\t  \t  *---------------------------------------------------------------- */\n\t\t        scope.durationChange = function (duration) {\n\t\t        \t\n\t\t        \tif (duration == 1) { // current month\n\n\t\t        \t\tscope.reportData.start \t = scope.monthFirstDay;\n\t\t        \t\tscope.reportData.end   = scope.monthLastDay;\n\t\t        \t\t      \n\t\t        \t} else if (duration == 2) { // last month\n\n\t\t        \t\tscope.reportData.start   = scope.lastMonthFirstDay;\n\t\t        \t\tscope.reportData.end   = scope.lastMonthLastDay;\n\n\t\t        \t} else if (duration == 3) { // current week\n\n\t\t        \t\tscope.reportData.start   = scope.currentWeekFirstDay;\n\t\t        \t\tscope.reportData.end   = scope.currentWeekLastDay;\n\n\t\t        \t} else if (duration == 4) { // last week\n\n\t\t        \t\tscope.reportData.start   = scope.lastWeekFirstDay;\n\t\t        \t\tscope.reportData.end   = scope.lastWeekLastDay;\n\n\t\t        \t} else if (duration == 5) { // today\n\n\t\t        \t\tscope.reportData.start   = scope.today;\n\t\t        \t\tscope.reportData.end   = scope.today;\n\n\t\t        \t} else if (duration == 6) { // yesterday\n\n\t\t        \t\tscope.reportData.start   = scope.yesterday;\n\t\t        \t\tscope.reportData.end   = scope.yesterday;\n\n\t\t        \t} else if (duration == 7) { // last year\n\n                        scope.reportData.start   = scope.lastYearFirstDay;\n                        scope.reportData.end   = scope.lastYearLastDay;\n\n                    } else if (duration == 8) { // current year\n\n                        scope.reportData.start   = scope.currentYearFirstDay;\n                        scope.reportData.end   = scope.currentYearLastDay;\n\n                    } else if (duration == 9) { // last 30 days\n\n                        scope.reportData.start   = scope.last30Days;\n                        scope.reportData.end   = scope.today;\n\n                    }\n\t\t        }\n\n                scope.durationChange(scope.duration);\n\n\n\t\t\t\tvar dtReportColumnsData = [\n\t\t            {\n\t\t                \"name\"      : \"order_uid\",\n\t\t                \"orderable\" : true,\n\t\t                \"template\"  : \"#orderColumnIdTemplate\"\n\t\t            },\n\t\t            {\n\t\t                \"name\"      : 'fname',\n\t\t                \"orderable\" : true,\n\t\t                \"template\"  : \"#userNameColumnIdTemplate\"\n\t\t            },\n\t\t            {\n\t\t                \"name\"      : \"status\",\n\t\t                \"orderable\" : true,\n\t\t                \"template\"  : \"#orderStatusColumnIdTemplate\"\n\t\t            },\n                    {\n                        \"name\"      : \"formated_payment_status\",\n                        \"orderable\" : false\n                    },\n\t\t            {\n\t\t                \"name\"      : \"creation_date\",\n\t\t                \"orderable\" : true,\n\t\t                \"template\"  : \"#orderColumnTimeTemplate\"\n\t\t            },\n\t\t            {\n\t\t                \"name\"      : \"totalAmount\",\n\t\t                \"orderable\" : true,\n\t\t                \"template\"  : \"#orderColumnTotalAmountTemplate\"\n\t\t            },\n\t\t            {\n\t\t                \"name\"      : null,\n\t\t                \"template\"  : \"#orderActionColumnTemplate\"\n\t\t            }\n\t\t        ];\n\n                scope.getReportData = function(currency) {\n                    var filterStatus = 0;\n                   \n                    if (currentStateName == 'order_report') { \n                        filterStatus = scope.reportData.status;\n                    } else if (currentStateName == 'payment_report') { \n                        filterStatus = scope.reportData.paymentStatus;\n                    }\n\n                    __DataStore.fetch({\n                        'apiURL'      : 'manage.report.get.order_config_data',\n                        'startDate'   : scope.reportData.start, // start date\n                        'endDate'     : scope.reportData.end,   // end date\n                        'status'      : filterStatus, // status\n                        'order'       : scope.reportData.order  // order\n                    }).success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function(){\n                            var requestData = responseData.data;\n                            scope.defaultCurrencyExist = requestData.defaultCurrencyExist;\n\n                            _.defer(function() {\n                                scope.currencyList = requestData.currencyList;\n\n                                scope.paymentCurrencyList = requestData.paymentCurrencyList;\n                            })\n\n                            _.defer(function() {\n                                if (!_.isEmpty(currency)) {\n                                    scope.reportData.select_currency = currency;\n                                }\n\n                                if ((scope.defaultCurrencyExist) && (_.isEmpty(currency))) {\n                                    scope.reportData.select_currency = requestData.currentCurrency;\n                                }\n                             })\n                            \n                            // list of status\n                            scope.statuses  = __globals.generateKeyValueItems(requestData.orderConfigStatusItems);\n                            scope.itemName = __ngSupport.getText(__globals.getJSString('status_array_item_in_report'));\n\n                            // Push one more items in status array\n                            scope.statuses.push({\n                               id         : 9,\n                               name     : scope.itemName\n                            });\n\n                            // list of status\n                            scope.paymentStatuses  = __globals.generateKeyValueItems(requestData.payment_status);\n\n                            // Push one more items in status array\n                            scope.paymentStatuses.push({\n                               id         : 9,\n                               name     : scope.itemName\n                           });\n\n                           scope.orderList = __globals.generateKeyValueItems(requestData.orderConfigDateItems);\n                        });\n\n                    });\n                };\n                //scope.getReportData();\n\n\t\t    \tscope.getReports = function (type, currency) {\n\n                    if ($rootScope.canAccess('manage.report.list') && currentStateName == 'order_report') {\n\n                        scope.getReportData(currency);\n\n                        if (!_.isEmpty(orderReportPieChart) || !_.isEmpty(orderPaymentePieChart)) {\n                           orderReportPieChart.destroy();\n                           orderPaymentePieChart.destroy();\n                        }\n\n                        // distroy instance of datatable\n                        if (scope.reportListDataTable) {\n                            scope.reportListDataTable.destroy();\n                        }\n                    \n                        scope.reportListDataTable = __DataStore.dataTable('#manageReportList', {\n                            url : {\n                                'apiURL'      : 'manage.report.list',\n                                'startDate'   : scope.reportData.start, // start date\n                                'endDate'      : scope.reportData.end,   // end date\n                                'status'      : scope.reportData.status, // status\n                                'order'          : scope.reportData.order,  // order\n                                'currency'    : currency ? currency : null // Type\n                            },\n                            dtOptions       : {\n                                \"searching\"     : true\n                            },\n                            columnsData     : dtReportColumnsData, \n                            scope           : $scope\n\n                        }, {'fresh' : true}, scope.countData = function (dataTableCollection) {\n                            // Check table status\n                            scope.tableStatus = dataTableCollection.data;\n\n                            //scope.currencyList = dataTableCollection._options.currencyList;\n                            \n                            // Get order total amount by currency code\n                            scope.totalAmounts = dataTableCollection._options.totalAmounts.orderAmountByType;\n\n                        /*    scope.debitAmount = scope.totalAmounts.debit \n                            scope.creditAmount = scope.totalAmounts.credit*/\n\n                            // Excel download URL\n                            scope.reportExcelDownloadURL = dataTableCollection._options.excelDownloadURL;\n                          \n                            scope.reportDuration   =__globals.generateKeyValueItems(dataTableCollection._options.duration);\n\n                            scope.orderReportData = dataTableCollection._options.orderReportData;\n                            scope.orderPaymentData = dataTableCollection._options.orderPaymentData;\n                            \n                            //create order report pie chart start\n                            var orderReportChart = document.getElementById(\"lw-order-report-chart\");\n                      \n                            // var myPieChart = new Chart(orderPayment,{\n                            orderReportPieChart = appServices.createBarChart({\n                                'elementId' : orderReportChart,\n                                'type' : 'pie'\n                            },\n                            {\n                                'data': scope.orderReportData.orderData,\n                                'labels' : scope.orderReportData.orderStatusLabel\n                            },\n                            {\n                                'options' : {\n                                    responsive: true,\n                                    legend: {\n                                        onClick: function (e) {\n                                            e.stopPropagation();\n                                        }\n                                    }\n                                }\n                            });\n                            //create order report pie chart end\n\n                            //create order report pie chart start\n                            var orderPaymentChart = document.getElementById(\"lw-order-payment-chart\");\n\n                            // var myPieChart = new Chart(orderPayment,{\n                            orderPaymentePieChart = appServices.createBarChart({\n                                'elementId' : orderPaymentChart,\n                                'type' : 'pie'\n                            },\n                            {\n                                'data': scope.orderReportData.orderPaymentData,\n                                'labels' : scope.orderReportData.orderPaymentLabel\n                            },\n                            {\n                                'options' : {\n                                    responsive: true,\n                                    legend: {\n                                        onClick: function (e) {\n                                            e.stopPropagation();\n                                        }\n                                    }\n                                }\n                            });\n                            //create order report pie chart end\n\n                        });\n                    }\n                    \n\t\t    \t};\n\t\t    \t\n\t\t    \tscope.getReports();\n\n                /**\n                  * get PaymentData\n                  *\n                  * @param number orderID\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.getPaymentData = function(currency) {\n                     \n                    if ($rootScope.canAccess('manage.payment_report.list') && currentStateName == 'payment_report') {\n                        scope.getReportData();\n                    \n                        if (!_.isEmpty(paymentReportPieChart)) {\n                            paymentReportPieChart.destroy();\n                        }\n\n                        __DataStore.fetch({\n                            'apiURL'      : 'manage.payment_report.list',\n                            'startDate'   : scope.reportData.start, // start date\n                            'endDate'     : scope.reportData.end,   // end date\n                            'status'      : scope.reportData.paymentStatus, // status\n                            'order'       : scope.reportData.order,  // order\n                            'currency'    : currency ? currency : null // Type\n                        })\n                        .success(function(responseData) {\n                            \n                            if (!_.isEmpty(currency)) {\n                                scope.reportData.select_currency = currency; \n                            }\n\n                            appServices.processResponse(responseData, null, function() {\n                                \n                                var requestData = responseData.data;\n                                scope.excelDownloadURL = requestData.excelDownloadURL;\n                                \n                                //scope.currencyList = requestData.currencyList;\n                                \n                                scope.reportDuration   =__globals.generateKeyValueItems(requestData.duration);\n\n                                // Get order total amount by currency code\n                                scope.totalAmounts = requestData.orderAmountByType;\n                                scope.paymentReportData = requestData.paymentReportChartData;\n\n                                // scope.debitAmount = scope.totalAmounts.debit; \n                                // scope.creditAmount = scope.totalAmounts.credit;\n\n                                //create order report pie chart start\n                                var lwPaymentReportChart = document.getElementById(\"lw-payment-report-bar-chart\");\n\n                               if (!_.isNull(lwPaymentReportChart)) {\n                                    paymentReportPieChart = appServices.createBarChart({\n                                        'elementId' : lwPaymentReportChart,\n                                        'type' : 'bar'\n                                    },\n                                    {\n                                        'data': scope.paymentReportData.paymentChartDataSet,\n                                        'labels' : scope.paymentReportData.currencyLabel\n                                    },\n                                    {\n                                        'options' : {\n                                            responsive: true,\n                                            legend: {\n                                                onClick: function (e) {\n                                                    e.stopPropagation();\n                                                }\n                                            },\n                                            scales: {\n                                                xAxes: [{\n                                                    barPercentage: 1.5,\n                                                    categoryPercentage: 0.1,\n                                                }]\n                                            }\n                                        }\n                                    });\n                                }\n                                //create order report pie chart end\n                                \n                            });    \n\n                        });   \n                    }\n     \n                };\n                scope.getPaymentData();\n\n\t\t\t\t/**\n\t\t          * order detail dialog\n\t\t          *\n\t\t          * @param number orderID\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\t\t        scope.orderDetailsDialog = function(orderID) {\n\n\t\t            __DataStore.fetch({\n\t                    'apiURL'    : 'manage.order.details.dialog',\n\t                    'orderID'   :  orderID\n\t                })\n\t                .success(function(responseData) {\n\t                \n\t                    appServices.processResponse(responseData, null, function() {\n\t                        \n\t                        var requestData = responseData.data;\n\t                        \n\t                        appServices.showDialog({\n\t                           'orderDetails'    : requestData.orderDetails\n\t                        },\n\t                        {\n\t                            templateUrl : __globals.getTemplateURL(\n\t                                'report.manage.details-dialog'\n\t                            )\n\t                        },\n\t                        function(promiseObj) {\n\t                        \t\n\t                        });\n\n\t                    });    \n\n\t                });\n\t\t\t\t};\n\n\t\t\t}\n    \t])\n\n\t\t/**\n    \t  * OrderReportController for list of order\n    \t  *\n    \t  * @inject __Form\n    \t  * @inject $scope\n    \t  * \n    \t  * @return void\n    \t *-------------------------------------------------------- */\n\n\t\t.controller('OrderReportController', [ \n            '$scope',\n            function ($scope) {\n\n            \tvar scope = this;\n\n            \tscope.ngDialogData   = $scope.ngDialogData;\n                    \n\t            var requestedData \t\t= scope.ngDialogData.orderDetails.data;\n\t        \t\n\t\t        scope.billingAddress   \t= requestedData.address.billingAddress;\n\t\t        scope.shippingAddress   = requestedData.address.shippingAddress;\n\t\t        scope.sameAddress   \t= requestedData.address.sameAddress;\n\n\t\t        scope.user\t\t\t\t= requestedData.user;\n\t\t        scope.order\t\t\t\t= requestedData.order;\n\t\t        scope.orderProducts\t\t= requestedData.orderProducts;\n\t\t        scope.coupon\t\t\t= requestedData.coupon;\n\t\t        scope.taxes\t\t\t\t= requestedData.taxes;\n\t\t        scope.shipping\t\t\t= requestedData.shipping;\n            \t\n\t            /**\n\t\t          * Close dialog\n\t\t          *\n\t\t          * @return void\n\t\t          *---------------------------------------------------------------- */\n\n\t\t    \tscope.close = function() {\n\t\t            $scope.closeThisDialog();\n\t\t        }\n            }\n        ])\n\n        /**\n        * Product Report List Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('ProductReportListController', [\n            '$scope',\n            '__DataStore',\n            '$state',   \n            'appServices',           \n            '$rootScope',\n            '__Form',     \n        function ( $scope, __DataStore, $state, appServices, $rootScope, __Form) {\n\n            var dtColumnsData = [\n                    {\n                        \"name\"      : \"name\",\n                        \"orderable\" : true,\n                    },\n                    {\n                        \"name\"      : \"created_at\",\n                        \"orderable\" : true,\n                        \"template\"  : \"#createDateColumnTemplate\"\n                    },\n                    {\n                        \"name\"      : \"updated_at\",\n                        \"orderable\" : true,\n                        \"template\"  : \"#updateDateColumnTemplate\"\n                    },\n                    {\n                        \"name\"      : \"testData\",\n                        \"orderable\" : true,\n                    },\n                ],\n                scope   = this;\n                var productReportBarChart = null;\n                scope.duration             = 8; // current year\n\n                scope = __Form.setup(scope, 'manage_product_report_list', 'productReportData');\n\n                scope.productReportData.order = 1; // created on\n\n                scope.dateConfig = {\n                \t'format' : 'YYYY-MM-DD',\n                \t'time'    : false\n                };\n\n                // set date\n                scope.monthFirstDay       = moment().startOf('month')\n                                            .format('YYYY-MM-DD');\n\n                scope.monthLastDay        = moment().endOf('month')\n                                            .format('YYYY-MM-DD');\n\n\n                scope.lastMonthFirstDay   = moment().subtract(1, 'months')\n                                            .startOf('month')\n                                            .format('YYYY-MM-DD');\n\n                scope.lastMonthLastDay    = moment().subtract(1, 'months')\n                                            .endOf('month')\n                                            .format('YYYY-MM-DD');\n                    \n                scope.currentWeekFirstDay = moment().startOf('week')\n                                                    .format('YYYY-MM-DD');\n\n                scope.currentWeekLastDay  = moment().endOf('week')\n                                                    .format('YYYY-MM-DD');\n\n\n                scope.lastWeekFirstDay    = moment().weekday(-7)\n                                                    .format('YYYY-MM-DD');\n\n                scope.lastWeekLastDay     = moment().weekday(-1)\n                                                    .format('YYYY-MM-DD');\n\n                scope.today               = moment().format('YYYY-MM-DD');\n\n                scope.yesterday           = moment().subtract(1, 'day')\n                                                    .format('YYYY-MM-DD');\n\n                scope.lastYearFirstDay    = moment().subtract(1, 'year').startOf('year').format('YYYY-MM-DD');\n\n                scope.lastYearLastDay     = moment().subtract(1, 'year').endOf('year').format('YYYY-MM-DD');\n\n                scope.currentYearFirstDay = moment().startOf('year').format('YYYY-MM-DD');\n\n                scope.currentYearLastDay  = moment().endOf('year').format('YYYY-MM-DD');\n\n                scope.last30Days          = moment().subtract(30, 'day').format('YYYY-MM-DD');\n\n                // date and time\n                var today = moment().format('YYYY-MM-DD');\n\n                scope.productReportData.start = today;\n                scope.productReportData.end   = today;\n \n\n                $scope.$watch('reportCtrl.productReportData.start', \n                    function(currentValue, oldValue) {\n    \t\t\t\t\n                    var $element = angular.element('#end');\n              \n                    // Check if currentValue exist\n                    if (_.isEmpty(currentValue)) {\n \n                        $element.bootstrapMaterialDatePicker('setMinDate', null);\n\n                    } else {\n \n                        $element.bootstrapMaterialDatePicker('setMinDate', currentValue);\n                    }\n                });\n\n                /**\n                  * Call when start date updated\n                  *\n                  * @param startDate\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.startDateUpdated = function(startDate) {\n\n                    scope.productReportData.start = startDate;\n                    scope.duration = 10; // Custom\n                };\n\n                /**\n                  * Call when start date updated\n                  *\n                  * @param endDate\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.endDateUpdated = function(endDate) {\n                    \n                    if (scope.productReportData.start > scope.productReportData.end) { \n                        scope.productReportData.end = endDate;\n                    }\n                    scope.productReportData.end = endDate;\n                    scope.duration = 10; // Custom\n                };\n\n\n                /**\n                    * get date and time according to duration \n                    *\n                    * @param duration\n                    *\n                    *---------------------------------------------------------------- */\n                scope.durationChange = function (duration) {\n                    \n                    if (duration == 1) { // current month\n\n                        scope.productReportData.start      = scope.monthFirstDay;\n                        scope.productReportData.end   = scope.monthLastDay;\n                              \n                    } else if (duration == 2) { // last month\n\n                        scope.productReportData.start   = scope.lastMonthFirstDay;\n                        scope.productReportData.end   = scope.lastMonthLastDay;\n\n                    } else if (duration == 3) { // current week\n\n                        scope.productReportData.start   = scope.currentWeekFirstDay;\n                        scope.productReportData.end   = scope.currentWeekLastDay;\n\n                    } else if (duration == 4) { // last week\n\n                        scope.productReportData.start   = scope.lastWeekFirstDay;\n                        scope.productReportData.end   = scope.lastWeekLastDay;\n\n                    } else if (duration == 5) { // today\n\n                        scope.productReportData.start   = scope.today;\n                        scope.productReportData.end   = scope.today;\n\n                    } else if (duration == 6) { // yesterday\n\n                        scope.productReportData.start   = scope.yesterday;\n                        scope.productReportData.end   = scope.yesterday;\n\n                    } else if (duration == 7) { // last year\n\n                        scope.productReportData.start   = scope.lastYearFirstDay;\n                        scope.productReportData.end   = scope.lastYearLastDay;\n\n                    } else if (duration == 8) { // current year\n\n                        scope.productReportData.start   = scope.currentYearFirstDay;\n                        scope.productReportData.end   = scope.currentYearLastDay;\n\n                    } else if (duration == 9) { // last 30 days\n\n                        scope.productReportData.start   = scope.last30Days;\n                        scope.productReportData.end   = scope.today;\n\n                    }\n                }\n\n                scope.durationChange(scope.duration);\n                var isChartWidthSet = false;\n\n                /**\n                * Request to server\n                *\n                * @return  void\n                *---------------------------------------------------------- */\n               \n                scope.getProductReportData = function() {\n                    if (!_.isEmpty(productReportBarChart)) {\n\n                       productReportBarChart.destroy();\n                    }\n\n                    // distroy instance of datatable\n                    if (scope.productReportDataTable) {\n                        scope.productReportDataTable.destroy();\n                    }    \n\n                    scope.productReportDataTable = __DataStore.dataTable('#lwProductReportList', {\n                        url : {\n                            'apiURL'      : 'manage.product_report.list',\n                            'startDate'   : scope.productReportData.start, // start date\n                            'endDate'     : scope.productReportData.end,   // end date\n                            'order'       : scope.productReportData.order,  // order\n                        },\n                        dtOptions   : {\n                            \"searching\": true\n                        },\n                        columnsData : dtColumnsData, \n                        scope       : $scope\n\n                    }, {'fresh' : true}, scope.countData = function (dataTableCollection) {\n\n                        if (!_.isEmpty(productReportBarChart)) {\n\n                           productReportBarChart.destroy();\n                        }\n\n                        scope.reportDuration   =__globals.generateKeyValueItems(dataTableCollection._options.duration);\n\n                        scope.orderList   =__globals.generateKeyValueItems(dataTableCollection._options.orderDateList);\n\n                        scope.productChartData = dataTableCollection._options.productChartData;\n\n                        if (scope.productChartData.productCount == 0) {\n                            $('#lw-chart-Area-Wrapper').removeClass('lw-chart-Area-Wrapper');\n                        } else {\n                            $('#lw-chart-Area-Wrapper').addClass('lw-chart-Area-Wrapper');\n                        }\n                    \n                         //create order report pie chart start\n                        var lwProductReportChart = document.getElementById(\"lw-product-report-bar-chart\");\n\n                       \n                        function addData(numData, chart) {\n\n                            if (!isChartWidthSet) {\n                                for (var i = 0; i < numData; i++) {\n                                    var newidth = $('.lw-chart-wrapper').width() + 60;\n                                    $('.lw-chart-wrapper').width(newidth);\n                                }\n                                isChartWidthSet = true;\n                            }                            \n                        }\n                    \n                        productReportBarChart = appServices.createBarChart({\n                            'elementId' : lwProductReportChart,\n                            'type' : 'bar'\n                        },\n                        {\n                            'data': scope.productChartData.chartData,\n                            'labels' : scope.productChartData.labels,\n                        },\n                        {\n                            'options' : {\n                                responsive: true,\n                                legend: {\n                                    display: false,\n                                    onClick: function (e) {\n                                        e.stopPropagation();\n                                    }\n                                },\n                                scales: {\n                                    xAxes: [{\n                                        barPercentage: 1.5,\n                                        categoryPercentage: 0.1,\n                                    }]\n                                }\n                            }\n                        });\n                        addData(10, productReportBarChart);\n                        //create order report pie chart end\n                    });\n                };\n                scope.getProductReportData();\n               \n                /*\n                Reload current datatable\n                ------------------------------------------------------------ */\n                scope.reloadDT = function() {\n                    __DataStore.reloadDT(scope.productReportDataTable);\n                };\n                \n                // when add new record \n                $scope.$on('product_report_added_or_updated', function (data) {\n                    \n                    if (data) {\n                        scope.reloadDT();\n                    }\n\n                });\n        \n        }])\n        // Sample List Controller ends here\n\n\n})( window, window.angular );","(function() {\n'use strict';\n    \n    /*\n      Login Controller Module\n      -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.login', [])\n\n        /**\n          * UserLoginController - login a user in application\n          *\n          * @inject __Form\n          * @inject __Auth\n          * @inject appServices\n          * @inject __Utils\n          * \n          * @return void\n          *-------------------------------------------------------- */\n\n        .controller('UserLoginController',   [\n            '__Form', \n            '__Auth', \n            'appServices',\n            '__Utils',\n\t\t\t'$scope',\n            function (__Form, __Auth, appServices, __Utils, $scope) {\n\n                var scope   = this;\n\n                scope = __Form.setup(scope, 'form_user_login', 'loginData', {\n                    secured : true\n                });\n\n                scope.show_captcha      = false;\n                scope.request_completed = false;\n                scope.guestLogin        = false;\n                scope.site_key          = __globals.getAppImmutables('recaptcha_site_key');\n\n                if (_.has($scope.ngDialogData, 'guestOrder')\n                    && $scope.ngDialogData.guestOrder == true) {\n                    scope.guestLogin = true;\n                }\n\n                /**\n                  * Get login attempts for this client ip\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                __Form.fetch('user.login.attempts').success(function(responseData) {\n                    \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\t\t\t\t\t\tscope.show_captcha      = responseData.data.show_captcha;\n                        scope.selectUser        = responseData.data.selectUser;\n                        scope.request_completed = true;\n                        \n                    });                   \n                });\n\n                \n                scope.addUserData = function(value) {\n                    \n                    if (value) {\n                        scope.loginData.email    = scope.selectUser[value]['email'];\n                        scope.loginData.password = scope.selectUser[value]['password']\n                    }\n                };\n                \n                /**\n                  * Fetch captch url\n                  *\n                  * @return string\n                  *---------------------------------------------------------------- */\n\n                scope.getCaptchaURL = function() {\n                    return __Utils.apiURL('security.captcha')+'?ver='+Math.random();\n                };\n\n                /**\n                  * Refresh captch \n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n\n                scope.refreshCaptcha = function() {\n                    scope.captchaURL = scope.getCaptchaURL();\n                };\n\n                scope.captchaURL  = scope.getCaptchaURL();\n\n                /**\n                * Submit login form action\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n\n                scope.submit = function() {\n\n                    scope.isInActive = false;\n\n                    __Form.process('user.login', scope).success(function(responseData) {\n\n                        var requestData = responseData.data;\n       \n                        appServices.processResponse(responseData, {\n                                error : function() {\n\n                                   // scope.isInActive = requestData.isInActive;\n\n                                    scope.show_captcha = requestData.show_captcha;\n\n                                    // reset password field\n                                    scope[scope.ngFormModelName].password   = \"\";\n\n                                    // Check if show captcha exist then refresh captcha\n                                    if (scope.show_captcha) {\n                                        scope[scope.ngFormModelName].confirmation_code   = \"\";\n                                        scope.refreshCaptcha();\n                                    }\n\n                                },\n                                otherError : function(reactionCode) {\n\n                                    scope.isInActive = requestData.isInActive;\n                                    \n                                    // If reaction code is Server Side Validation Error Then \n                                    // Unset the form fields\n                                    if (reactionCode == 3) {\n                                        // Check if show captcha exist then refresh captcha\n                                        if (scope.show_captcha) {\n                                            scope.refreshCaptcha();\n                                        }\n                                    } else if (reactionCode == 10) {\n                                        if (requestData.auth_info.authorized) {\n                                            window.location = window.appConfig.appBaseURL;\n                                        }\n                                    }\n\n                                }\n                            },\n                            function() {\n\n                                __Auth.checkIn(requestData.auth_info, function() {\n\n                                    if (requestData.intendedUrl) {\n\n                                        __globals.redirectBrowser(requestData.intendedUrl);\n\n                                    } else {\n                                        __globals.redirectBrowser(window.appConfig.appBaseURL);\n                                    }\n\n                                });\n                            });    \n\n                    });\n\n                };\n\n\n\n\t\t\t\t/**\n                * Submit login form action\n                *\n                * @return void\n                *---------------------------------------------------------------- */\n\n                scope.submitDialogLogin = function() {\n\n                    scope.isInActive = false;\n                  \n                    __Form.process('user.login', scope).success(function(responseData) {\n\n                        var requestData = responseData.data;\n\n                        appServices.processResponse(responseData, {\n                                error : function() {\n\n                                   // scope.isInActive = requestData.isInActive;\n\n                                    scope.show_captcha = requestData.show_captcha;\n\n                                    // reset password field\n                                    scope[scope.ngFormModelName].password   = \"\";\n\n                                    // Check if show captcha exist then refresh captcha\n                                    if (scope.show_captcha) {\n                                        scope[scope.ngFormModelName].confirmation_code   = \"\";\n                                        scope.refreshCaptcha();\n                                    }\n\n                                },\n                                otherError : function(reactionCode) {\n\n                                    scope.isInActive = requestData.isInActive;\n                                    \n                                    // If reaction code is Server Side Validation Error Then \n                                    // Unset the form fields\n                                    if (reactionCode == 3) {\n\n                                        // Check if show captcha exist then refresh captcha\n                                        if (scope.show_captcha) {\n                                            scope.refreshCaptcha();\n                                        }\n\n                                    } else if (reactionCode == 10) {\n                                        if (requestData.auth_info.authorized) {\n                                            window.location = window.appConfig.appBaseURL;\n                                        }\n                                    }\n\n                                }\n                            },\n                            function() {\n\n                                __Auth.checkIn(requestData.auth_info, function() {\n                                    \n                                    if (scope.guestLogin == true) {\n                                        __globals.redirectBrowser(__Utils.apiURL('order.summary.view'));\n                                    } else {\n                                        $scope.closeThisDialog({'login_success' : true});\n                                    }\n                                });\n\n                            });    \n\n                    });\n\n                };\n\n            }\n\n        ]);\n\n})();","(function() {\n'use strict';\n    \n    /*\n     UserLogoutController\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('UserApp.logout', [])\n        .controller('UserLogoutController',   [\n            '__DataStore', \n            '__Auth', \n            'appServices', \n            UserLogoutController \n        ]);\n\n    /**\n      * UserLogoutController for login logout\n      *\n      * @inject __DataStore\n      * @inject __Auth\n      * @inject appServices\n      * \n      * @return void\n      *-------------------------------------------------------- */\n\n    function UserLogoutController(__DataStore, __Auth, appServices) {\n\n        var scope   = this;\n\n        __DataStore.post('user.logout').success(function(responseData) {\n\n            appServices.processResponse(responseData, function(reactionCode) {\n\n                // set user auth information\n                __Auth.checkIn(responseData.data.auth_info);  \n\n            });\n\n        });\n\n    };\n\n})();","/*!\n*  Component  : RolePermission\n*  File       : RolePermissionDataServices.js  \n*  Engine     : RolePermissionServices \n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('ManageApp.RolePermissionDataServices', [])\n        .service('RolePermissionDataService',[\n            '$q', \n            '__DataStore',\n            'appServices',\n            RolePermissionDataService\n        ])\n\n        /*!\n         This service use for to get the promise on data\n        ----------------------------------------------------------------------------- */\n\n        function RolePermissionDataService($q, __DataStore, appServices) {\n\n            /*\n            Get Permissions\n            -----------------------------------------------------------------*/\n            this.getPermissions = function(roleId) {\n                \n                //create a differed object          \n                var defferedObject = $q.defer();   \n   \n                __DataStore.fetch({\n                    'apiURL' : 'manage.user.role_permission.read',\n                    'roleId' : roleId\n                }).success(function(responseData) {\n                            \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);  \n\n                    }); \n\n                });       \n\n               //return promise to caller          \n               return defferedObject.promise; \n            };\n\n            /*\n            Get Add Role Support Data\n            -----------------------------------------------------------------*/\n            this.getAddSupportData = function() {\n                \n                //create a differed object          \n                var defferedObject = $q.defer();   \n   \n                __DataStore.fetch('manage.user.role_permission.read.add_support_data')\n                    .success(function(responseData) {\n                            \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);  \n\n                    }); \n\n                });       \n\n               //return promise to caller          \n               return defferedObject.promise; \n            };\n\n            /*\n            Get add support Data \n            -----------------------------------------------------------------*/\n            this.getAllPermissionsById = function(roleId) {\n                \n                //create a differed object          \n                var defferedObject = $q.defer();   \n   \n                __DataStore.fetch({\n                        'apiURL' : 'manage.user.role_permission.read.using_id',\n                        'roleId' : roleId\n                    }).success(function(responseData) {\n                            \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);  \n\n                    }); \n\n                });       \n\n               //return promise to caller          \n               return defferedObject.promise; \n            };\n        };\n\n})(window, window.angular);\n","/*!\n*  Component  : RolePermission\n*  File       : RolePermission.js  \n*  Engine     : RolePermission \n----------------------------------------------------------------------------- */\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('ManageApp.RolePermissionEngine', [])\n\n        /**\n          * Role Permission Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('RolePermissionController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            function ($scope, __DataStore, __Form, $stateParams) {\n\n                var scope = this;\n\n            }\n        ])\n\n         /**\n        * Role Permission List Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object RolePermissionDataService\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('RolePermissionListController', [\n            '$scope',                \n            '__DataStore',                \n            '__Form',                \n            '$state',                \n            'appServices',                \n            '$rootScope',\n            'RolePermissionDataService',\n        function ( $scope, __DataStore, __Form, $state, appServices, $rootScope, RolePermissionDataService) {\n            var dtColumnsData = [\n                    {\n                        \"name\"      : \"title\",\n                        \"orderable\" : true,\n                    },\n                    {\n                        \"name\"      : null,\n                        \"template\"  : \"#rolePermissionActionColumnTemplate\"\n                    }\n                ],\n                scope   = this;\n\n                /**\n                * Get general user test as a datatable source object  \n                *\n                * @return  void\n                *---------------------------------------------------------- */\n\n                scope.rolePermissionDataTable = __DataStore.dataTable('#lwrolePermissionList', {\n                    url         : 'manage.user.role_permission.read.list', \n                    dtOptions   : {\n                        \"searching\": true,\n                        \"pageLength\" : 25\n                    },\n                    columnsData : dtColumnsData, \n                    scope       : $scope\n                });\n\n                /*\n                Reload current datatable\n                ------------------------------------------------------------ */\n                scope.reloadDT = function() {\n                    __DataStore.reloadDT(scope.rolePermissionDataTable);\n                };\n\n                /**\n                * rolePermission delete \n                *\n                * inject rolePermissionIdUid\n                *\n                * @return    void\n                *---------------------------------------------------------------- */\n\n                scope.delete = function(rolePermissionIdOrUid, name) {\n                   \n                    var $lwRolePermissionDeleteTextMsg = $('#lwRolePermissionDeleteTextMsg');\n\n                    __globals.showConfirmation({\n                        html : __globals.getReplacedString($lwRolePermissionDeleteTextMsg,\n                                    '__name__',\n                                    _.unescape(name)\n                                ),\n                        confirmButtonText : $lwRolePermissionDeleteTextMsg.attr('data-delete-button-text')\n                    }, function() {\n\n                        __DataStore.post({\n                            'apiURL' : 'manage.user.role_permission.write.delete',\n                            'rolePermissionIdOrUid' : rolePermissionIdOrUid\n                        }).success(function(responseData) {\n                            \n                            var message = responseData.data.message;\n                            \n                            appServices.processResponse(responseData, {\n\n                                error : function(data) {\n                                __globals.showConfirmation({\n                                    title   : $lwRolePermissionDeleteTextMsg .attr('data-error-text'),\n                                    text    : message,\n                                    type    : 'error'\n                                });\n                            }\n\n                            }, function(data) {\n                                __globals.showConfirmation({\n                                    title   : $lwRolePermissionDeleteTextMsg .attr('data-success-text'),\n                                    text    : message,\n                                    type    : 'success'\n                                });\n                                scope.reloadDT();\n                            }); \n\n                        });\n\n                    });\n                };\n\n                /**\n                * Show add new role dialog \n                *\n                * @return    void\n                *---------------------------------------------------------------- */\n                scope.showAddNewDialog = function() {\n\n                    appServices.showDialog({},\n                    {\n                        templateUrl : __globals.getTemplateURL(\n                                'user.role-permission.add-dialog'\n                            ),\n                        controller: 'AddRoleController as addRoleCtrl',\n                        resolve : {\n                            addSupportData : function() {\n                                return RolePermissionDataService\n                                        .getAddSupportData();\n                            }\n                        }\n                    },\n                    function(promiseObj) {\n                        if (_.has(promiseObj.value, 'role_Added') \n                            && (promiseObj.value.role_Added === true)) {\n                            scope.reloadDT();\n                        }\n                    }); \n                };\n\n                 /**\n                * Role Permission Dialog \n                *\n                * inject roleId\n                *\n                * @return    void\n                *---------------------------------------------------------------- */\n                scope.rolePermissionDialog = function(roleId, title) {\n                    \n                    appServices.showDialog({\n                        'roleId' : roleId,\n                        'title'  : _.unescape(title)\n                    },\n                    {\n                        templateUrl : __globals.getTemplateURL(\n                                'user.role-permission.dynamic-role-permissions'\n                            ),\n                        controller: 'DynamicRolePermissionController as DynamicRolePermissionCtrl',\n                        resolve : {\n                            permissionData : function() {\n                                return RolePermissionDataService\n                                        .getPermissions(roleId);\n                            }\n                        }\n                    },\n                    function(promiseObj) {\n\n                    }); \n                };\n\n            }\n        ])\n        // Role Permission List Controller ends here\n\n        /**\n          * Dynamic Role Permission Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('DynamicRolePermissionController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'appServices',\n            'permissionData',\n            function ($scope, __DataStore, __Form, $stateParams, appServices, permissionData) {\n                var scope    = this,\n                    ngDialog = $scope.ngDialogData,\n                    roleId   = ngDialog.roleId;\n\n                scope  = __Form.setup(scope, 'user_role_dynamic_access', 'accessData', {\n                    secured : true,\n                    unsecuredFields : []\n                });\n\n                scope.title = ngDialog.title;\n                scope.permissions = permissionData.permissions;\n              \n\t\t\t \tscope.accessData.allow_permissions = permissionData.allow_permissions;\n\t\t\t\tscope.accessData.deny_permissions = permissionData.deny_permissions;\n \t\t\t\tscope.checkedPermission = {};\n\n\t\t\t\tscope.disablePermissions = function(eachPermission, permissionID) {\n\n                    _.map(eachPermission.children, function(key) {\n                        if (_.includes(key.dependencies, permissionID)) {\n                            _.delay(function(text) {\n                                $('input[name=\"'+key.id+'\"]').attr('disabled', true);\n                            }, 500);\n                        }\n                    });\n\n                }\n \n\t\t\t\t_.map(scope.accessData.allow_permissions, function(permission) {\n\t\t\t\t \tscope.checkedPermission[permission] = \"2\";\n\t\t\t\t})\n\t\t\t\t_.map(scope.accessData.deny_permissions, function(permission) {\n\t\t\t\t \tscope.checkedPermission[permission] = \"3\";\n\n\t\t\t\t \t_.map(scope.permissions, function(eachPermission) {\n\n                        var pluckedIDs = _.pluck(eachPermission.children, 'id');\n                        \n                        if (_.includes(pluckedIDs, permission)) {\n                            scope.disablePermissions(eachPermission, permission)\n                        }\n\n                        if (_.has(eachPermission, 'children_permission_group')) {\n                             \n                            _.map(eachPermission.children_permission_group, function(groupchild) {\n\n                                var pluckedIDs = _.pluck(groupchild.children, 'id');\n                        \n                                if (_.includes(pluckedIDs, permission)) {\n                                    scope.disablePermissions(groupchild, permission)\n                                }\n                            });\n                        }\n                    });\n\t\t\t\t})\n\n                scope = __Form.updateModel(scope, scope.accessData);\n \n \t\t\t\t//for updating permissions\n                scope.checkPermission = function(childId, status) {\n \t\t\t\t\t\n \t\t\t\t\tif (!_.isString(status)) {\n \t\t\t\t\t\tstatus = status.toString();\n \t\t\t\t\t}\n\n \t\t\t\t\tscope.checkedPermission[childId] = status;\n\n                 \tif (status == \"2\") {\n                \t\tif(!_.includes(scope.accessData.allow_permissions, childId)) {\n                 \t\t\tscope.accessData.allow_permissions.push(childId);\n                \t\t}\n                 \t\tif (_.includes(scope.accessData.deny_permissions, childId)) {\n                 \t\t\tscope.accessData.deny_permissions = _.without(scope.accessData.deny_permissions, childId);\n                 \t\t}\n                \t} else if (status == \"3\")  {\n\n\t                   \tif(!_.includes(scope.accessData.deny_permissions, childId)) {\n                 \t\t\tscope.accessData.deny_permissions.push(childId);\n                \t\t}\n                 \t\tif (_.includes(scope.accessData.allow_permissions, childId)) {\n                 \t\t\tscope.accessData.allow_permissions = _.without(scope.accessData.allow_permissions, childId);\n                 \t\t}\n                \t} else {\n\n                \t\tif (_.includes(scope.accessData.deny_permissions, childId)) {\n                 \t\t\tscope.accessData.deny_permissions = _.without(scope.accessData.deny_permissions, childId);\n                 \t\t}\n                 \t\tif (_.includes(scope.accessData.allow_permissions, childId)) {\n                 \t\t\tscope.accessData.allow_permissions = _.without(scope.accessData.allow_permissions, childId);\n                 \t\t}\n                \t}\n\n                \t_.map(scope.permissions, function(permission) {\n                        \n                        var pluckedIDs = _.pluck(permission.children, 'id'),\n                        keyPermissions = [];\n                        if (_.includes(pluckedIDs, childId) && permission.children[0].id != childId) {\n                            // _.map(permission.children, function(key) {\n\n                            // \tif (permission.children[0].id != key.id && !_.isUndefined(scope.checkedPermission[key.id])) {\n                            // \t\tkeyPermissions.push(scope.checkedPermission[key.id]);\n                            // \t}\n                            //     // if (key.id == childId && permission.children[0].id != childId) {\n                            //     //     _.map(key.dependencies, function(dependency) {\n                            //     //         scope.checkedPermission[dependency] = \"2\";\n                            //     //     })\n                            //     // }\n                            // });\n\n                            // scope.checkedPermission[permission.children[0].id] = \"3\";\n \n                            // if (_.includes(keyPermissions, \"2\")) {\n                            // \tscope.checkedPermission[permission.children[0].id] = \"2\";\n                            // }\n\n                        } else if (_.includes(pluckedIDs, childId) && permission.children[0].id == childId) {\n\n                            _.map(permission.children, function(key) {\n \n                                if (key.id != permission.children[0].id) {\n                                    _.map(key.dependencies, function(dependency) {\n                                        \n                                        if (_.includes(key.dependencies, childId) && status == \"3\") {\n                                            \n                                            $('input[name=\"'+key.id+'\"]').attr('disabled', true);\n\n                                        } else {\n                                            $('input[name=\"'+key.id+'\"]').attr('disabled', false);\n\n                                        }\n                                    });\n                                }\n                            })\n                        }\n \n                        if (_.has(permission, 'children_permission_group')) {\n                            _.map(permission.children_permission_group, function(groupchild) {\n\n                                var pluckedGroupChildIDs = _.pluck(groupchild.children, 'id'), \n                                keyPermissionsGroup = [];\n\n                                if (_.includes(pluckedGroupChildIDs, childId) && groupchild.children[0].id != childId) {\n         //                            _.map(groupchild.children, function(groupchildkey) {\n         //                                // if (groupchildkey.id == childId && groupchild.children[0].id != childId) {\n         //                                //     _.map(groupchildkey.dependencies, function(dependency) {\n         //                                //         scope.checkedPermission[dependency] = \"2\";\n         //                                //     })\n         //                                // }\n\n         //                                if (groupchild.children[0].id != groupchildkey.id && !_.isUndefined(scope.checkedPermission[groupchildkey.id])) {\n\t\t       //                      \t\tkeyPermissionsGroup.push(scope.checkedPermission[groupchildkey.id]);\n\t\t       //                      \t}\n\n         //                            });\n\n         //                            scope.checkedPermission[groupchild.children[0].id] = \"3\";\n\n\t\t\t\t\t\t\t\t\t// if (_.includes(keyPermissionsGroup, \"2\")) {\n\t\t\t\t\t\t\t\t\t// \tscope.checkedPermission[groupchild.children[0].id] = \"2\";\n\t\t\t\t\t\t\t\t\t// }\n\n                                } else if (_.includes(pluckedGroupChildIDs, childId) && groupchild.children[0].id == childId) {\n \n                                    _.map(groupchild.children, function(key2) {\n                                                                  \n                                        if (key2.id != groupchild.children[0].id) {\n                                            _.map(key2.dependencies, function(dependency) {\n                                                \n                                                if (_.includes(key2.dependencies, childId) && status == \"3\") {\n                                                    \n                                                    $('input[name=\"'+key2.id+'\"]').attr('disabled', true);\n\n                                                } else {\n                                                    $('input[name=\"'+key2.id+'\"]').attr('disabled', false);\n\n                                                }\n                                            })\n                                        }\n                                    });\n                                }\n                            })\n                        } \n\t\t\t\t\t})\n              \t}\n \t\t\t \n                // scope.preparePermissionData = function() {\n                //     scope.accessData.allow_permissions = [];\n                //     scope.accessData.deny_permissions = [];\n                    \n                //     if (!_.isEmpty(scope.accessData.selected_permissions)) {\n                //         _.forEach(scope.accessData.selected_permissions, function(item) {\n                //             var number = item.split(\"_\").pop();\n                //             if (number == 2) {\n                //                 scope.accessData.allow_permissions.push(_.trimRight(item, '_'+number));\n                //             } else if (number == 3) {\n                //                 scope.accessData.deny_permissions.push(_.trimRight(item, '_'+number));\n                //             }\n                //         });\n                //     }                    \n                // }\n\n                /*\n                 Submit form action\n                -------------------------------------------------------------------------- */\n      //           scope.filterPermissions = function(match) {\n \n      //         \t\tvar treeInstance = $(\"#permissionTree\").fancytree(\"getTree\"),\n      //         \t\t\tfilteredNodes,\n      //           \t\tfilteredbranches,\n \t\t\t\t //        opts = {\n\t\t\t\t  //       \t'autoApply' : true,\n\t\t\t\t\t\t// \t'autoExpand' : true,\n\t\t\t\t\t\t// \t'fuzzy' : false,\n\t\t\t\t\t\t// \t'hideExpanders' : true,\n\t\t\t\t\t\t// \t'highlight' : true,\n\t\t\t\t\t\t// \t'leavesOnly' : true,\n\t\t\t\t\t\t// \t'nodata' : 'No results found.',\n\t\t\t\t\t\t// \t'mode' : \"hide\",\n\t\t\t\t\t\t// \t'counter': true,\n\t\t\t\t  //       };\n\n \t\t\t\t\t// \t// Pass function to perform match\n\t\t\t\t\t\t// filteredNodes = treeInstance.filterNodes(match, opts);\n\t\t\t\t\t\t// filteredbranches = treeInstance.filterBranches(match, opts);\n      //             }\n                  \n                /*\n                 Submit form action\n                -------------------------------------------------------------------------- */\n\n                scope.submit = function() {\n                  \n                    __Form.process({\n                        'apiURL' : 'manage.user.role_permission.write.create',\n                        'roleId' : roleId\n                    }, scope)\n                        .success(function(responseData) {\n                        appServices.processResponse(responseData, null, function() {\n                            // close dialog\n                            $scope.closeThisDialog();\n                        });    \n                    });\n                };\n\n                /*\n                 * Check if value updated then enable and disable radio button according to \n                 * current radio button\n                 *\n                 * @param string name  \n                 * @param number value\n                 * @param array dependencies\n                 * @param bool inheritStatus\n                 *\n                 * return array\n                 * -------------------------------------------------------------------------- */\n                scope.valueUpdated = function(name, value, dependencies, inheritStatus) {\n\n                    _.forEach(scope.accessData.permissions, function(permission) {\n                        if (permission[0].name == name) {\n\n                            if (permission[0].allow == 2) { //Allow\n\n                                _.map(permission, function(item) {\n                                    if (!_.isEmpty(item.dependencies)) {\n                                        item.disabled = false;\n                                    }\n                                });\n\n                            } else if (permission[0].allow == 3) { // Deny\n\n                                _.map(permission, function(item) {\n                                    if (!_.isEmpty(item.dependencies)) {\n                                        item.disabled = true;\n                                        item.allow = 3;\n                                    }\n                                });\n\n                            } else if (permission[0].allow == 1) { // Inherited\n\n                                if (permission[0].currentStatus) {\n\n                                    _.map(permission, function(item) {\n                                        if (!_.isEmpty(item.dependencies)) {\n                                            item.disabled = false;\n                                            item.allow = 1;\n                                        }\n                                    });\n\n                                } else {\n\n                                    _.map(permission, function(item) {\n                                        if (!_.isEmpty(item.dependencies)) {\n                                            item.disabled = true;\n                                            item.allow = 1;\n                                        }\n                                    });\n                                }\n                            }\n                        }\n                    });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n\n\n        \n                /**\n          * Add new Role Permission Controller \n          *\n          * inject object $scope\n          * inject object __DataStore\n          * inject object __Form\n          * inject object $stateParams\n          *\n          * @return  void\n          *---------------------------------------------------------------- */\n\n        .controller('AddRoleController', [\n            '$scope',\n            '__DataStore',\n            '__Form',\n            '$stateParams',\n            'addSupportData',\n            'appServices',\n            'RolePermissionDataService',\n            function ($scope, __DataStore, __Form, $stateParams, addSupportData, appServices, RolePermissionDataService) {\n\n                var scope  = this;\n \n                scope  = __Form.setup(scope, 'add_role', 'roleData', {\n                    secured : true,\n                    unsecuredFields : []\n                });\n\n                scope.userRoles = addSupportData.userRoles; \n                scope.permissions = addSupportData.permissions;\n                scope.roleData.allow_permissions = [];\n\t\t\t\tscope.roleData.deny_permissions = [];\n\t\t\t\tscope.checkedPermission = {};\n\n\n                /*\n                 Get Permission basis on the role id\n                -------------------------------------------------------------------------- */\n                scope.getPermissions = function(roleId) {\n\n                    RolePermissionDataService\n                        .getAllPermissionsById(roleId)\n                        .then(function(responseData) {\n                         \n                            scope.permissions = responseData.permissionData;\n                            scope.roleData.selected_permissions = responseData.allowedData;\n\n                            scope.roleData.allow_permissions = responseData.allow_permissions;\n \t\t\t\t\t\t\tscope.roleData.deny_permissions = responseData.deny_permissions;\n \t\t\t\t\t\t\tscope.checkedPermission = {};\n\t\t\t  \t\t\t\t\n\t\t\t\t\t\t\t_.map(scope.roleData.allow_permissions, function(permission) {\n\t\t\t\t\t\t\t \tscope.checkedPermission[permission] = \"2\";\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t_.map(scope.roleData.deny_permissions, function(permission) {\n\t\t\t\t\t\t\t \tscope.checkedPermission[permission] = \"3\";\n\t\t\t\t\t\t\t})\n                        })\n                };\n\n \t\t\t\t//for updating permissions\n                scope.checkPermission = function(childId, status) {\n \t\t\t\t\t\n \t\t\t\t\tif (!_.isString(status)) {\n \t\t\t\t\t\tstatus = status.toString();\n \t\t\t\t\t}\n\n \t\t\t\t\tscope.checkedPermission[childId] = status;\n\n                 \tif (status == \"2\") {\n\n                \t\tif(!_.includes(scope.roleData.allow_permissions, childId)) {\n                 \t\t\tscope.roleData.allow_permissions.push(childId);\n                \t\t}\n                 \t\tif (_.includes(scope.roleData.deny_permissions, childId)) {\n                 \t\t\tscope.roleData.deny_permissions = _.without(scope.roleData.deny_permissions, childId);\n                 \t\t}\n\n                \t} else if (status == \"3\")  {\n\n\t                   \tif(!_.includes(scope.roleData.deny_permissions, childId)) {\n                 \t\t\tscope.roleData.deny_permissions.push(childId);\n                \t\t}\n                 \t\tif (_.includes(scope.roleData.allow_permissions, childId)) {\n                 \t\t\tscope.roleData.allow_permissions = _.without(scope.roleData.allow_permissions, childId);\n                 \t\t}\n                \t}\n\n                \t_.map(scope.permissions, function(permission) {\n \t \n                        var pluckedIDs = _.pluck(permission.children, 'id'), \n                        keyPermissions = [];\n                        if (_.includes(pluckedIDs, childId) && permission.children[0].id != childId) {\n\n                            // _.map(permission.children, function(key) {\n                            // \tif (permission.children[0].id != key.id && !_.isUndefined(scope.checkedPermission[key.id])) {\n                            // \t\tkeyPermissions.push(scope.checkedPermission[key.id]);\n                            // \t}\n                            \t\t\n                            //     // if (key.id == childId && permission.children[0].id != childId) {\n                            //     //     _.map(key.dependencies, function(dependency) {\n                            //     //         scope.checkedPermission[dependency] = \"2\";\n                            //     //     });\n                            //     // }\n                            // });\n\n                            // scope.checkedPermission[permission.children[0].id] = \"3\";\n\n                            // if (_.includes(keyPermissions, \"2\")) {\n                            // \tscope.checkedPermission[permission.children[0].id] = \"2\";\n                            // }\n \n                        } else if (_.includes(pluckedIDs, childId) && permission.children[0].id == childId) {\n\n                            _.map(permission.children, function(key) {\n \n                                if (key.id != permission.children[0].id) {\n                                    _.map(key.dependencies, function(dependency) {\n                                        \n                                        if (_.includes(key.dependencies, childId) && status == \"3\") {\n                                            \n                                            $('input[name=\"'+key.id+'\"]').attr('disabled', true);\n\n                                        } else {\n                                            $('input[name=\"'+key.id+'\"]').attr('disabled', false);\n\n                                        }\n                                    });\n                                }\n                            })\n                        }\n                        \n                        if (_.has(permission, 'children_permission_group')) {\n                            _.map(permission.children_permission_group, function(groupchild) {\n\n                                var pluckedGroupChildIDs = _.pluck(groupchild.children, 'id'),\n                                keyPermissionsGroup = [];\n \n                                if (_.includes(pluckedGroupChildIDs, childId) && groupchild.children[0].id != childId) {\n         //                            _.map(groupchild.children, function(groupchildkey) {\n\n         //                            \tif (groupchild.children[0].id != groupchildkey.id && !_.isUndefined(scope.checkedPermission[groupchildkey.id])) {\n\t\t       //                      \t\tkeyPermissionsGroup.push(scope.checkedPermission[groupchildkey.id]);\n\t\t       //                      \t}\n\n         //                                // if (groupchildkey.id == childId && groupchild.children[0].id != childId) {\n         //                                //     _.map(groupchildkey.dependencies, function(dependency) {\n         //                                //         scope.checkedPermission[dependency] = \"2\";\n         //                                //     })\n         //                                // }\n         //                            });\n\n         //                            scope.checkedPermission[groupchild.children[0].id] = \"3\";\n\n\t\t\t\t\t\t\t\t\t// if (_.includes(keyPermissionsGroup, \"2\")) {\n\t\t\t\t\t\t\t\t\t// \tscope.checkedPermission[groupchild.children[0].id] = \"2\";\n\t\t\t\t\t\t\t\t\t// }\n \n                                } else if (_.includes(pluckedGroupChildIDs, childId) && groupchild.children[0].id == childId) {\n \n                                    _.map(groupchild.children, function(key2) {\n\t\t\t\t\t\t\t\t\t\t  \n                                        if (key2.id != groupchild.children[0].id) {\n                                            _.map(key2.dependencies, function(dependency) {\n                                                \n                                                if (_.includes(key2.dependencies, childId) && status == \"3\") {\n                                                    \n                                                    $('input[name=\"'+key2.id+'\"]').attr('disabled', true);\n\n                                                } else {\n                                                    $('input[name=\"'+key2.id+'\"]').attr('disabled', false);\n\n                                                }\n                                            })\n                                        }\n                                    });\n                                }\n\n                            });\n                        }\n\t\t\t\t\t})\n              \t}\n\n                /*\n                 Prepare Permissions\n                -------------------------------------------------------------------------- */\n                // scope.preparePermissions = function() {\n                //     scope.roleData.allow_permissions = [];\n                //     scope.roleData.deny_permissions = [];\n                    \n                //     if (!_.isEmpty(scope.roleData.selected_permissions)) {\n                //         _.forEach(scope.roleData.selected_permissions, function(item) {\n                //             var number = item.split(\"_\").pop();\n                            \n                //             if (number == 2) {\n                //                 scope.roleData.allow_permissions.push(_.trimRight(item, '_'+number));\n                //             } else if (number == 3) {\n                //                 scope.roleData.deny_permissions.push(_.trimRight(item, '_'+number));\n                //             }\n                //         });\n                //     }  \n                // }\n\n                /*\n                 Submit form action\n                -------------------------------------------------------------------------- */\n                scope.submit = function() {\n                    // scope.preparePermissions();\n                    __Form.process('manage.user.role_permission.write.role.create', scope)\n                        .success(function(responseData) {\n                        appServices.processResponse(responseData, null, function() {\n                            // close dialog\n                            $scope.closeThisDialog({'role_Added' : true});\n                        });    \n                    });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return void\n                  *---------------------------------------------------------------- */\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n    ;\n\n})(window, window.angular);","/*!\n*  Component  : SpecificationPreset\n*  File       : SpecificationPresetEngine.js  \n*  Engine     : SpecificationPreset \n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular.module('ManageApp.specificationPresetList', [])\n\n        /**\n        * SpecificationPreset List Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('SpecificationPresetListController', [\n            '$scope',                \n            '__DataStore',      \n            '$state',                \n            'appServices',                \n            '$rootScope',       \n        function ( $scope, __DataStore, $state, appServices, $rootScope) {\n\n            var dtColumnsData = [\n                    {\n                        \"name\"      : \"title\",\n                        \"orderable\" : true,\n                        \"template\"  : \"#specificationLabelColumnTemplate\"\n                    },\n                    {\n                        \"name\"      : null,\n                        \"template\"  : \"#specificationActionColumnTemplate\"\n                    }\n                ],\n                scope   = this;\n\n                /**\n                * Request to server\n                *\n                * @return  void\n                *---------------------------------------------------------- */\n\n                scope.specificationDataTable = __DataStore.dataTable('#lwSpecificationList', {\n                    url         : 'manage.specification_preset.read.list', \n                    dtOptions   : {\n                        \"searching\": true\n                    },\n                    columnsData : dtColumnsData, \n                    scope       : $scope\n                });\n\n                /*\n                Reload current datatable\n                ------------------------------------------------------------ */\n                scope.reloadDT = function() {\n                    __DataStore.reloadDT(scope.specificationDataTable);\n                };\n                \n                // when add new record \n                $scope.$on('specification_preset_added_or_updated', function (data) {\n                    \n                    if (data) {\n                        scope.reloadDT();\n                    }\n\n                });\n\n                //show preset Dialog\n                scope.showPresetDialog = function(presetId) {\n                    __DataStore.fetch({\n                        'apiURL' : 'manage.specification_preset.read.presetLabel',\n                        'presetId'  : presetId\n                    })\n                   .success(function(responseData) {\n                       var requestData = responseData.data;\n\n                        appServices.showDialog({\n                            'presetData' : requestData\n                        }, {\n                            templateUrl : __globals.getTemplateURL(\n                                    'specification-preset.manage.preset-detail-dialog'\n                                )\n                        }, function(promiseObj) {\n\n                            if (_.has(promiseObj.value, 'specification_preset_added_or_updated') && promiseObj.value.specification_preset_added_or_updated) {\n\n                                $rootScope.$broadcast('specification_preset_added_or_updated', true);\n                            }\n\n                            $state.go('specificationsPreset');\n\n                        }); \n                    });   \n                     \n                };\n\n                /**\n                  * Delete shipping rule sending http request using __DataStore post\n                  * function\n                  *\n                  * @param int    shippingID\n                  * @param string country\n                  *\n                  * return void\n                  *---------------------------------------------------------------- */\n\n                scope.delete = function(presetId, presetTitle) {\n                   \n                    var $lwSpecificationPresetDeleteTextMsg = $('#lwSpecificationPresetDeleteTextMsg');\n\n                    __globals.showConfirmation({\n                        html : __globals.getReplacedString($lwSpecificationPresetDeleteTextMsg,\n                                    '__title__',\n                                    _.unescape(presetTitle)\n                                ),\n                        confirmButtonText : $lwSpecificationPresetDeleteTextMsg.attr('data-delete-button-text')\n                    }, function() {\n\n                        __DataStore.post({\n                            'apiURL' : 'manage.specification_preset.write.delete',\n                            'presetId'  : presetId\n                        }).success(function(responseData) {\n                            \n                            var message = responseData.data.message;\n                            \n                            appServices.processResponse(responseData, {\n\n                                error : function(data) {\n                                __globals.showConfirmation({\n                                    title   : $lwSpecificationPresetDeleteTextMsg .attr('data-error-text'),\n                                    text    : message,\n                                    type    : 'error'\n                                });\n                            }\n\n                            }, function(data) {\n                                __globals.showConfirmation({\n                                    title   : $lwSpecificationPresetDeleteTextMsg .attr('data-success-text'),\n                                    text    : message,\n                                    type    : 'success'\n                                });\n                                scope.reloadDT();\n                            }); \n\n                        });\n\n                    });\n                };\n\n        }])\n        // SpecificationPreset List Controller ends here\n\n        /**\n        * PresetDetailController Detail Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('PresetDetailController', [\n            '$scope',                \n            '__DataStore',      \n            '$state',                \n            'appServices',                \n            '$rootScope',       \n        function ( $scope, __DataStore, $state, appServices, $rootScope) {\n            var scope   = this;\n            scope.ngDialogData   = $scope.ngDialogData;\n            scope.presetData     = scope.ngDialogData.presetData.presetLabels;\n          \n         /**\n         * Close dialog\n         *\n         * @return void\n         *---------------------------------------------------------------- */\n            scope.closeDialog = function() {\n                $scope.closeThisDialog();\n            };\n\n        }])\n\n\n        /**\n        * SpecificationPreset Add Dialog Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('PresetAddDialogController', [\n            '$scope',        \n            '__DataStore',        \n            '__Form',        \n            '$state',        \n            'appServices',        \n            '$rootScope',        \n        function ( $scope, __DataStore, __Form, $state, appServices, $rootScope) {\n\n                var scope = this;\n\n                appServices.showDialog({}, {\n                    templateUrl : __globals.getTemplateURL(\n                            'specification-preset.manage.add-dialog'\n                        )\n                }, function(promiseObj) {\n\n                    if (_.has(promiseObj.value, 'specification_preset_added_or_updated') && promiseObj.value.specification_preset_added_or_updated) {\n\n                        $rootScope.$broadcast('specification_preset_added_or_updated', true);\n                    }\n\n                    $state.go('specificationsPreset');\n\n                });\n            }\n        ])\n\n        /**\n         * comment here\n         *\n         * @inject $scope\n         * @inject __DataStore\n         * @inject appServices\n         * @inject __Form\n         *\n         * @return void\n         *-------------------------------------------------------- */\n        .controller('PresetAddController', [\n            '$scope',\n            '__DataStore',\n            'appServices',\n            '__Form',\n            function PresetAddController( $scope, __DataStore, appServices, __Form ) {\n\n                // Declare a local scope here\n                var scope = this;\n\n                // Show loader\n                scope.showLoader = true;\n\n                // Setup form\n                scope = __Form.setup(scope, 'specification_preset_form', 'presetData');\n\n                scope.presetData.specficationLabels = [\n                    {\n                        'label': '',\n                        'use_for_filter': false\n                    }\n                ];\n\n                /**\n                  * Add More Row\n                  *---------------------------------------------------------------- */\n                scope.addMoreRow = function() {\n                    scope.presetData.specficationLabels.push({\n                        'label': '',\n                        'use_for_filter': false\n                    });\n                }\n\n                /**\n                  * Remove Row\n                  *---------------------------------------------------------------- */\n                scope.removeRow = function(index) {\n                    _.remove(scope.presetData.specficationLabels, function(item, key) {\n                        return index == key;\n                    })\n                }\n\n                /**\n                  * Submit form method\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function() {\n\n                    // post route declared in web.php file\n                    __Form.process('manage.specification_preset.write.add', scope)\n                    .success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function() {\n                            $scope.closeThisDialog( {'specification_preset_added_or_updated' : true} );\n                        });    \n\n                    });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n\n        /**\n        * Preset Edit Dialog Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object userEditData\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('PresetEditDialogController', [\n            '$scope',        \n            '__DataStore',        \n            '__Form',        \n            '$state',        \n            'appServices',        \n            '$rootScope',        \n        function ( $scope, __DataStore, __Form, $state, appServices, $rootScope) {\n\n                var scope = this;\n\n                __DataStore.fetch({\n                    'apiURL'   : 'manage.specification_preset.read.editSupportadd',\n                    'presetId' : $state.params.presetId\n                }).success(function(responseData) {\n\n                    var requestData = responseData.data;\n\n                    appServices.processResponse(responseData, null, function() {\n\n                        appServices.showDialog(\n                        {\n                            'presetData' : requestData.presetData\n                        },\n                        {\n                            templateUrl : __globals.getTemplateURL(\n                                'specification-preset.manage.edit-dialog'\n                            )\n                        },\n                        function(promiseObj) {\n                           \n                            if (_.has(promiseObj.value, 'specification_preset_added_or_updated') && promiseObj.value.specification_preset_added_or_updated) {\n\n                                $rootScope.$broadcast('specification_preset_added_or_updated', true);\n                            }\n\n                            $state.go('specificationsPreset');\n\n                        }); \n\n                    });\n                });\n            }\n        ])\n\n        /**\n        * Preset Edit Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('PresetEditController', [\n            '$scope',                \n            '__DataStore',                \n            '__Form',                \n            '$state',                \n            'appServices',                \n            '$rootScope',                \n        function ( $scope,  __DataStore,  __Form,  $state,  appServices,  $rootScope) {\n\n            var scope       = this,\n                requestData = $scope.ngDialogData.presetData;\n\n            scope.showLoader = true;\n            scope = __Form.setup(scope, 'preset_edit_form', 'presetEditData');\n            \n            scope = __Form.updateModel(scope, requestData);\n            scope.showLoader = false;\n\n            /**\n              * Add More Row\n              *---------------------------------------------------------------- */\n            scope.addMoreRow = function() {\n                scope.presetEditData.specficationLabels.push({\n                    'label': '',\n                    'use_for_filter': false\n                });\n            }\n\n            /**\n              * Remove Row\n              *---------------------------------------------------------------- */\n            scope.removeRow = function(index) {\n                _.remove(scope.presetEditData.specficationLabels, function(item, key) {\n                    return index == key;\n                })\n            }\n\n            /**\n              * Delete Specification\n              *---------------------------------------------------------------- */\n            scope.deleteSpecification = function(specificationId, specificationIndex) {\n                __DataStore.post({\n                    'apiURL': 'manage.specification_preset.specification.delete',\n                    'specificationId': specificationId\n                 }).success(function(responseData) {\n                    appServices.processResponse(responseData, null, function(data) {\n                        scope.removeRow(specificationIndex);\n                        $rootScope.$broadcast('specification_preset_added_or_updated', true);\n                    });\n                });\n            }\n\n          /**\n            * Submit form\n            *\n            * @return  void\n            *---------------------------------------------------------------- */\n\n            scope.submit = function() {\n               \n                __Form.process({\n                    'apiURL'    : 'manage.specification_preset.write.update',\n                    'presetId'  : requestData._id\n                }, scope).success(function(responseData) {\n\n                    appServices.processResponse(responseData, null, function() {\n                        $scope.closeThisDialog( {'specification_preset_added_or_updated' : true} );\n                    });    \n                });\n            };\n\n          /**\n            * Close dialog\n            *\n            * @return  void\n            *---------------------------------------------------------------- */\n\n            scope.closeDialog = function() {\n                $scope.closeThisDialog();\n            };\n\n        }])\n    ;\n\n})(window, window.angular);","/*!\n*  Component  : ShippingType\n*  File       : ShippingTypeEngine.js  \n*  Engine     : ShippingTypeE\n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular.module('ManageApp.ShippingTypeEngine', [])\n\n         /**\n        *  shipping type List Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('ShippingTypListController', [\n            '$scope',                \n            '__DataStore',      \n            '$state',                \n            'appServices',                \n            '$rootScope',       \n        function ( $scope, __DataStore, $state, appServices, $rootScope) {\n\n            var dtColumnsData = [\n                    {\n                        \"name\"      : \"title\",\n                        \"orderable\" : true,\n                    },\n                    {\n                        \"name\"      : \"createdOn\",\n                        \"orderable\" : true,\n                        \"template\"    : \"#creationDateColumnTemplate\"\n                    },\n                    {\n                        \"name\"      : null,\n                        \"template\"  : \"#shippingTypeActionColumnTemplate\"\n                    }\n                ],\n                scope   = this;\n\n                /**\n                * Request to server\n                *\n                * @return  void\n                *---------------------------------------------------------- */\n\n                scope.shippingTypeDataTable = __DataStore.dataTable('#lwShippingTypeList', {\n                    url         : 'manage.shipping_type.read.list', \n                    dtOptions   : {\n                        \"searching\": true\n                    },\n                    columnsData : dtColumnsData, \n                    scope       : $scope\n                });\n\n                /*\n                Reload current datatable\n                ------------------------------------------------------------ */\n                scope.reloadDT = function() {\n                    __DataStore.reloadDT(scope.shippingTypeDataTable);\n                };\n                \n                // when add new record \n                $scope.$on('shipping_type_added_or_updated', function (data) {\n                    \n                    if (data) {\n                        scope.reloadDT();\n                    }\n\n                });\n\n                 /**\n                  * Delete shipping type sending http request using __DataStore post\n                  * function\n                  *\n                  * @param int    shippingID\n                  * @param string country\n                  *\n                  * return void\n                  *---------------------------------------------------------------- */\n\n                scope.delete = function(shippingTypeId, title) {\n                   \n                    var $lwShippingTypeDeleteTextMsg = $('#lwShippingTypeDeleteTextMsg');\n\n                    __globals.showConfirmation({\n                        html : __globals.getReplacedString($lwShippingTypeDeleteTextMsg,\n                                    '__title__',\n                                    _.unescape(title)\n                                ),\n                        confirmButtonText : $lwShippingTypeDeleteTextMsg.attr('data-delete-button-text')\n                    }, function() {\n\n                        __DataStore.post({\n                            'apiURL' : 'manage.shipping_type.write.delete',\n                            'shippingTypeId'  : shippingTypeId\n                        }).success(function(responseData) {\n                            \n                            var message = responseData.data.message;\n                            \n                            appServices.processResponse(responseData, {\n\n                                error : function(data) {\n                                __globals.showConfirmation({\n                                    title   : $lwShippingTypeDeleteTextMsg .attr('data-error-text'),\n                                    text    : message,\n                                    type    : 'error'\n                                });\n                            }\n\n                            }, function(data) {\n                                __globals.showConfirmation({\n                                    title   : $lwShippingTypeDeleteTextMsg .attr('data-success-text'),\n                                    text    : message,\n                                    type    : 'success'\n                                });\n                                scope.reloadDT();\n                            }); \n\n                        });\n\n                    });\n                };\n        \n        }])\n        //  shipping type List Controller ends here\n\n        /**\n        *  shipping type Add Dialog Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('ShippingTypeAddDialogController', [\n            '$scope',        \n            '__DataStore',        \n            '__Form',        \n            '$state',        \n            'appServices',        \n            '$rootScope',        \n        function ( $scope, __DataStore, __Form, $state, appServices, $rootScope) {\n\n                var scope = this;\n\n                appServices.showDialog({}, {\n                    templateUrl : __globals.getTemplateURL(\n                            'shipping-type.manage.add'\n                        )\n                }, function(promiseObj) {\n\n                    if (_.has(promiseObj.value, 'shipping_type_added_or_updated') && promiseObj.value.shipping_type_added_or_updated) {\n\n                        $rootScope.$broadcast('shipping_type_added_or_updated', true);\n                    }\n\n                    $state.go('shippingType');\n\n                });\n            }\n        ])\n        //  shipping type Add Dialog Controller ends here\n\n        /**\n         * comment here\n         *\n         * @inject $scope\n         * @inject __DataStore\n         * @inject appServices\n         * @inject __Form\n         *\n         * @return void\n         *-------------------------------------------------------- */\n        .controller('ShippingTypeAddController', [\n            '$scope',\n            '__DataStore',\n            'appServices',\n            '__Form',\n            function ShippingTypeAddController( $scope, __DataStore, appServices, __Form ) {\n\n                // Declare a local scope here\n                var scope = this;\n\n                // Show loader\n                scope.showLoader = true;\n\n                // Setup form\n                scope = __Form.setup(scope, 'shipping_type_form', 'shippingTypeData');\n\n                /**\n                  * Submit form method\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.submit = function() {\n\n                    // post route declared in web.php file\n                    __Form.process('manage.shipping_type.write.create', scope)\n                    .success(function(responseData) {\n\n                        appServices.processResponse(responseData, null, function() {\n                            $scope.closeThisDialog( {'shipping_type_added_or_updated' : true} );\n                        });    \n\n                    });\n                };\n\n                /**\n                  * Close dialog\n                  *\n                  * @return  void\n                  *---------------------------------------------------------------- */\n\n                scope.closeDialog = function() {\n                    $scope.closeThisDialog();\n                };\n            }\n        ])\n        //  shipping type Add Controller ends here\n\n        /**\n        * Shipping type Edit Dialog Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        * inject object userEditData\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('ShippingTypeEditDialogController', [\n            '$scope',        \n            '__DataStore',        \n            '__Form',        \n            '$state',        \n            'appServices',        \n            '$rootScope',        \n        function ( $scope, __DataStore, __Form, $state, appServices, $rootScope) {\n\n                var scope = this;\n\n                __DataStore.fetch({\n                    'apiURL'   : 'manage.shipping_type.read.update.data',\n                    'shippingTypeId' : $state.params.shippingTypeId\n                }).success(function(responseData) {\n\n                    var requestData = responseData.data;\n\n                    appServices.processResponse(responseData, null, function() {\n\n                        appServices.showDialog(\n                        {\n                            'shippingTypeData' : requestData.shippingTypeData\n                        },\n                        { \n                            templateUrl : __globals.getTemplateURL(\n                                'shipping-type.manage.edit'\n                            )\n                        },\n                        function(promiseObj) {\n                           \n                            if (_.has(promiseObj.value, 'shipping_type_added_or_updated') && promiseObj.value.shipping_type_added_or_updated) {\n\n                                $rootScope.$broadcast('shipping_type_added_or_updated', true);\n                            }\n\n                            $state.go('shippingType');\n\n                        }); \n\n                    });\n                });\n            }\n        ])\n        //  shipping type Add Controller ends here\n\n        /**\n        * Shipping type Edit Controller\n        *\n        * inject object $scope\n        * inject object __DataStore\n        * inject object __Form\n        * inject object $state\n        * inject object appServices\n        * inject object $rootScope\n        *\n        * @return  void\n        *---------------------------------------------------------------- */\n\n        .controller('ShippingTypeEditController', [\n            '$scope',                \n            '__DataStore',                \n            '__Form',                \n            '$state',                \n            'appServices',                \n            '$rootScope',                \n        function ( $scope,  __DataStore,  __Form,  $state,  appServices,  $rootScope) {\n\n            var scope       = this,\n                requestData = $scope.ngDialogData.shippingTypeData;\n\n            scope.showLoader = true;\n\n            scope = __Form.setup(scope, 'shipping_type_edit_form', 'shippingTypeEditData');\n\n            scope = __Form.updateModel(scope, requestData);\n            scope.showLoader = false;\n\n\n          /**\n            * Submit form\n            *\n            * @return  void\n            *---------------------------------------------------------------- */\n\n            scope.submit = function() {\n\n                __Form.process({\n                    'apiURL'    : 'manage.shipping_type.write.update',\n                    'shippingTypeId'  : requestData.id\n                }, scope).success(function(responseData) {\n\n                    appServices.processResponse(responseData, null, function() {\n                        $scope.closeThisDialog( {'shipping_type_added_or_updated' : true} );\n                    });    \n                });\n            };\n\n          /**\n            * Close dialog\n            *\n            * @return  void\n            *---------------------------------------------------------------- */\n\n            scope.closeDialog = function() {\n                $scope.closeThisDialog();\n            };\n        }\n    ])\n    ;\n\n})(window, window.angular);","(function() {\n'use strict';\n    \n    /*\n     TransliterateDialogController module\n    -------------------------------------------------------------------------- */\n    \n    angular\n        .module('ManageApp.transliterateDialog', [])\n        .controller('TransliterateDialogController',   [\n            '$scope',\n            'getTransliterateData',\n            '__Form',\n            'appServices',\n            'TransliterateDataServices',\n            '__DataStore',\n            '$http',\n            TransliterateDialogController \n        ]);\n\n    /**\n      * TransliterateDialogController for manage product list\n      *\n      * @inject $scope\n      * @inject __Form\n      * \n      * @return void\n      *-------------------------------------------------------- */\n    function TransliterateDialogController($scope, getTransliterateData, __Form, appServices, TransliterateDataServices, __DataStore, $http) {\n\n        var scope   = this,\n            requestData    = getTransliterateData,\n            ngDialogData   = $scope.ngDialogData,\n            entityType     = ngDialogData.entityType,\n            entityId       = ngDialogData.entityId,\n            entityKey      = ngDialogData.entityKey;\n\n        scope.inputType = ngDialogData.inputType;\n        scope.availableLocale = requestData.availableLocale;\n        scope.availableTransliterate = requestData.availableTransliterate;\n        scope.isDefaultLangEng = requestData.isDefaultLangEng;\n        scope.storeDefaultLanguage = requestData.storeDefaultLanguage;\n        scope.entityString = ngDialogData.entityString;\n        scope.showAutoTransliterate = false;\n        scope.showTranslateLink = false;\n        scope.showError = false;\n        scope  = __Form.setup(scope, 'form_transliterate_update', 'transliterateData');\n\n        /**\n        * Get Auto Transliterate\n        * \n        * @return void\n        *---------------------------------------------------------------- */\n        scope.getAutoTransliterate = function(string, translateTo, inputType) {\n            var translateTo = translateTo.substr(0, 2);\n            $.post('https://www.google.com/inputtools/request', {\n                'text': string,\n                'ime': 'transliteration_en_'+translateTo,\n                'num': 5,\n                'cp': 0,\n                'ie': 'utf-8',\n                'oe': 'utf-8',\n                'app': 'jsapi'\n            }, function(responseData) {\n                if (responseData[0] == 'SUCCESS') {\n                    scope.transliterateData.translate_text = _.get(responseData, '1.0.1.0');\n\n                    _.defer(function() {\n                    if (inputType != 3) {\n                        angular.element('.lw-translate-text').val(scope.transliterateData.translate_text);\n                        angular.element('.lw-translate-text').trigger('input '); // Use for Chrome/Firefox/Edge\n                        angular.element('.lw-translate-text').trigger('change'); // Use for Chrome/Firefox/Edge + IE11\n                    } else {\n                        angular.element('.lw-translate-text').trumbowyg('html', scope.transliterateData.translate_text);\n                    }\n                });\n                }\n            });\n        }\n\n        /**\n        * Get Auto Translate Data\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        scope.getAutoTranslate = function(string, translateTo, inputType) {\n            var inputData = {\n                'string': string\n            }, \n            translateTo = translateTo.substr(0, 2);\n            __DataStore.post('manage.transliterate.write.get_original_text', inputData)\n                .success(function(responseData) {\n                appServices.processResponse(responseData, null, function() {\n                    var requestData = responseData.data;\n                    $.post('https://translate.googleapis.com/translate_a/single', {\n                        'client':'gtx',\n                        'sl':scope.storeDefaultLanguage,\n                        'tl':translateTo,\n                        'dt':'t',\n                        'q':requestData.originalText\n                    }, function(responseData) {\n\n                        if (inputType == 2 || inputType == 3) {\n                            var translatedDescription = '';\n                            _.forEach(responseData[0], function(item) {\n                                translatedDescription += _.first(item);\n                            });\n                            scope.transliterateData.translate_text = translatedDescription;\n                        } else {\n                            scope.transliterateData.translate_text = _.get(responseData, '0.0.0'); \n                        }\n\n                        _.defer(function() {\n                            if (inputType != 3) {\n                                angular.element('.lw-translate-text').val(scope.transliterateData.translate_text);\n                \t\t        angular.element('.lw-translate-text').trigger('input '); // Use for Chrome/Firefox/Edge\n                                angular.element('.lw-translate-text').trigger('change'); // Use for Chrome/Firefox/Edge + IE11\n                            } else {\n                                angular.element('.lw-translate-text').trumbowyg('html', scope.transliterateData.translate_text);\n                            }\n                        });\n\n                    }, 'JSON').fail(function(response) {\n                        // alert('Error: ' + response.responseText);\n                        scope.showError = true;\n                    });\n                });        \n            });\n        }\n\n        /**\n        * Get Translate Data\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        scope.getTranslateData = function(language) {\n            scope.showTranslateLink = true;\n            if (scope.isDefaultLangEng && scope.inputType != 3) {\n                var langShortCode = language.substr(0, 2);\n                if (_.includes(scope.availableTransliterate, langShortCode)) {\n                    scope.showAutoTransliterate = true;\n                } else {\n                    scope.showAutoTransliterate = false;\n                }\n            }\n\n            TransliterateDataServices\n            .getTranslateDataViaLanguage(entityType, entityId, entityKey, language)\n            .then(function(responseData) {\n                scope.transliterateData.translate_text = '';\n                if (!_.isEmpty(responseData.transliterateData.translate_text)) {\n                    scope.transliterateData.translate_text = responseData.transliterateData.translate_text;\n                }\n            });\n        }\n\n       /**\n        * process update order\n        *\n        * @return void\n        *---------------------------------------------------------------- */\n        scope.update = function() {\n            __Form.process({\n                'apiURL'        :'manage.transliterate.write.update',\n                'entityType'    : entityType,\n                'entityId'      : entityId,\n                'entityKey'     : entityKey\n            }, scope ).success( function( responseData ) {                          \n                appServices.processResponse(responseData, null, function() {\n                    //$scope.closeThisDialog();\n                    scope.transliterateData = {};\n                });\n            });\n        };\n\n    \t/**\n    \t  * Close dialog\n    \t  *\n    \t  * @return void\n    \t  *---------------------------------------------------------------- */\n\t\tscope.closeDialog = function() {\n\t  \t\t$scope.closeThisDialog();\n\t  \t};\n\t            \n    };\n\n})();","/*!\n*  Component  : Transliterate\n*  File       : TransliterateDataServices.js  \n*  Engine     : TransliterateDataServices \n----------------------------------------------------------------------------- */\n\n(function(window, angular, undefined) {\n\n    'use strict';\n\n    angular\n        .module('ManageApp.TransliterateDataServices', [])\n        .service('TransliterateDataServices',[\n            '$q', \n            '__DataStore',\n            'appServices',\n            TransliterateDataServices\n        ])\n\n        /*!\n         This service use for to get the promise on data\n        ----------------------------------------------------------------------------- */\n\n        function TransliterateDataServices($q, __DataStore, appServices) {\n\n            /*\n            Get Permissions\n            -----------------------------------------------------------------*/\n            this.getTransliterateSupportData = function(entityType, entityId, entityKey) {\n                \n                //create a differed object          \n                var defferedObject = $q.defer();   \n   \n                __DataStore.fetch({\n                    'apiURL' : 'manage.transliterate.read.support_data',\n                    'entityType' : entityType,\n                    'entityId': entityId,\n                    'entityKey': entityKey\n                }).success(function(responseData) {\n                            \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);  \n\n                    }); \n\n                });       \n\n               //return promise to caller          \n               return defferedObject.promise; \n            };\n\n            /*\n            Get Permissions\n            -----------------------------------------------------------------*/\n            this.getTranslateDataViaLanguage = function(entityType, entityId, entityKey, language) {\n                \n                //create a differed object          \n                var defferedObject = $q.defer();   \n   \n                __DataStore.fetch({\n                    'apiURL' : 'manage.transliterate.read.translate_data',\n                    'entityType' : entityType,\n                    'entityId': entityId,\n                    'entityKey': entityKey,\n                    'language' : language\n                }).success(function(responseData) {\n                            \n                    appServices.processResponse(responseData, null, function(reactionCode) {\n\n                        //this method calls when the require        \n                        //work has completed successfully        \n                        //and results are returned to client        \n                        defferedObject.resolve(responseData.data);  \n\n                    }); \n\n                });       \n\n               //return promise to caller          \n               return defferedObject.promise; \n            };\n        };\n\n})(window, window.angular);\n"]}